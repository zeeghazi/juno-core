{
  "version": 3,
  "sources": ["node-modules-polyfills:buffer", "node-modules-polyfills-commonjs:buffer", "../../node_modules/ieee754/index.js", "../../node_modules/bignumber.js/bignumber.js", "../../node_modules/borc/src/decoder.asm.js", "../../node_modules/borc/src/constants.js", "../../node_modules/borc/src/utils.js", "../../node_modules/borc/src/simple.js", "../../node_modules/borc/src/tagged.js", "../../node_modules/iso-url/src/url-browser.js", "../../node_modules/iso-url/src/relative.js", "../../node_modules/iso-url/index.js", "../../node_modules/borc/src/decoder.js", "../../node_modules/borc/src/diagnose.js", "../../node_modules/borc/src/encoder.js", "../../node_modules/borc/src/index.js", "../../node_modules/simple-cbor/src/value.ts", "../../node_modules/simple-cbor/src/serializer.ts", "../../node_modules/simple-cbor/src/index.ts", "../../node_modules/@dfinity/principal/src/utils/base32.ts", "../../node_modules/@dfinity/principal/src/utils/getCrc.ts", "../../node_modules/@noble/hashes/src/_assert.ts", "../../node_modules/@noble/hashes/src/crypto.ts", "../../node_modules/@noble/hashes/src/utils.ts", "../../node_modules/@noble/hashes/src/_md.ts", "../../node_modules/@noble/hashes/src/sha256.ts", "../../node_modules/@dfinity/principal/src/utils/sha224.ts", "../../node_modules/@dfinity/principal/src/index.ts", "../../node_modules/@dfinity/agent/src/errors.ts", "../../node_modules/@dfinity/agent/src/cbor.ts", "../../node_modules/@dfinity/agent/src/utils/buffer.ts", "../../node_modules/@dfinity/candid/src/idl.ts", "../../node_modules/@dfinity/candid/src/utils/buffer.ts", "../../node_modules/@dfinity/candid/src/utils/hash.ts", "../../node_modules/@dfinity/candid/src/utils/leb128.ts", "../../node_modules/@dfinity/candid/src/utils/bigint-math.ts", "../../node_modules/@dfinity/agent/src/request_id.ts", "../../node_modules/@noble/curves/src/abstract/utils.ts", "../../node_modules/@noble/curves/src/abstract/modular.ts", "../../node_modules/@noble/curves/src/abstract/hash-to-curve.ts", "../../node_modules/@noble/curves/src/abstract/curve.ts", "../../node_modules/@noble/curves/src/abstract/weierstrass.ts", "../../node_modules/@noble/curves/src/abstract/bls.ts", "../../node_modules/@noble/curves/src/bls12-381.ts", "../../node_modules/@dfinity/agent/src/utils/bls.ts", "../../node_modules/@dfinity/agent/src/utils/leb.ts", "../../node_modules/@dfinity/agent/src/certificate.ts", "../../node_modules/@dfinity/agent/src/canisterStatus/index.ts"],
  "sourcesContent": ["var lookup = [];\nvar revLookup = [];\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\nvar inited = false;\nfunction init () {\n  inited = true;\n  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n  for (var i = 0, len = code.length; i < len; ++i) {\n    lookup[i] = code[i];\n    revLookup[code.charCodeAt(i)] = i;\n  }\n\n  revLookup['-'.charCodeAt(0)] = 62;\n  revLookup['_'.charCodeAt(0)] = 63;\n}\n\nfunction toByteArray (b64) {\n  if (!inited) {\n    init();\n  }\n  var i, j, l, tmp, placeHolders, arr;\n  var len = b64.length;\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;\n\n  // base64 is 4/3 + up to two characters of the original data\n  arr = new Arr(len * 3 / 4 - placeHolders);\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len;\n\n  var L = 0;\n\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];\n    arr[L++] = (tmp >> 16) & 0xFF;\n    arr[L++] = (tmp >> 8) & 0xFF;\n    arr[L++] = tmp & 0xFF;\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);\n    arr[L++] = tmp & 0xFF;\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);\n    arr[L++] = (tmp >> 8) & 0xFF;\n    arr[L++] = tmp & 0xFF;\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp;\n  var output = [];\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);\n    output.push(tripletToBase64(tmp));\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  if (!inited) {\n    init();\n  }\n  var tmp;\n  var len = uint8.length;\n  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n  var output = '';\n  var parts = [];\n  var maxChunkLength = 16383; // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1];\n    output += lookup[tmp >> 2];\n    output += lookup[(tmp << 4) & 0x3F];\n    output += '==';\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);\n    output += lookup[tmp >> 10];\n    output += lookup[(tmp >> 4) & 0x3F];\n    output += lookup[(tmp << 2) & 0x3F];\n    output += '=';\n  }\n\n  parts.push(output);\n\n  return parts.join('')\n}\n\nfunction read (buffer, offset, isLE, mLen, nBytes) {\n  var e, m;\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var nBits = -7;\n  var i = isLE ? (nBytes - 1) : 0;\n  var d = isLE ? -1 : 1;\n  var s = buffer[offset + i];\n\n  i += d;\n\n  e = s & ((1 << (-nBits)) - 1);\n  s >>= (-nBits);\n  nBits += eLen;\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1);\n  e >>= (-nBits);\n  nBits += mLen;\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen);\n    e = e - eBias;\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nfunction write (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c;\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);\n  var i = isLE ? 0 : (nBytes - 1);\n  var d = isLE ? 1 : -1;\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;\n\n  value = Math.abs(value);\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0;\n    e = eMax;\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2);\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * Math.pow(2, 1 - eBias);\n    }\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n      e = 0;\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m;\n  eLen += mLen;\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128;\n}\n\nvar toString = {}.toString;\n\nvar isArray = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n\nvar INSPECT_MAX_BYTES = 50;\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : true;\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nvar _kMaxLength = kMaxLength();\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length);\n    that.__proto__ = Buffer.prototype;\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length);\n    }\n    that.length = length;\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192; // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype;\n  return arr\n};\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n};\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype;\n  Buffer.__proto__ = Uint8Array;\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size);\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n};\n\nfunction allocUnsafe (that, size) {\n  assertSize(size);\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0;\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n};\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n};\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8';\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0;\n  that = createBuffer(that, length);\n\n  var actual = that.write(string, encoding);\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual);\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0;\n  that = createBuffer(that, length);\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255;\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength; // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array);\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset);\n  } else {\n    array = new Uint8Array(array, byteOffset, length);\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array;\n    that.__proto__ = Buffer.prototype;\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array);\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (internalIsBuffer(obj)) {\n    var len = checked(obj.length) | 0;\n    that = createBuffer(that, len);\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len);\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0;\n  }\n  return Buffer.alloc(+length)\n}\nBuffer.isBuffer = isBuffer;\nfunction internalIsBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!internalIsBuffer(a) || !internalIsBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length;\n  var y = b.length;\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n};\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n};\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i;\n  if (length === undefined) {\n    length = 0;\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length;\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length);\n  var pos = 0;\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i];\n    if (!internalIsBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos);\n    pos += buf.length;\n  }\n  return buffer\n};\n\nfunction byteLength (string, encoding) {\n  if (internalIsBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string;\n  }\n\n  var len = string.length;\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false;\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase();\n        loweredCase = true;\n    }\n  }\n}\nBuffer.byteLength = byteLength;\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false;\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0;\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length;\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0;\n  start >>>= 0;\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8';\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase();\n        loweredCase = true;\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true;\n\nfunction swap (b, n, m) {\n  var i = b[n];\n  b[n] = b[m];\n  b[m] = i;\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length;\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1);\n  }\n  return this\n};\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length;\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3);\n    swap(this, i + 1, i + 2);\n  }\n  return this\n};\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length;\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7);\n    swap(this, i + 1, i + 6);\n    swap(this, i + 2, i + 5);\n    swap(this, i + 3, i + 4);\n  }\n  return this\n};\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0;\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n};\n\nBuffer.prototype.equals = function equals (b) {\n  if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n};\n\nBuffer.prototype.inspect = function inspect () {\n  var str = '';\n  var max = INSPECT_MAX_BYTES;\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');\n    if (this.length > max) str += ' ... ';\n  }\n  return '<Buffer ' + str + '>'\n};\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!internalIsBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0;\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0;\n  }\n  if (thisStart === undefined) {\n    thisStart = 0;\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length;\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0;\n  end >>>= 0;\n  thisStart >>>= 0;\n  thisEnd >>>= 0;\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart;\n  var y = end - start;\n  var len = Math.min(x, y);\n\n  var thisCopy = this.slice(thisStart, thisEnd);\n  var targetCopy = target.slice(start, end);\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i];\n      y = targetCopy[i];\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n};\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset;\n    byteOffset = 0;\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff;\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000;\n  }\n  byteOffset = +byteOffset;  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1);\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1;\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0;\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding);\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (internalIsBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF; // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1;\n  var arrLength = arr.length;\n  var valLength = val.length;\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase();\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2;\n      arrLength /= 2;\n      valLength /= 2;\n      byteOffset /= 2;\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i;\n  if (dir) {\n    var foundIndex = -1;\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i;\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex;\n        foundIndex = -1;\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true;\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false;\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n};\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n};\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n};\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0;\n  var remaining = buf.length - offset;\n  if (!length) {\n    length = remaining;\n  } else {\n    length = Number(length);\n    if (length > remaining) {\n      length = remaining;\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length;\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2;\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16);\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed;\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8';\n    length = this.length;\n    offset = 0;\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset;\n    length = this.length;\n    offset = 0;\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0;\n    if (isFinite(length)) {\n      length = length | 0;\n      if (encoding === undefined) encoding = 'utf8';\n    } else {\n      encoding = length;\n      length = undefined;\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset;\n  if (length === undefined || length > remaining) length = remaining;\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8';\n\n  var loweredCase = false;\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase();\n        loweredCase = true;\n    }\n  }\n};\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n};\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return fromByteArray(buf)\n  } else {\n    return fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end);\n  var res = [];\n\n  var i = start;\n  while (i < end) {\n    var firstByte = buf[i];\n    var codePoint = null;\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1;\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint;\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte;\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1];\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint;\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1];\n          thirdByte = buf[i + 2];\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint;\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1];\n          thirdByte = buf[i + 2];\n          fourthByte = buf[i + 3];\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint;\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD;\n      bytesPerSequence = 1;\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000;\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800);\n      codePoint = 0xDC00 | codePoint & 0x3FF;\n    }\n\n    res.push(codePoint);\n    i += bytesPerSequence;\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000;\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length;\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = '';\n  var i = 0;\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    );\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = '';\n  end = Math.min(buf.length, end);\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F);\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = '';\n  end = Math.min(buf.length, end);\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i]);\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length;\n\n  if (!start || start < 0) start = 0;\n  if (!end || end < 0 || end > len) end = len;\n\n  var out = '';\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i]);\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end);\n  var res = '';\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length;\n  start = ~~start;\n  end = end === undefined ? len : ~~end;\n\n  if (start < 0) {\n    start += len;\n    if (start < 0) start = 0;\n  } else if (start > len) {\n    start = len;\n  }\n\n  if (end < 0) {\n    end += len;\n    if (end < 0) end = 0;\n  } else if (end > len) {\n    end = len;\n  }\n\n  if (end < start) end = start;\n\n  var newBuf;\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end);\n    newBuf.__proto__ = Buffer.prototype;\n  } else {\n    var sliceLen = end - start;\n    newBuf = new Buffer(sliceLen, undefined);\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start];\n    }\n  }\n\n  return newBuf\n};\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n  var val = this[offset];\n  var mul = 1;\n  var i = 0;\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul;\n  }\n\n  return val\n};\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length);\n  }\n\n  var val = this[offset + --byteLength];\n  var mul = 1;\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul;\n  }\n\n  return val\n};\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length);\n  return this[offset]\n};\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  return this[offset] | (this[offset + 1] << 8)\n};\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  return (this[offset] << 8) | this[offset + 1]\n};\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n};\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n};\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n  var val = this[offset];\n  var mul = 1;\n  var i = 0;\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul;\n  }\n  mul *= 0x80;\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n\n  return val\n};\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n  var i = byteLength;\n  var mul = 1;\n  var val = this[offset + --i];\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul;\n  }\n  mul *= 0x80;\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n\n  return val\n};\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length);\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n};\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  var val = this[offset] | (this[offset + 1] << 8);\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n};\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  var val = this[offset + 1] | (this[offset] << 8);\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n};\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n};\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n};\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return read(this, offset, true, 23, 4)\n};\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return read(this, offset, false, 23, 4)\n};\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length);\n  return read(this, offset, true, 52, 8)\n};\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length);\n  return read(this, offset, false, 52, 8)\n};\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!internalIsBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n    checkInt(this, value, offset, byteLength, maxBytes, 0);\n  }\n\n  var mul = 1;\n  var i = 0;\n  this[offset] = value & 0xFF;\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF;\n  }\n\n  return offset + byteLength\n};\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n    checkInt(this, value, offset, byteLength, maxBytes, 0);\n  }\n\n  var i = byteLength - 1;\n  var mul = 1;\n  this[offset + i] = value & 0xFF;\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF;\n  }\n\n  return offset + byteLength\n};\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n  this[offset] = (value & 0xff);\n  return offset + 1\n};\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1;\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8;\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff);\n    this[offset + 1] = (value >>> 8);\n  } else {\n    objectWriteUInt16(this, value, offset, true);\n  }\n  return offset + 2\n};\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8);\n    this[offset + 1] = (value & 0xff);\n  } else {\n    objectWriteUInt16(this, value, offset, false);\n  }\n  return offset + 2\n};\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1;\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24);\n    this[offset + 2] = (value >>> 16);\n    this[offset + 1] = (value >>> 8);\n    this[offset] = (value & 0xff);\n  } else {\n    objectWriteUInt32(this, value, offset, true);\n  }\n  return offset + 4\n};\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24);\n    this[offset + 1] = (value >>> 16);\n    this[offset + 2] = (value >>> 8);\n    this[offset + 3] = (value & 0xff);\n  } else {\n    objectWriteUInt32(this, value, offset, false);\n  }\n  return offset + 4\n};\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1);\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n  }\n\n  var i = 0;\n  var mul = 1;\n  var sub = 0;\n  this[offset] = value & 0xFF;\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1;\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;\n  }\n\n  return offset + byteLength\n};\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1);\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n  }\n\n  var i = byteLength - 1;\n  var mul = 1;\n  var sub = 0;\n  this[offset + i] = value & 0xFF;\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1;\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;\n  }\n\n  return offset + byteLength\n};\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n  if (value < 0) value = 0xff + value + 1;\n  this[offset] = (value & 0xff);\n  return offset + 1\n};\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff);\n    this[offset + 1] = (value >>> 8);\n  } else {\n    objectWriteUInt16(this, value, offset, true);\n  }\n  return offset + 2\n};\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8);\n    this[offset + 1] = (value & 0xff);\n  } else {\n    objectWriteUInt16(this, value, offset, false);\n  }\n  return offset + 2\n};\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff);\n    this[offset + 1] = (value >>> 8);\n    this[offset + 2] = (value >>> 16);\n    this[offset + 3] = (value >>> 24);\n  } else {\n    objectWriteUInt32(this, value, offset, true);\n  }\n  return offset + 4\n};\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n  if (value < 0) value = 0xffffffff + value + 1;\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24);\n    this[offset + 1] = (value >>> 16);\n    this[offset + 2] = (value >>> 8);\n    this[offset + 3] = (value & 0xff);\n  } else {\n    objectWriteUInt32(this, value, offset, false);\n  }\n  return offset + 4\n};\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4);\n  }\n  write(buf, value, offset, littleEndian, 23, 4);\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n};\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n};\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8);\n  }\n  write(buf, value, offset, littleEndian, 52, 8);\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n};\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n};\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0;\n  if (!end && end !== 0) end = this.length;\n  if (targetStart >= target.length) targetStart = target.length;\n  if (!targetStart) targetStart = 0;\n  if (end > 0 && end < start) end = start;\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length;\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start;\n  }\n\n  var len = end - start;\n  var i;\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start];\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start];\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    );\n  }\n\n  return len\n};\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start;\n      start = 0;\n      end = this.length;\n    } else if (typeof end === 'string') {\n      encoding = end;\n      end = this.length;\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0);\n      if (code < 256) {\n        val = code;\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255;\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0;\n  end = end === undefined ? this.length : end >>> 0;\n\n  if (!val) val = 0;\n\n  var i;\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val;\n    }\n  } else {\n    var bytes = internalIsBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString());\n    var len = bytes.length;\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len];\n    }\n  }\n\n  return this\n};\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g;\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '');\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '=';\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity;\n  var codePoint;\n  var length = string.length;\n  var leadSurrogate = null;\n  var bytes = [];\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i);\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint;\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n        leadSurrogate = codePoint;\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n    }\n\n    leadSurrogate = null;\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint);\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      );\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      );\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      );\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = [];\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF);\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo;\n  var byteArray = [];\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i);\n    hi = c >> 8;\n    lo = c % 256;\n    byteArray.push(lo);\n    byteArray.push(hi);\n  }\n\n  return byteArray\n}\n\n\nfunction base64ToBytes (str) {\n  return toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i];\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n\n// the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nfunction isBuffer(obj) {\n  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))\n}\n\nfunction isFastBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))\n}\n\nexport { Buffer, INSPECT_MAX_BYTES, SlowBuffer, isBuffer, _kMaxLength as kMaxLength };\n", "\nconst polyfill = require('buffer')\n\nif (polyfill && polyfill.default) {\n    module.exports = polyfill.default\n    for (let k in polyfill) {\n        module.exports[k] = polyfill[k]\n    }\n} else if (polyfill)  {\n    module.exports = polyfill\n}\n\n\n", "/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n", ";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v9.1.2\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n      alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if less than two characters,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n              alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, -1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return \u00B10 if x is \u00B10 or y is \u00B1Infinity, or return \u00B1Infinity as y is \u00B10.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    // If any number is NaN, return NaN.\r\n    function maxOrMin(args, n) {\r\n      var k, y,\r\n        i = 1,\r\n        x = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        y = new BigNumber(args[i]);\r\n        if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {\r\n          x = y;\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on \u00B1Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = mathfloor(n / pows10[d - j - 1] % 10);\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is \u00B1Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and \u00B1Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, \u00B1Infinity, \u00B10 or \u00B11, or n is \u00B1Infinity, NaN or \u00B10.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to \u00B1Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to \u00B1Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to \u00B10: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = \u00B1Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return \u00B10, else return \u00B1Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) {\r\n        t = xc;\r\n        xc = yc;\r\n        yc = t;\r\n        y.s = -y.s;\r\n      }\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, \u00B1Infinity or \u00B10?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return \u00B1Infinity if either is \u00B1Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return \u00B10 if either is \u00B10.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) {\r\n        zc = xc;\r\n        xc = yc;\r\n        yc = zc;\r\n        i = xcL;\r\n        xcL = ycL;\r\n        ycL = i;\r\n      }\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return \u00B1Infinity if either \u00B1Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) {\r\n        t = yc;\r\n        yc = xc;\r\n        xc = t;\r\n        b = a;\r\n      }\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is \u00B1Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) {\r\n          i = g1;\r\n          g1 = g2;\r\n          g2 = i;\r\n          len -= i;\r\n        }\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n", "/* eslint-disable */\n\nmodule.exports = function decodeAsm (stdlib, foreign, buffer) {\n  'use asm'\n\n  // -- Imports\n\n  var heap = new stdlib.Uint8Array(buffer)\n  // var log = foreign.log\n  var pushInt = foreign.pushInt\n  var pushInt32 = foreign.pushInt32\n  var pushInt32Neg = foreign.pushInt32Neg\n  var pushInt64 = foreign.pushInt64\n  var pushInt64Neg = foreign.pushInt64Neg\n  var pushFloat = foreign.pushFloat\n  var pushFloatSingle = foreign.pushFloatSingle\n  var pushFloatDouble = foreign.pushFloatDouble\n  var pushTrue = foreign.pushTrue\n  var pushFalse = foreign.pushFalse\n  var pushUndefined = foreign.pushUndefined\n  var pushNull = foreign.pushNull\n  var pushInfinity = foreign.pushInfinity\n  var pushInfinityNeg = foreign.pushInfinityNeg\n  var pushNaN = foreign.pushNaN\n  var pushNaNNeg = foreign.pushNaNNeg\n\n  var pushArrayStart = foreign.pushArrayStart\n  var pushArrayStartFixed = foreign.pushArrayStartFixed\n  var pushArrayStartFixed32 = foreign.pushArrayStartFixed32\n  var pushArrayStartFixed64 = foreign.pushArrayStartFixed64\n  var pushObjectStart = foreign.pushObjectStart\n  var pushObjectStartFixed = foreign.pushObjectStartFixed\n  var pushObjectStartFixed32 = foreign.pushObjectStartFixed32\n  var pushObjectStartFixed64 = foreign.pushObjectStartFixed64\n\n  var pushByteString = foreign.pushByteString\n  var pushByteStringStart = foreign.pushByteStringStart\n  var pushUtf8String = foreign.pushUtf8String\n  var pushUtf8StringStart = foreign.pushUtf8StringStart\n\n  var pushSimpleUnassigned = foreign.pushSimpleUnassigned\n\n  var pushTagStart = foreign.pushTagStart\n  var pushTagStart4 = foreign.pushTagStart4\n  var pushTagStart8 = foreign.pushTagStart8\n  var pushTagUnassigned = foreign.pushTagUnassigned\n\n  var pushBreak = foreign.pushBreak\n\n  var pow = stdlib.Math.pow\n\n  // -- Constants\n\n\n  // -- Mutable Variables\n\n  var offset = 0\n  var inputLength = 0\n  var code = 0\n\n  // Decode a cbor string represented as Uint8Array\n  // which is allocated on the heap from 0 to inputLength\n  //\n  // input - Int\n  //\n  // Returns Code - Int,\n  // Success = 0\n  // Error > 0\n  function parse (input) {\n    input = input | 0\n\n    offset = 0\n    inputLength = input\n\n    while ((offset | 0) < (inputLength | 0)) {\n      code = jumpTable[heap[offset] & 255](heap[offset] | 0) | 0\n\n      if ((code | 0) > 0) {\n        break\n      }\n    }\n\n    return code | 0\n  }\n\n  // -- Helper Function\n\n  function checkOffset (n) {\n    n = n | 0\n\n    if ((((offset | 0) + (n | 0)) | 0) < (inputLength | 0)) {\n      return 0\n    }\n\n    return 1\n  }\n\n  function readUInt16 (n) {\n    n = n | 0\n\n    return (\n      (heap[n | 0] << 8) | heap[(n + 1) | 0]\n    ) | 0\n  }\n\n  function readUInt32 (n) {\n    n = n | 0\n\n    return (\n      (heap[n | 0] << 24) | (heap[(n + 1) | 0] << 16) | (heap[(n + 2) | 0] << 8) | heap[(n + 3) | 0]\n    ) | 0\n  }\n\n  // -- Initial Byte Handlers\n\n  function INT_P (octet) {\n    octet = octet | 0\n\n    pushInt(octet | 0)\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function UINT_P_8 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushInt(heap[(offset + 1) | 0] | 0)\n\n    offset = (offset + 2) | 0\n\n    return 0\n  }\n\n  function UINT_P_16 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    pushInt(\n      readUInt16((offset + 1) | 0) | 0\n    )\n\n    offset = (offset + 3) | 0\n\n    return 0\n  }\n\n  function UINT_P_32 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushInt32(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0\n    )\n\n    offset = (offset + 5) | 0\n\n    return 0\n  }\n\n  function UINT_P_64 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushInt64(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0,\n      readUInt16((offset + 5) | 0) | 0,\n      readUInt16((offset + 7) | 0) | 0\n    )\n\n    offset = (offset + 9) | 0\n\n    return 0\n  }\n\n  function INT_N (octet) {\n    octet = octet | 0\n\n    pushInt((-1 - ((octet - 32) | 0)) | 0)\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function UINT_N_8 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushInt(\n      (-1 - (heap[(offset + 1) | 0] | 0)) | 0\n    )\n\n    offset = (offset + 2) | 0\n\n    return 0\n  }\n\n  function UINT_N_16 (octet) {\n    octet = octet | 0\n\n    var val = 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    val = readUInt16((offset + 1) | 0) | 0\n    pushInt((-1 - (val | 0)) | 0)\n\n    offset = (offset + 3) | 0\n\n    return 0\n  }\n\n  function UINT_N_32 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushInt32Neg(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0\n    )\n\n    offset = (offset + 5) | 0\n\n    return 0\n  }\n\n  function UINT_N_64 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushInt64Neg(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0,\n      readUInt16((offset + 5) | 0) | 0,\n      readUInt16((offset + 7) | 0) | 0\n    )\n\n    offset = (offset + 9) | 0\n\n    return 0\n  }\n\n  function BYTE_STRING (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var step = 0\n\n    step = (octet - 64) | 0\n    if (checkOffset(step | 0) | 0) {\n      return 1\n    }\n\n    start = (offset + 1) | 0\n    end = (((offset + 1) | 0) + (step | 0)) | 0\n\n    pushByteString(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function BYTE_STRING_8 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    length = heap[(offset + 1) | 0] | 0\n    start = (offset + 2) | 0\n    end = (((offset + 2) | 0) + (length | 0)) | 0\n\n    if (checkOffset((length + 1) | 0) | 0) {\n      return 1\n    }\n\n    pushByteString(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function BYTE_STRING_16 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    length = readUInt16((offset + 1) | 0) | 0\n    start = (offset + 3) | 0\n    end = (((offset + 3) | 0) + (length | 0)) | 0\n\n\n    if (checkOffset((length + 2) | 0) | 0) {\n      return 1\n    }\n\n    pushByteString(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function BYTE_STRING_32 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    length = readUInt32((offset + 1) | 0) | 0\n    start = (offset + 5) | 0\n    end = (((offset + 5) | 0) + (length | 0)) | 0\n\n\n    if (checkOffset((length + 4) | 0) | 0) {\n      return 1\n    }\n\n    pushByteString(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function BYTE_STRING_64 (octet) {\n    // NOT IMPLEMENTED\n    octet = octet | 0\n\n    return 1\n  }\n\n  function BYTE_STRING_BREAK (octet) {\n    octet = octet | 0\n\n    pushByteStringStart()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function UTF8_STRING (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var step = 0\n\n    step = (octet - 96) | 0\n\n    if (checkOffset(step | 0) | 0) {\n      return 1\n    }\n\n    start = (offset + 1) | 0\n    end = (((offset + 1) | 0) + (step | 0)) | 0\n\n    pushUtf8String(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function UTF8_STRING_8 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    length = heap[(offset + 1) | 0] | 0\n    start = (offset + 2) | 0\n    end = (((offset + 2) | 0) + (length | 0)) | 0\n\n    if (checkOffset((length + 1) | 0) | 0) {\n      return 1\n    }\n\n    pushUtf8String(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function UTF8_STRING_16 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    length = readUInt16((offset + 1) | 0) | 0\n    start = (offset + 3) | 0\n    end = (((offset + 3) | 0) + (length | 0)) | 0\n\n    if (checkOffset((length + 2) | 0) | 0) {\n      return 1\n    }\n\n    pushUtf8String(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function UTF8_STRING_32 (octet) {\n    octet = octet | 0\n\n    var start = 0\n    var end = 0\n    var length = 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    length = readUInt32((offset + 1) | 0) | 0\n    start = (offset + 5) | 0\n    end = (((offset + 5) | 0) + (length | 0)) | 0\n\n    if (checkOffset((length + 4) | 0) | 0) {\n      return 1\n    }\n\n    pushUtf8String(start | 0, end | 0)\n\n    offset = end | 0\n\n    return 0\n  }\n\n  function UTF8_STRING_64 (octet) {\n    // NOT IMPLEMENTED\n    octet = octet | 0\n\n    return 1\n  }\n\n  function UTF8_STRING_BREAK (octet) {\n    octet = octet | 0\n\n    pushUtf8StringStart()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function ARRAY (octet) {\n    octet = octet | 0\n\n    pushArrayStartFixed((octet - 128) | 0)\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function ARRAY_8 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushArrayStartFixed(heap[(offset + 1) | 0] | 0)\n\n    offset = (offset + 2) | 0\n\n    return 0\n  }\n\n  function ARRAY_16 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    pushArrayStartFixed(\n      readUInt16((offset + 1) | 0) | 0\n    )\n\n    offset = (offset + 3) | 0\n\n    return 0\n  }\n\n  function ARRAY_32 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushArrayStartFixed32(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0\n    )\n\n    offset = (offset + 5) | 0\n\n    return 0\n  }\n\n  function ARRAY_64 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushArrayStartFixed64(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0,\n      readUInt16((offset + 5) | 0) | 0,\n      readUInt16((offset + 7) | 0) | 0\n    )\n\n    offset = (offset + 9) | 0\n\n    return 0\n  }\n\n  function ARRAY_BREAK (octet) {\n    octet = octet | 0\n\n    pushArrayStart()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function MAP (octet) {\n    octet = octet | 0\n\n    var step = 0\n\n    step = (octet - 160) | 0\n\n    if (checkOffset(step | 0) | 0) {\n      return 1\n    }\n\n    pushObjectStartFixed(step | 0)\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function MAP_8 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushObjectStartFixed(heap[(offset + 1) | 0] | 0)\n\n    offset = (offset + 2) | 0\n\n    return 0\n  }\n\n  function MAP_16 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    pushObjectStartFixed(\n      readUInt16((offset + 1) | 0) | 0\n    )\n\n    offset = (offset + 3) | 0\n\n    return 0\n  }\n\n  function MAP_32 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushObjectStartFixed32(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0\n    )\n\n    offset = (offset + 5) | 0\n\n    return 0\n  }\n\n  function MAP_64 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushObjectStartFixed64(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0,\n      readUInt16((offset + 5) | 0) | 0,\n      readUInt16((offset + 7) | 0) | 0\n    )\n\n    offset = (offset + 9) | 0\n\n    return 0\n  }\n\n  function MAP_BREAK (octet) {\n    octet = octet | 0\n\n    pushObjectStart()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function TAG_KNOWN (octet) {\n    octet = octet | 0\n\n    pushTagStart((octet - 192| 0) | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BIGNUM_POS (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BIGNUM_NEG (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_FRAC (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BIGNUM_FLOAT (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_UNASSIGNED (octet) {\n    octet = octet | 0\n\n    pushTagStart((octet - 192| 0) | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BASE64_URL (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BASE64 (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_BASE16 (octet) {\n    octet = octet | 0\n\n    pushTagStart(octet | 0)\n\n    offset = (offset + 1 | 0)\n\n    return 0\n  }\n\n  function TAG_MORE_1 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushTagStart(heap[(offset + 1) | 0] | 0)\n\n    offset = (offset + 2 | 0)\n\n    return 0\n  }\n\n  function TAG_MORE_2 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    pushTagStart(\n      readUInt16((offset + 1) | 0) | 0\n    )\n\n    offset = (offset + 3 | 0)\n\n    return 0\n  }\n\n  function TAG_MORE_4 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushTagStart4(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0\n    )\n\n    offset = (offset + 5 | 0)\n\n    return 0\n  }\n\n  function TAG_MORE_8 (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushTagStart8(\n      readUInt16((offset + 1) | 0) | 0,\n      readUInt16((offset + 3) | 0) | 0,\n      readUInt16((offset + 5) | 0) | 0,\n      readUInt16((offset + 7) | 0) | 0\n    )\n\n    offset = (offset + 9 | 0)\n\n    return 0\n  }\n\n  function SIMPLE_UNASSIGNED (octet) {\n    octet = octet | 0\n\n    pushSimpleUnassigned(((octet | 0) - 224) | 0)\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function SIMPLE_FALSE (octet) {\n    octet = octet | 0\n\n    pushFalse()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function SIMPLE_TRUE (octet) {\n    octet = octet | 0\n\n    pushTrue()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function SIMPLE_NULL (octet) {\n    octet = octet | 0\n\n    pushNull()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function SIMPLE_UNDEFINED (octet) {\n    octet = octet | 0\n\n    pushUndefined()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  function SIMPLE_BYTE (octet) {\n    octet = octet | 0\n\n    if (checkOffset(1) | 0) {\n      return 1\n    }\n\n    pushSimpleUnassigned(heap[(offset + 1) | 0] | 0)\n\n    offset = (offset + 2)  | 0\n\n    return 0\n  }\n\n  function SIMPLE_FLOAT_HALF (octet) {\n    octet = octet | 0\n\n    var f = 0\n    var g = 0\n    var sign = 1.0\n    var exp = 0.0\n    var mant = 0.0\n    var r = 0.0\n    if (checkOffset(2) | 0) {\n      return 1\n    }\n\n    f = heap[(offset + 1) | 0] | 0\n    g = heap[(offset + 2) | 0] | 0\n\n    if ((f | 0) & 0x80) {\n      sign = -1.0\n    }\n\n    exp = +(((f | 0) & 0x7C) >> 2)\n    mant = +((((f | 0) & 0x03) << 8) | g)\n\n    if (+exp == 0.0) {\n      pushFloat(+(\n        (+sign) * +5.9604644775390625e-8 * (+mant)\n      ))\n    } else if (+exp == 31.0) {\n      if (+sign == 1.0) {\n        if (+mant > 0.0) {\n          pushNaN()\n        } else {\n          pushInfinity()\n        }\n      } else {\n        if (+mant > 0.0) {\n          pushNaNNeg()\n        } else {\n          pushInfinityNeg()\n        }\n      }\n    } else {\n      pushFloat(+(\n        +sign * pow(+2, +(+exp - 25.0)) * +(1024.0 + mant)\n      ))\n    }\n\n    offset = (offset + 3) | 0\n\n    return 0\n  }\n\n  function SIMPLE_FLOAT_SINGLE (octet) {\n    octet = octet | 0\n\n    if (checkOffset(4) | 0) {\n      return 1\n    }\n\n    pushFloatSingle(\n      heap[(offset + 1) | 0] | 0,\n      heap[(offset + 2) | 0] | 0,\n      heap[(offset + 3) | 0] | 0,\n      heap[(offset + 4) | 0] | 0\n    )\n\n    offset = (offset + 5) | 0\n\n    return 0\n  }\n\n  function SIMPLE_FLOAT_DOUBLE (octet) {\n    octet = octet | 0\n\n    if (checkOffset(8) | 0) {\n      return 1\n    }\n\n    pushFloatDouble(\n      heap[(offset + 1) | 0] | 0,\n      heap[(offset + 2) | 0] | 0,\n      heap[(offset + 3) | 0] | 0,\n      heap[(offset + 4) | 0] | 0,\n      heap[(offset + 5) | 0] | 0,\n      heap[(offset + 6) | 0] | 0,\n      heap[(offset + 7) | 0] | 0,\n      heap[(offset + 8) | 0] | 0\n    )\n\n    offset = (offset + 9) | 0\n\n    return 0\n  }\n\n  function ERROR (octet) {\n    octet = octet | 0\n\n    return 1\n  }\n\n  function BREAK (octet) {\n    octet = octet | 0\n\n    pushBreak()\n\n    offset = (offset + 1) | 0\n\n    return 0\n  }\n\n  // -- Jump Table\n\n  var jumpTable = [\n    // Integer 0x00..0x17 (0..23)\n    INT_P, // 0x00\n    INT_P, // 0x01\n    INT_P, // 0x02\n    INT_P, // 0x03\n    INT_P, // 0x04\n    INT_P, // 0x05\n    INT_P, // 0x06\n    INT_P, // 0x07\n    INT_P, // 0x08\n    INT_P, // 0x09\n    INT_P, // 0x0A\n    INT_P, // 0x0B\n    INT_P, // 0x0C\n    INT_P, // 0x0D\n    INT_P, // 0x0E\n    INT_P, // 0x0F\n    INT_P, // 0x10\n    INT_P, // 0x11\n    INT_P, // 0x12\n    INT_P, // 0x13\n    INT_P, // 0x14\n    INT_P, // 0x15\n    INT_P, // 0x16\n    INT_P, // 0x17\n    // Unsigned integer (one-byte uint8_t follows)\n    UINT_P_8, // 0x18\n    // Unsigned integer (two-byte uint16_t follows)\n    UINT_P_16, // 0x19\n    // Unsigned integer (four-byte uint32_t follows)\n    UINT_P_32, // 0x1a\n    // Unsigned integer (eight-byte uint64_t follows)\n    UINT_P_64, // 0x1b\n    ERROR, // 0x1c\n    ERROR, // 0x1d\n    ERROR, // 0x1e\n    ERROR, // 0x1f\n    // Negative integer -1-0x00..-1-0x17 (-1..-24)\n    INT_N, // 0x20\n    INT_N, // 0x21\n    INT_N, // 0x22\n    INT_N, // 0x23\n    INT_N, // 0x24\n    INT_N, // 0x25\n    INT_N, // 0x26\n    INT_N, // 0x27\n    INT_N, // 0x28\n    INT_N, // 0x29\n    INT_N, // 0x2A\n    INT_N, // 0x2B\n    INT_N, // 0x2C\n    INT_N, // 0x2D\n    INT_N, // 0x2E\n    INT_N, // 0x2F\n    INT_N, // 0x30\n    INT_N, // 0x31\n    INT_N, // 0x32\n    INT_N, // 0x33\n    INT_N, // 0x34\n    INT_N, // 0x35\n    INT_N, // 0x36\n    INT_N, // 0x37\n    // Negative integer -1-n (one-byte uint8_t for n follows)\n    UINT_N_8, // 0x38\n    // Negative integer -1-n (two-byte uint16_t for n follows)\n    UINT_N_16, // 0x39\n    // Negative integer -1-n (four-byte uint32_t for nfollows)\n    UINT_N_32, // 0x3a\n    // Negative integer -1-n (eight-byte uint64_t for n follows)\n    UINT_N_64, // 0x3b\n    ERROR, // 0x3c\n    ERROR, // 0x3d\n    ERROR, // 0x3e\n    ERROR, // 0x3f\n    // byte string (0x00..0x17 bytes follow)\n    BYTE_STRING, // 0x40\n    BYTE_STRING, // 0x41\n    BYTE_STRING, // 0x42\n    BYTE_STRING, // 0x43\n    BYTE_STRING, // 0x44\n    BYTE_STRING, // 0x45\n    BYTE_STRING, // 0x46\n    BYTE_STRING, // 0x47\n    BYTE_STRING, // 0x48\n    BYTE_STRING, // 0x49\n    BYTE_STRING, // 0x4A\n    BYTE_STRING, // 0x4B\n    BYTE_STRING, // 0x4C\n    BYTE_STRING, // 0x4D\n    BYTE_STRING, // 0x4E\n    BYTE_STRING, // 0x4F\n    BYTE_STRING, // 0x50\n    BYTE_STRING, // 0x51\n    BYTE_STRING, // 0x52\n    BYTE_STRING, // 0x53\n    BYTE_STRING, // 0x54\n    BYTE_STRING, // 0x55\n    BYTE_STRING, // 0x56\n    BYTE_STRING, // 0x57\n    // byte string (one-byte uint8_t for n, and then n bytes follow)\n    BYTE_STRING_8, // 0x58\n    // byte string (two-byte uint16_t for n, and then n bytes follow)\n    BYTE_STRING_16, // 0x59\n    // byte string (four-byte uint32_t for n, and then n bytes follow)\n    BYTE_STRING_32, // 0x5a\n    // byte string (eight-byte uint64_t for n, and then n bytes follow)\n    BYTE_STRING_64, // 0x5b\n    ERROR, // 0x5c\n    ERROR, // 0x5d\n    ERROR, // 0x5e\n    // byte string, byte strings follow, terminated by \"break\"\n    BYTE_STRING_BREAK, // 0x5f\n    // UTF-8 string (0x00..0x17 bytes follow)\n    UTF8_STRING, // 0x60\n    UTF8_STRING, // 0x61\n    UTF8_STRING, // 0x62\n    UTF8_STRING, // 0x63\n    UTF8_STRING, // 0x64\n    UTF8_STRING, // 0x65\n    UTF8_STRING, // 0x66\n    UTF8_STRING, // 0x67\n    UTF8_STRING, // 0x68\n    UTF8_STRING, // 0x69\n    UTF8_STRING, // 0x6A\n    UTF8_STRING, // 0x6B\n    UTF8_STRING, // 0x6C\n    UTF8_STRING, // 0x6D\n    UTF8_STRING, // 0x6E\n    UTF8_STRING, // 0x6F\n    UTF8_STRING, // 0x70\n    UTF8_STRING, // 0x71\n    UTF8_STRING, // 0x72\n    UTF8_STRING, // 0x73\n    UTF8_STRING, // 0x74\n    UTF8_STRING, // 0x75\n    UTF8_STRING, // 0x76\n    UTF8_STRING, // 0x77\n    // UTF-8 string (one-byte uint8_t for n, and then n bytes follow)\n    UTF8_STRING_8, // 0x78\n    // UTF-8 string (two-byte uint16_t for n, and then n bytes follow)\n    UTF8_STRING_16, // 0x79\n    // UTF-8 string (four-byte uint32_t for n, and then n bytes follow)\n    UTF8_STRING_32, // 0x7a\n    // UTF-8 string (eight-byte uint64_t for n, and then n bytes follow)\n    UTF8_STRING_64, // 0x7b\n    // UTF-8 string, UTF-8 strings follow, terminated by \"break\"\n    ERROR, // 0x7c\n    ERROR, // 0x7d\n    ERROR, // 0x7e\n    UTF8_STRING_BREAK, // 0x7f\n    // array (0x00..0x17 data items follow)\n    ARRAY, // 0x80\n    ARRAY, // 0x81\n    ARRAY, // 0x82\n    ARRAY, // 0x83\n    ARRAY, // 0x84\n    ARRAY, // 0x85\n    ARRAY, // 0x86\n    ARRAY, // 0x87\n    ARRAY, // 0x88\n    ARRAY, // 0x89\n    ARRAY, // 0x8A\n    ARRAY, // 0x8B\n    ARRAY, // 0x8C\n    ARRAY, // 0x8D\n    ARRAY, // 0x8E\n    ARRAY, // 0x8F\n    ARRAY, // 0x90\n    ARRAY, // 0x91\n    ARRAY, // 0x92\n    ARRAY, // 0x93\n    ARRAY, // 0x94\n    ARRAY, // 0x95\n    ARRAY, // 0x96\n    ARRAY, // 0x97\n    // array (one-byte uint8_t fo, and then n data items follow)\n    ARRAY_8, // 0x98\n    // array (two-byte uint16_t for n, and then n data items follow)\n    ARRAY_16, // 0x99\n    // array (four-byte uint32_t for n, and then n data items follow)\n    ARRAY_32, // 0x9a\n    // array (eight-byte uint64_t for n, and then n data items follow)\n    ARRAY_64, // 0x9b\n    // array, data items follow, terminated by \"break\"\n    ERROR, // 0x9c\n    ERROR, // 0x9d\n    ERROR, // 0x9e\n    ARRAY_BREAK, // 0x9f\n    // map (0x00..0x17 pairs of data items follow)\n    MAP, // 0xa0\n    MAP, // 0xa1\n    MAP, // 0xa2\n    MAP, // 0xa3\n    MAP, // 0xa4\n    MAP, // 0xa5\n    MAP, // 0xa6\n    MAP, // 0xa7\n    MAP, // 0xa8\n    MAP, // 0xa9\n    MAP, // 0xaA\n    MAP, // 0xaB\n    MAP, // 0xaC\n    MAP, // 0xaD\n    MAP, // 0xaE\n    MAP, // 0xaF\n    MAP, // 0xb0\n    MAP, // 0xb1\n    MAP, // 0xb2\n    MAP, // 0xb3\n    MAP, // 0xb4\n    MAP, // 0xb5\n    MAP, // 0xb6\n    MAP, // 0xb7\n    // map (one-byte uint8_t for n, and then n pairs of data items follow)\n    MAP_8, // 0xb8\n    // map (two-byte uint16_t for n, and then n pairs of data items follow)\n    MAP_16, // 0xb9\n    // map (four-byte uint32_t for n, and then n pairs of data items follow)\n    MAP_32, // 0xba\n    // map (eight-byte uint64_t for n, and then n pairs of data items follow)\n    MAP_64, // 0xbb\n    ERROR, // 0xbc\n    ERROR, // 0xbd\n    ERROR, // 0xbe\n    // map, pairs of data items follow, terminated by \"break\"\n    MAP_BREAK, // 0xbf\n    // Text-based date/time (data item follows; see Section 2.4.1)\n    TAG_KNOWN, // 0xc0\n    // Epoch-based date/time (data item follows; see Section 2.4.1)\n    TAG_KNOWN, // 0xc1\n    // Positive bignum (data item \"byte string\" follows)\n    TAG_KNOWN, // 0xc2\n    // Negative bignum (data item \"byte string\" follows)\n    TAG_KNOWN, // 0xc3\n    // Decimal Fraction (data item \"array\" follows; see Section 2.4.3)\n    TAG_KNOWN, // 0xc4\n    // Bigfloat (data item \"array\" follows; see Section 2.4.3)\n    TAG_KNOWN, // 0xc5\n    // (tagged item)\n    TAG_UNASSIGNED, // 0xc6\n    TAG_UNASSIGNED, // 0xc7\n    TAG_UNASSIGNED, // 0xc8\n    TAG_UNASSIGNED, // 0xc9\n    TAG_UNASSIGNED, // 0xca\n    TAG_UNASSIGNED, // 0xcb\n    TAG_UNASSIGNED, // 0xcc\n    TAG_UNASSIGNED, // 0xcd\n    TAG_UNASSIGNED, // 0xce\n    TAG_UNASSIGNED, // 0xcf\n    TAG_UNASSIGNED, // 0xd0\n    TAG_UNASSIGNED, // 0xd1\n    TAG_UNASSIGNED, // 0xd2\n    TAG_UNASSIGNED, // 0xd3\n    TAG_UNASSIGNED, // 0xd4\n    // Expected Conversion (data item follows; see Section 2.4.4.2)\n    TAG_UNASSIGNED, // 0xd5\n    TAG_UNASSIGNED, // 0xd6\n    TAG_UNASSIGNED, // 0xd7\n    // (more tagged items, 1/2/4/8 bytes and then a data item follow)\n    TAG_MORE_1, // 0xd8\n    TAG_MORE_2, // 0xd9\n    TAG_MORE_4, // 0xda\n    TAG_MORE_8, // 0xdb\n    ERROR, // 0xdc\n    ERROR, // 0xdd\n    ERROR, // 0xde\n    ERROR, // 0xdf\n    // (simple value)\n    SIMPLE_UNASSIGNED, // 0xe0\n    SIMPLE_UNASSIGNED, // 0xe1\n    SIMPLE_UNASSIGNED, // 0xe2\n    SIMPLE_UNASSIGNED, // 0xe3\n    SIMPLE_UNASSIGNED, // 0xe4\n    SIMPLE_UNASSIGNED, // 0xe5\n    SIMPLE_UNASSIGNED, // 0xe6\n    SIMPLE_UNASSIGNED, // 0xe7\n    SIMPLE_UNASSIGNED, // 0xe8\n    SIMPLE_UNASSIGNED, // 0xe9\n    SIMPLE_UNASSIGNED, // 0xea\n    SIMPLE_UNASSIGNED, // 0xeb\n    SIMPLE_UNASSIGNED, // 0xec\n    SIMPLE_UNASSIGNED, // 0xed\n    SIMPLE_UNASSIGNED, // 0xee\n    SIMPLE_UNASSIGNED, // 0xef\n    SIMPLE_UNASSIGNED, // 0xf0\n    SIMPLE_UNASSIGNED, // 0xf1\n    SIMPLE_UNASSIGNED, // 0xf2\n    SIMPLE_UNASSIGNED, // 0xf3\n    // False\n    SIMPLE_FALSE, // 0xf4\n    // True\n    SIMPLE_TRUE, // 0xf5\n    // Null\n    SIMPLE_NULL, // 0xf6\n    // Undefined\n    SIMPLE_UNDEFINED, // 0xf7\n    // (simple value, one byte follows)\n    SIMPLE_BYTE, // 0xf8\n    // Half-Precision Float (two-byte IEEE 754)\n    SIMPLE_FLOAT_HALF, // 0xf9\n    // Single-Precision Float (four-byte IEEE 754)\n    SIMPLE_FLOAT_SINGLE, // 0xfa\n    // Double-Precision Float (eight-byte IEEE 754)\n    SIMPLE_FLOAT_DOUBLE, // 0xfb\n    ERROR, // 0xfc\n    ERROR, // 0xfd\n    ERROR, // 0xfe\n    // \"break\" stop code\n    BREAK // 0xff\n  ]\n\n  // --\n\n  return {\n    parse: parse\n  }\n}\n", "'use strict'\n\nconst Bignumber = require('bignumber.js').BigNumber\n\nexports.MT = {\n  POS_INT: 0,\n  NEG_INT: 1,\n  BYTE_STRING: 2,\n  UTF8_STRING: 3,\n  ARRAY: 4,\n  MAP: 5,\n  TAG: 6,\n  SIMPLE_FLOAT: 7\n}\n\nexports.TAG = {\n  DATE_STRING: 0,\n  DATE_EPOCH: 1,\n  POS_BIGINT: 2,\n  NEG_BIGINT: 3,\n  DECIMAL_FRAC: 4,\n  BIGFLOAT: 5,\n  BASE64URL_EXPECTED: 21,\n  BASE64_EXPECTED: 22,\n  BASE16_EXPECTED: 23,\n  CBOR: 24,\n  URI: 32,\n  BASE64URL: 33,\n  BASE64: 34,\n  REGEXP: 35,\n  MIME: 36\n}\n\nexports.NUMBYTES = {\n  ZERO: 0,\n  ONE: 24,\n  TWO: 25,\n  FOUR: 26,\n  EIGHT: 27,\n  INDEFINITE: 31\n}\n\nexports.SIMPLE = {\n  FALSE: 20,\n  TRUE: 21,\n  NULL: 22,\n  UNDEFINED: 23\n}\n\nexports.SYMS = {\n  NULL: Symbol('null'),\n  UNDEFINED: Symbol('undef'),\n  PARENT: Symbol('parent'),\n  BREAK: Symbol('break'),\n  STREAM: Symbol('stream')\n}\n\nexports.SHIFT32 = Math.pow(2, 32)\nexports.SHIFT16 = Math.pow(2, 16)\n\nexports.MAX_SAFE_HIGH = 0x1fffff\nexports.NEG_ONE = new Bignumber(-1)\nexports.TEN = new Bignumber(10)\nexports.TWO = new Bignumber(2)\n\nexports.PARENT = {\n  ARRAY: 0,\n  OBJECT: 1,\n  MAP: 2,\n  TAG: 3,\n  BYTE_STRING: 4,\n  UTF8_STRING: 5\n}\n", "'use strict'\n\nconst { Buffer } = require('buffer')\nconst Bignumber = require('bignumber.js').BigNumber\n\nconst constants = require('./constants')\nconst SHIFT32 = constants.SHIFT32\nconst SHIFT16 = constants.SHIFT16\nconst MAX_SAFE_HIGH = 0x1fffff\n\nexports.parseHalf = function parseHalf (buf) {\n  var exp, mant, sign\n  sign = buf[0] & 0x80 ? -1 : 1\n  exp = (buf[0] & 0x7C) >> 2\n  mant = ((buf[0] & 0x03) << 8) | buf[1]\n  if (!exp) {\n    return sign * 5.9604644775390625e-8 * mant\n  } else if (exp === 0x1f) {\n    return sign * (mant ? 0 / 0 : 2e308)\n  } else {\n    return sign * Math.pow(2, exp - 25) * (1024 + mant)\n  }\n}\n\nfunction toHex (n) {\n  if (n < 16) {\n    return '0' + n.toString(16)\n  }\n\n  return n.toString(16)\n}\n\nexports.arrayBufferToBignumber = function (buf) {\n  const len = buf.byteLength\n  let res = ''\n  for (let i = 0; i < len; i++) {\n    res += toHex(buf[i])\n  }\n\n  return new Bignumber(res, 16)\n}\n\n// convert an Object into a Map\nexports.buildMap = (obj) => {\n  const res = new Map()\n  const keys = Object.keys(obj)\n  const length = keys.length\n  for (let i = 0; i < length; i++) {\n    res.set(keys[i], obj[keys[i]])\n  }\n  return res\n}\n\nexports.buildInt32 = (f, g) => {\n  return f * SHIFT16 + g\n}\n\nexports.buildInt64 = (f1, f2, g1, g2) => {\n  const f = exports.buildInt32(f1, f2)\n  const g = exports.buildInt32(g1, g2)\n\n  if (f > MAX_SAFE_HIGH) {\n    return new Bignumber(f).times(SHIFT32).plus(g)\n  } else {\n    return (f * SHIFT32) + g\n  }\n}\n\nexports.writeHalf = function writeHalf (buf, half) {\n  // assume 0, -0, NaN, Infinity, and -Infinity have already been caught\n\n  // HACK: everyone settle in.  This isn't going to be pretty.\n  // Translate cn-cbor's C code (from Carsten Borman):\n\n  // uint32_t be32;\n  // uint16_t be16, u16;\n  // union {\n  //   float f;\n  //   uint32_t u;\n  // } u32;\n  // u32.f = float_val;\n\n  const u32 = Buffer.allocUnsafe(4)\n  u32.writeFloatBE(half, 0)\n  const u = u32.readUInt32BE(0)\n\n  // if ((u32.u & 0x1FFF) == 0) { /* worth trying half */\n\n  // hildjj: If the lower 13 bits are 0, we won't lose anything in the conversion\n  if ((u & 0x1FFF) !== 0) {\n    return false\n  }\n\n  //   int s16 = (u32.u >> 16) & 0x8000;\n  //   int exp = (u32.u >> 23) & 0xff;\n  //   int mant = u32.u & 0x7fffff;\n\n  var s16 = (u >> 16) & 0x8000 // top bit is sign\n  const exp = (u >> 23) & 0xff // then 5 bits of exponent\n  const mant = u & 0x7fffff\n\n  //   if (exp == 0 && mant == 0)\n  //     ;              /* 0.0, -0.0 */\n\n  // hildjj: zeros already handled.  Assert if you don't believe me.\n\n  //   else if (exp >= 113 && exp <= 142) /* normalized */\n  //     s16 += ((exp - 112) << 10) + (mant >> 13);\n  if ((exp >= 113) && (exp <= 142)) {\n    s16 += ((exp - 112) << 10) + (mant >> 13)\n\n  //   else if (exp >= 103 && exp < 113) { /* denorm, exp16 = 0 */\n  //     if (mant & ((1 << (126 - exp)) - 1))\n  //       goto float32;         /* loss of precision */\n  //     s16 += ((mant + 0x800000) >> (126 - exp));\n  } else if ((exp >= 103) && (exp < 113)) {\n    if (mant & ((1 << (126 - exp)) - 1)) {\n      return false\n    }\n    s16 += ((mant + 0x800000) >> (126 - exp))\n\n    //   } else if (exp == 255 && mant == 0) { /* Inf */\n    //     s16 += 0x7c00;\n\n    // hildjj: Infinity already handled\n\n  //   } else\n  //     goto float32;           /* loss of range */\n  } else {\n    return false\n  }\n\n  //   ensure_writable(3);\n  //   u16 = s16;\n  //   be16 = hton16p((const uint8_t*)&u16);\n  buf.writeUInt16BE(s16, 0)\n  return true\n}\n\nexports.keySorter = function (a, b) {\n  var lenA = a[0].byteLength\n  var lenB = b[0].byteLength\n\n  if (lenA > lenB) {\n    return 1\n  }\n\n  if (lenB > lenA) {\n    return -1\n  }\n\n  return a[0].compare(b[0])\n}\n\n// Adapted from http://www.2ality.com/2012/03/signedzero.html\nexports.isNegativeZero = (x) => {\n  return x === 0 && (1 / x < 0)\n}\n\nexports.nextPowerOf2 = (n) => {\n  let count = 0\n  // First n in the below condition is for\n  // the case where n is 0\n  if (n && !(n & (n - 1))) {\n    return n\n  }\n\n  while (n !== 0) {\n    n >>= 1\n    count += 1\n  }\n\n  return 1 << count\n}\n", "'use strict'\n\nconst constants = require('./constants')\nconst MT = constants.MT\nconst SIMPLE = constants.SIMPLE\nconst SYMS = constants.SYMS\n\n/**\n * A CBOR Simple Value that does not map onto a known constant.\n */\nclass Simple {\n  /**\n   * Creates an instance of Simple.\n   *\n   * @param {integer} value - the simple value's integer value\n   */\n  constructor (value) {\n    if (typeof value !== 'number') {\n      throw new Error('Invalid Simple type: ' + (typeof value))\n    }\n    if ((value < 0) || (value > 255) || ((value | 0) !== value)) {\n      throw new Error('value must be a small positive integer: ' + value)\n    }\n    this.value = value\n  }\n\n  /**\n   * Debug string for simple value\n   *\n   * @returns {string} simple(value)\n   */\n  toString () {\n    return 'simple(' + this.value + ')'\n  }\n\n  /**\n   * Debug string for simple value\n   *\n   * @returns {string} simple(value)\n   */\n  inspect () {\n    return 'simple(' + this.value + ')'\n  }\n\n  /**\n   * Push the simple value onto the CBOR stream\n   *\n   * @param {cbor.Encoder} gen The generator to push onto\n   * @returns {number}\n   */\n  encodeCBOR (gen) {\n    return gen._pushInt(this.value, MT.SIMPLE_FLOAT)\n  }\n\n  /**\n   * Is the given object a Simple?\n   *\n   * @param {any} obj - object to test\n   * @returns {bool} - is it Simple?\n   */\n  static isSimple (obj) {\n    return obj instanceof Simple\n  }\n\n  /**\n   * Decode from the CBOR additional information into a JavaScript value.\n   * If the CBOR item has no parent, return a \"safe\" symbol instead of\n   * `null` or `undefined`, so that the value can be passed through a\n   * stream in object mode.\n   *\n   * @param {Number} val - the CBOR additional info to convert\n   * @param {bool} hasParent - Does the CBOR item have a parent?\n   * @returns {(null|undefined|Boolean|Symbol)} - the decoded value\n   */\n  static decode (val, hasParent) {\n    if (hasParent == null) {\n      hasParent = true\n    }\n    switch (val) {\n      case SIMPLE.FALSE:\n        return false\n      case SIMPLE.TRUE:\n        return true\n      case SIMPLE.NULL:\n        if (hasParent) {\n          return null\n        } else {\n          return SYMS.NULL\n        }\n      case SIMPLE.UNDEFINED:\n        if (hasParent) {\n          return undefined\n        } else {\n          return SYMS.UNDEFINED\n        }\n      case -1:\n        if (!hasParent) {\n          throw new Error('Invalid BREAK')\n        }\n        return SYMS.BREAK\n      default:\n        return new Simple(val)\n    }\n  }\n}\n\nmodule.exports = Simple\n", "'use strict'\n\n/**\n * A CBOR tagged item, where the tag does not have semantics specified at the\n * moment, or those semantics threw an error during parsing. Typically this will\n * be an extension point you're not yet expecting.\n */\nclass Tagged {\n  /**\n   * Creates an instance of Tagged.\n   *\n   * @param {Number} tag - the number of the tag\n   * @param {any} value - the value inside the tag\n   * @param {Error} err - the error that was thrown parsing the tag, or null\n   */\n  constructor (tag, value, err) {\n    this.tag = tag\n    this.value = value\n    this.err = err\n    if (typeof this.tag !== 'number') {\n      throw new Error('Invalid tag type (' + (typeof this.tag) + ')')\n    }\n    if ((this.tag < 0) || ((this.tag | 0) !== this.tag)) {\n      throw new Error('Tag must be a positive integer: ' + this.tag)\n    }\n  }\n\n  /**\n   * Convert to a String\n   *\n   * @returns {String} string of the form '1(2)'\n   */\n  toString () {\n    return `${this.tag}(${JSON.stringify(this.value)})`\n  }\n\n  /**\n   * Push the simple value onto the CBOR stream\n   *\n   * @param {cbor.Encoder} gen The generator to push onto\n   * @returns {number}\n   */\n  encodeCBOR (gen) {\n    gen._pushTag(this.tag)\n    return gen.pushAny(this.value)\n  }\n\n  /**\n   * If we have a converter for this type, do the conversion.  Some converters\n   * are built-in.  Additional ones can be passed in.  If you want to remove\n   * a built-in converter, pass a converter in whose value is 'null' instead\n   * of a function.\n   *\n   * @param {Object} converters - keys in the object are a tag number, the value\n   *   is a function that takes the decoded CBOR and returns a JavaScript value\n   *   of the appropriate type.  Throw an exception in the function on errors.\n   * @returns {any} - the converted item\n   */\n  convert (converters) {\n    var er, f\n    f = converters != null ? converters[this.tag] : undefined\n    if (typeof f !== 'function') {\n      f = Tagged['_tag' + this.tag]\n      if (typeof f !== 'function') {\n        return this\n      }\n    }\n    try {\n      return f.call(Tagged, this.value)\n    } catch (error) {\n      er = error\n      this.err = er\n      return this\n    }\n  }\n}\n\nmodule.exports = Tagged\n", "'use strict';\n\nconst defaultBase = self.location ?\n    self.location.protocol + '//' + self.location.host :\n    '';\nconst URL = self.URL;\n\nclass URLWithLegacySupport {\n    constructor(url = '', base = defaultBase) {\n        this.super = new URL(url, base);\n        this.path = this.pathname + this.search;\n        this.auth =\n            this.username && this.password ?\n                this.username + ':' + this.password :\n                null;\n\n        this.query =\n            this.search && this.search.startsWith('?') ?\n                this.search.slice(1) :\n                null;\n    }\n\n    get hash() {\n        return this.super.hash;\n    }\n    get host() {\n        return this.super.host;\n    }\n    get hostname() {\n        return this.super.hostname;\n    }\n    get href() {\n        return this.super.href;\n    }\n    get origin() {\n        return this.super.origin;\n    }\n    get password() {\n        return this.super.password;\n    }\n    get pathname() {\n        return this.super.pathname;\n    }\n    get port() {\n        return this.super.port;\n    }\n    get protocol() {\n        return this.super.protocol;\n    }\n    get search() {\n        return this.super.search;\n    }\n    get searchParams() {\n        return this.super.searchParams;\n    }\n    get username() {\n        return this.super.username;\n    }\n\n    set hash(hash) {\n        this.super.hash = hash;\n    }\n    set host(host) {\n        this.super.host = host;\n    }\n    set hostname(hostname) {\n        this.super.hostname = hostname;\n    }\n    set href(href) {\n        this.super.href = href;\n    }\n    set origin(origin) {\n        this.super.origin = origin;\n    }\n    set password(password) {\n        this.super.password = password;\n    }\n    set pathname(pathname) {\n        this.super.pathname = pathname;\n    }\n    set port(port) {\n        this.super.port = port;\n    }\n    set protocol(protocol) {\n        this.super.protocol = protocol;\n    }\n    set search(search) {\n        this.super.search = search;\n    }\n    set searchParams(searchParams) {\n        this.super.searchParams = searchParams;\n    }\n    set username(username) {\n        this.super.username = username;\n    }\n\n    createObjectURL(o) {\n        return this.super.createObjectURL(o);\n    }\n    revokeObjectURL(o) {\n        this.super.revokeObjectURL(o);\n    }\n    toJSON() {\n        return this.super.toJSON();\n    }\n    toString() {\n        return this.super.toString();\n    }\n    format() {\n        return this.toString();\n    }\n}\n\nfunction format(obj) {\n    if (typeof obj === 'string') {\n        const url = new URL(obj);\n\n        return url.toString();\n    }\n\n    if (!(obj instanceof URL)) {\n        const userPass =\n            obj.username && obj.password ?\n                `${obj.username}:${obj.password}@` :\n                '';\n        const auth = obj.auth ? obj.auth + '@' : '';\n        const port = obj.port ? ':' + obj.port : '';\n        const protocol = obj.protocol ? obj.protocol + '//' : '';\n        const host = obj.host || '';\n        const hostname = obj.hostname || '';\n        const search = obj.search || (obj.query ? '?' + obj.query : '');\n        const hash = obj.hash || '';\n        const pathname = obj.pathname || '';\n        const path = obj.path || pathname + search;\n\n        return `${protocol}${userPass || auth}${host ||\n            hostname + port}${path}${hash}`;\n    }\n}\n\nmodule.exports = {\n    URLWithLegacySupport,\n    URLSearchParams: self.URLSearchParams,\n    defaultBase,\n    format\n};\n", "'use strict';\n\nconst { URLWithLegacySupport, format } = require('./url');\n\nmodule.exports = (url, location = {}, protocolMap = {}, defaultProtocol) => {\n    let protocol = location.protocol ?\n        location.protocol.replace(':', '') :\n        'http';\n\n    // Check protocol map\n    protocol = (protocolMap[protocol] || defaultProtocol || protocol) + ':';\n    let urlParsed;\n\n    try {\n        urlParsed = new URLWithLegacySupport(url);\n    } catch (err) {\n        urlParsed = {};\n    }\n\n    const base = Object.assign({}, location, {\n        protocol: protocol || urlParsed.protocol,\n        host: location.host || urlParsed.host\n    });\n\n    return new URLWithLegacySupport(url, format(base)).toString();\n};\n", "'use strict';\n\nconst {\n    URLWithLegacySupport,\n    format,\n    URLSearchParams,\n    defaultBase\n} = require('./src/url');\nconst relative = require('./src/relative');\n\nmodule.exports = {\n    URL: URLWithLegacySupport,\n    URLSearchParams,\n    format,\n    relative,\n    defaultBase\n};\n", "'use strict'\n\nconst { Buffer } = require('buffer')\nconst ieee754 = require('ieee754')\nconst Bignumber = require('bignumber.js').BigNumber\n\nconst parser = require('./decoder.asm')\nconst utils = require('./utils')\nconst c = require('./constants')\nconst Simple = require('./simple')\nconst Tagged = require('./tagged')\nconst { URL } = require('iso-url')\n\n/**\n * Transform binary cbor data into JavaScript objects.\n */\nclass Decoder {\n  /**\n   * @param {Object} [opts={}]\n   * @param {number} [opts.size=65536] - Size of the allocated heap.\n   */\n  constructor (opts) {\n    opts = opts || {}\n\n    if (!opts.size || opts.size < 0x10000) {\n      opts.size = 0x10000\n    } else {\n      // Ensure the size is a power of 2\n      opts.size = utils.nextPowerOf2(opts.size)\n    }\n\n    // Heap use to share the input with the parser\n    this._heap = new ArrayBuffer(opts.size)\n    this._heap8 = new Uint8Array(this._heap)\n    this._buffer = Buffer.from(this._heap)\n\n    this._reset()\n\n    // Known tags\n    this._knownTags = Object.assign({\n      0: (val) => new Date(val),\n      1: (val) => new Date(val * 1000),\n      2: (val) => utils.arrayBufferToBignumber(val),\n      3: (val) => c.NEG_ONE.minus(utils.arrayBufferToBignumber(val)),\n      4: (v) => {\n        // const v = new Uint8Array(val)\n        return c.TEN.pow(v[0]).times(v[1])\n      },\n      5: (v) => {\n        // const v = new Uint8Array(val)\n        return c.TWO.pow(v[0]).times(v[1])\n      },\n      32: (val) => new URL(val),\n      35: (val) => new RegExp(val)\n    }, opts.tags)\n\n    // Initialize asm based parser\n    this.parser = parser(global, {\n      // eslint-disable-next-line no-console\n      log: console.log.bind(console),\n      pushInt: this.pushInt.bind(this),\n      pushInt32: this.pushInt32.bind(this),\n      pushInt32Neg: this.pushInt32Neg.bind(this),\n      pushInt64: this.pushInt64.bind(this),\n      pushInt64Neg: this.pushInt64Neg.bind(this),\n      pushFloat: this.pushFloat.bind(this),\n      pushFloatSingle: this.pushFloatSingle.bind(this),\n      pushFloatDouble: this.pushFloatDouble.bind(this),\n      pushTrue: this.pushTrue.bind(this),\n      pushFalse: this.pushFalse.bind(this),\n      pushUndefined: this.pushUndefined.bind(this),\n      pushNull: this.pushNull.bind(this),\n      pushInfinity: this.pushInfinity.bind(this),\n      pushInfinityNeg: this.pushInfinityNeg.bind(this),\n      pushNaN: this.pushNaN.bind(this),\n      pushNaNNeg: this.pushNaNNeg.bind(this),\n      pushArrayStart: this.pushArrayStart.bind(this),\n      pushArrayStartFixed: this.pushArrayStartFixed.bind(this),\n      pushArrayStartFixed32: this.pushArrayStartFixed32.bind(this),\n      pushArrayStartFixed64: this.pushArrayStartFixed64.bind(this),\n      pushObjectStart: this.pushObjectStart.bind(this),\n      pushObjectStartFixed: this.pushObjectStartFixed.bind(this),\n      pushObjectStartFixed32: this.pushObjectStartFixed32.bind(this),\n      pushObjectStartFixed64: this.pushObjectStartFixed64.bind(this),\n      pushByteString: this.pushByteString.bind(this),\n      pushByteStringStart: this.pushByteStringStart.bind(this),\n      pushUtf8String: this.pushUtf8String.bind(this),\n      pushUtf8StringStart: this.pushUtf8StringStart.bind(this),\n      pushSimpleUnassigned: this.pushSimpleUnassigned.bind(this),\n      pushTagUnassigned: this.pushTagUnassigned.bind(this),\n      pushTagStart: this.pushTagStart.bind(this),\n      pushTagStart4: this.pushTagStart4.bind(this),\n      pushTagStart8: this.pushTagStart8.bind(this),\n      pushBreak: this.pushBreak.bind(this)\n    }, this._heap)\n  }\n\n  get _depth () {\n    return this._parents.length\n  }\n\n  get _currentParent () {\n    return this._parents[this._depth - 1]\n  }\n\n  get _ref () {\n    return this._currentParent.ref\n  }\n\n  // Finish the current parent\n  _closeParent () {\n    var p = this._parents.pop()\n\n    if (p.length > 0) {\n      throw new Error(`Missing ${p.length} elements`)\n    }\n\n    switch (p.type) {\n      case c.PARENT.TAG:\n        this._push(\n          this.createTag(p.ref[0], p.ref[1])\n        )\n        break\n      case c.PARENT.BYTE_STRING:\n        this._push(this.createByteString(p.ref, p.length))\n        break\n      case c.PARENT.UTF8_STRING:\n        this._push(this.createUtf8String(p.ref, p.length))\n        break\n      case c.PARENT.MAP:\n        if (p.values % 2 > 0) {\n          throw new Error('Odd number of elements in the map')\n        }\n        this._push(this.createMap(p.ref, p.length))\n        break\n      case c.PARENT.OBJECT:\n        if (p.values % 2 > 0) {\n          throw new Error('Odd number of elements in the map')\n        }\n        this._push(this.createObject(p.ref, p.length))\n        break\n      case c.PARENT.ARRAY:\n        this._push(this.createArray(p.ref, p.length))\n        break\n      default:\n        break\n    }\n\n    if (this._currentParent && this._currentParent.type === c.PARENT.TAG) {\n      this._dec()\n    }\n  }\n\n  // Reduce the expected length of the current parent by one\n  _dec () {\n    const p = this._currentParent\n    // The current parent does not know the epxected child length\n\n    if (p.length < 0) {\n      return\n    }\n\n    p.length--\n\n    // All children were seen, we can close the current parent\n    if (p.length === 0) {\n      this._closeParent()\n    }\n  }\n\n  // Push any value to the current parent\n  _push (val, hasChildren) {\n    const p = this._currentParent\n    p.values++\n\n    switch (p.type) {\n      case c.PARENT.ARRAY:\n      case c.PARENT.BYTE_STRING:\n      case c.PARENT.UTF8_STRING:\n        if (p.length > -1) {\n          this._ref[this._ref.length - p.length] = val\n        } else {\n          this._ref.push(val)\n        }\n        this._dec()\n        break\n      case c.PARENT.OBJECT:\n        if (p.tmpKey != null) {\n          this._ref[p.tmpKey] = val\n          p.tmpKey = null\n          this._dec()\n        } else {\n          p.tmpKey = val\n\n          if (typeof p.tmpKey !== 'string') {\n            // too bad, convert to a Map\n            p.type = c.PARENT.MAP\n            p.ref = utils.buildMap(p.ref)\n          }\n        }\n        break\n      case c.PARENT.MAP:\n        if (p.tmpKey != null) {\n          this._ref.set(p.tmpKey, val)\n          p.tmpKey = null\n          this._dec()\n        } else {\n          p.tmpKey = val\n        }\n        break\n      case c.PARENT.TAG:\n        this._ref.push(val)\n        if (!hasChildren) {\n          this._dec()\n        }\n        break\n      default:\n        throw new Error('Unknown parent type')\n    }\n  }\n\n  // Create a new parent in the parents list\n  _createParent (obj, type, len) {\n    this._parents[this._depth] = {\n      type: type,\n      length: len,\n      ref: obj,\n      values: 0,\n      tmpKey: null\n    }\n  }\n\n  // Reset all state back to the beginning, also used for initiatlization\n  _reset () {\n    this._res = []\n    this._parents = [{\n      type: c.PARENT.ARRAY,\n      length: -1,\n      ref: this._res,\n      values: 0,\n      tmpKey: null\n    }]\n  }\n\n  // -- Interface to customize deoding behaviour\n  createTag (tagNumber, value) {\n    const typ = this._knownTags[tagNumber]\n\n    if (!typ) {\n      return new Tagged(tagNumber, value)\n    }\n\n    return typ(value)\n  }\n\n  createMap (obj, len) {\n    return obj\n  }\n\n  createObject (obj, len) {\n    return obj\n  }\n\n  createArray (arr, len) {\n    return arr\n  }\n\n  createByteString (raw, len) {\n    return Buffer.concat(raw)\n  }\n\n  createByteStringFromHeap (start, end) {\n    if (start === end) {\n      return Buffer.alloc(0)\n    }\n\n    return Buffer.from(this._heap.slice(start, end))\n  }\n\n  createInt (val) {\n    return val\n  }\n\n  createInt32 (f, g) {\n    return utils.buildInt32(f, g)\n  }\n\n  createInt64 (f1, f2, g1, g2) {\n    return utils.buildInt64(f1, f2, g1, g2)\n  }\n\n  createFloat (val) {\n    return val\n  }\n\n  createFloatSingle (a, b, c, d) {\n    return ieee754.read([a, b, c, d], 0, false, 23, 4)\n  }\n\n  createFloatDouble (a, b, c, d, e, f, g, h) {\n    return ieee754.read([a, b, c, d, e, f, g, h], 0, false, 52, 8)\n  }\n\n  createInt32Neg (f, g) {\n    return -1 - utils.buildInt32(f, g)\n  }\n\n  createInt64Neg (f1, f2, g1, g2) {\n    const f = utils.buildInt32(f1, f2)\n    const g = utils.buildInt32(g1, g2)\n\n    if (f > c.MAX_SAFE_HIGH) {\n      return c.NEG_ONE.minus(new Bignumber(f).times(c.SHIFT32).plus(g))\n    }\n\n    return -1 - ((f * c.SHIFT32) + g)\n  }\n\n  createTrue () {\n    return true\n  }\n\n  createFalse () {\n    return false\n  }\n\n  createNull () {\n    return null\n  }\n\n  createUndefined () {\n    return undefined\n  }\n\n  createInfinity () {\n    return Infinity\n  }\n\n  createInfinityNeg () {\n    return -Infinity\n  }\n\n  createNaN () {\n    return NaN\n  }\n\n  createNaNNeg () {\n    return -NaN\n  }\n\n  createUtf8String (raw, len) {\n    return raw.join('')\n  }\n\n  createUtf8StringFromHeap (start, end) {\n    if (start === end) {\n      return ''\n    }\n\n    return this._buffer.toString('utf8', start, end)\n  }\n\n  createSimpleUnassigned (val) {\n    return new Simple(val)\n  }\n\n  // -- Interface for decoder.asm.js\n\n  pushInt (val) {\n    this._push(this.createInt(val))\n  }\n\n  pushInt32 (f, g) {\n    this._push(this.createInt32(f, g))\n  }\n\n  pushInt64 (f1, f2, g1, g2) {\n    this._push(this.createInt64(f1, f2, g1, g2))\n  }\n\n  pushFloat (val) {\n    this._push(this.createFloat(val))\n  }\n\n  pushFloatSingle (a, b, c, d) {\n    this._push(this.createFloatSingle(a, b, c, d))\n  }\n\n  pushFloatDouble (a, b, c, d, e, f, g, h) {\n    this._push(this.createFloatDouble(a, b, c, d, e, f, g, h))\n  }\n\n  pushInt32Neg (f, g) {\n    this._push(this.createInt32Neg(f, g))\n  }\n\n  pushInt64Neg (f1, f2, g1, g2) {\n    this._push(this.createInt64Neg(f1, f2, g1, g2))\n  }\n\n  pushTrue () {\n    this._push(this.createTrue())\n  }\n\n  pushFalse () {\n    this._push(this.createFalse())\n  }\n\n  pushNull () {\n    this._push(this.createNull())\n  }\n\n  pushUndefined () {\n    this._push(this.createUndefined())\n  }\n\n  pushInfinity () {\n    this._push(this.createInfinity())\n  }\n\n  pushInfinityNeg () {\n    this._push(this.createInfinityNeg())\n  }\n\n  pushNaN () {\n    this._push(this.createNaN())\n  }\n\n  pushNaNNeg () {\n    this._push(this.createNaNNeg())\n  }\n\n  pushArrayStart () {\n    this._createParent([], c.PARENT.ARRAY, -1)\n  }\n\n  pushArrayStartFixed (len) {\n    this._createArrayStartFixed(len)\n  }\n\n  pushArrayStartFixed32 (len1, len2) {\n    const len = utils.buildInt32(len1, len2)\n    this._createArrayStartFixed(len)\n  }\n\n  pushArrayStartFixed64 (len1, len2, len3, len4) {\n    const len = utils.buildInt64(len1, len2, len3, len4)\n    this._createArrayStartFixed(len)\n  }\n\n  pushObjectStart () {\n    this._createObjectStartFixed(-1)\n  }\n\n  pushObjectStartFixed (len) {\n    this._createObjectStartFixed(len)\n  }\n\n  pushObjectStartFixed32 (len1, len2) {\n    const len = utils.buildInt32(len1, len2)\n    this._createObjectStartFixed(len)\n  }\n\n  pushObjectStartFixed64 (len1, len2, len3, len4) {\n    const len = utils.buildInt64(len1, len2, len3, len4)\n    this._createObjectStartFixed(len)\n  }\n\n  pushByteStringStart () {\n    this._parents[this._depth] = {\n      type: c.PARENT.BYTE_STRING,\n      length: -1,\n      ref: [],\n      values: 0,\n      tmpKey: null\n    }\n  }\n\n  pushByteString (start, end) {\n    this._push(this.createByteStringFromHeap(start, end))\n  }\n\n  pushUtf8StringStart () {\n    this._parents[this._depth] = {\n      type: c.PARENT.UTF8_STRING,\n      length: -1,\n      ref: [],\n      values: 0,\n      tmpKey: null\n    }\n  }\n\n  pushUtf8String (start, end) {\n    this._push(this.createUtf8StringFromHeap(start, end))\n  }\n\n  pushSimpleUnassigned (val) {\n    this._push(this.createSimpleUnassigned(val))\n  }\n\n  pushTagStart (tag) {\n    this._parents[this._depth] = {\n      type: c.PARENT.TAG,\n      length: 1,\n      ref: [tag]\n    }\n  }\n\n  pushTagStart4 (f, g) {\n    this.pushTagStart(utils.buildInt32(f, g))\n  }\n\n  pushTagStart8 (f1, f2, g1, g2) {\n    this.pushTagStart(utils.buildInt64(f1, f2, g1, g2))\n  }\n\n  pushTagUnassigned (tagNumber) {\n    this._push(this.createTag(tagNumber))\n  }\n\n  pushBreak () {\n    if (this._currentParent.length > -1) {\n      throw new Error('Unexpected break')\n    }\n\n    this._closeParent()\n  }\n\n  _createObjectStartFixed (len) {\n    if (len === 0) {\n      this._push(this.createObject({}))\n      return\n    }\n\n    this._createParent({}, c.PARENT.OBJECT, len)\n  }\n\n  _createArrayStartFixed (len) {\n    if (len === 0) {\n      this._push(this.createArray([]))\n      return\n    }\n\n    this._createParent(new Array(len), c.PARENT.ARRAY, len)\n  }\n\n  _decode (input) {\n    if (input.byteLength === 0) {\n      throw new Error('Input too short')\n    }\n\n    this._reset()\n    this._heap8.set(input)\n    const code = this.parser.parse(input.byteLength)\n\n    if (this._depth > 1) {\n      while (this._currentParent.length === 0) {\n        this._closeParent()\n      }\n      if (this._depth > 1) {\n        throw new Error('Undeterminated nesting')\n      }\n    }\n\n    if (code > 0) {\n      throw new Error('Failed to parse')\n    }\n\n    if (this._res.length === 0) {\n      throw new Error('No valid result')\n    }\n  }\n\n  // -- Public Interface\n\n  decodeFirst (input) {\n    this._decode(input)\n\n    return this._res[0]\n  }\n\n  decodeAll (input) {\n    this._decode(input)\n\n    return this._res\n  }\n\n  /**\n   * Decode the first cbor object.\n   *\n   * @param {Buffer|string} input\n   * @param {string} [enc='hex'] - Encoding used if a string is passed.\n   * @returns {*}\n   */\n  static decode (input, enc) {\n    if (typeof input === 'string') {\n      input = Buffer.from(input, enc || 'hex')\n    }\n\n    const dec = new Decoder({ size: input.length })\n    return dec.decodeFirst(input)\n  }\n\n  /**\n   * Decode all cbor objects.\n   *\n   * @param {Buffer|string} input\n   * @param {string} [enc='hex'] - Encoding used if a string is passed.\n   * @returns {Array<*>}\n   */\n  static decodeAll (input, enc) {\n    if (typeof input === 'string') {\n      input = Buffer.from(input, enc || 'hex')\n    }\n\n    const dec = new Decoder({ size: input.length })\n    return dec.decodeAll(input)\n  }\n}\n\nDecoder.decodeFirst = Decoder.decode\n\nmodule.exports = Decoder\n", "'use strict'\n\nconst { Buffer } = require('buffer')\nconst Decoder = require('./decoder')\nconst utils = require('./utils')\n\n/**\n * Output the diagnostic format from a stream of CBOR bytes.\n *\n */\nclass Diagnose extends Decoder {\n  createTag (tagNumber, value) {\n    return `${tagNumber}(${value})`\n  }\n\n  createInt (val) {\n    return super.createInt(val).toString()\n  }\n\n  createInt32 (f, g) {\n    return super.createInt32(f, g).toString()\n  }\n\n  createInt64 (f1, f2, g1, g2) {\n    return super.createInt64(f1, f2, g1, g2).toString()\n  }\n\n  createInt32Neg (f, g) {\n    return super.createInt32Neg(f, g).toString()\n  }\n\n  createInt64Neg (f1, f2, g1, g2) {\n    return super.createInt64Neg(f1, f2, g1, g2).toString()\n  }\n\n  createTrue () {\n    return 'true'\n  }\n\n  createFalse () {\n    return 'false'\n  }\n\n  createFloat (val) {\n    const fl = super.createFloat(val)\n    if (utils.isNegativeZero(val)) {\n      return '-0_1'\n    }\n\n    return `${fl}_1`\n  }\n\n  createFloatSingle (a, b, c, d) {\n    const fl = super.createFloatSingle(a, b, c, d)\n    return `${fl}_2`\n  }\n\n  createFloatDouble (a, b, c, d, e, f, g, h) {\n    const fl = super.createFloatDouble(a, b, c, d, e, f, g, h)\n    return `${fl}_3`\n  }\n\n  createByteString (raw, len) {\n    const val = raw.join(', ')\n\n    if (len === -1) {\n      return `(_ ${val})`\n    }\n    return `h'${val}`\n  }\n\n  createByteStringFromHeap (start, end) {\n    const val = (Buffer.from(\n      super.createByteStringFromHeap(start, end)\n    )).toString('hex')\n\n    return `h'${val}'`\n  }\n\n  createInfinity () {\n    return 'Infinity_1'\n  }\n\n  createInfinityNeg () {\n    return '-Infinity_1'\n  }\n\n  createNaN () {\n    return 'NaN_1'\n  }\n\n  createNaNNeg () {\n    return '-NaN_1'\n  }\n\n  createNull () {\n    return 'null'\n  }\n\n  createUndefined () {\n    return 'undefined'\n  }\n\n  createSimpleUnassigned (val) {\n    return `simple(${val})`\n  }\n\n  createArray (arr, len) {\n    const val = super.createArray(arr, len)\n\n    if (len === -1) {\n      // indefinite\n      return `[_ ${val.join(', ')}]`\n    }\n\n    return `[${val.join(', ')}]`\n  }\n\n  createMap (map, len) {\n    const val = super.createMap(map)\n    const list = Array.from(val.keys())\n      .reduce(collectObject(val), '')\n\n    if (len === -1) {\n      return `{_ ${list}}`\n    }\n\n    return `{${list}}`\n  }\n\n  createObject (obj, len) {\n    const val = super.createObject(obj)\n    const map = Object.keys(val)\n      .reduce(collectObject(val), '')\n\n    if (len === -1) {\n      return `{_ ${map}}`\n    }\n\n    return `{${map}}`\n  }\n\n  createUtf8String (raw, len) {\n    const val = raw.join(', ')\n\n    if (len === -1) {\n      return `(_ ${val})`\n    }\n\n    return `\"${val}\"`\n  }\n\n  createUtf8StringFromHeap (start, end) {\n    const val = (Buffer.from(\n      super.createUtf8StringFromHeap(start, end)\n    )).toString('utf8')\n\n    return `\"${val}\"`\n  }\n\n  static diagnose (input, enc) {\n    if (typeof input === 'string') {\n      input = Buffer.from(input, enc || 'hex')\n    }\n\n    const dec = new Diagnose()\n    return dec.decodeFirst(input)\n  }\n}\n\nmodule.exports = Diagnose\n\nfunction collectObject (val) {\n  return (acc, key) => {\n    if (acc) {\n      return `${acc}, ${key}: ${val[key]}`\n    }\n    return `${key}: ${val[key]}`\n  }\n}\n", "'use strict'\n\nconst { Buffer } = require('buffer')\nconst { URL } = require('iso-url')\nconst Bignumber = require('bignumber.js').BigNumber\n\nconst utils = require('./utils')\nconst constants = require('./constants')\nconst MT = constants.MT\nconst NUMBYTES = constants.NUMBYTES\nconst SHIFT32 = constants.SHIFT32\nconst SYMS = constants.SYMS\nconst TAG = constants.TAG\nconst HALF = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.TWO\nconst FLOAT = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.FOUR\nconst DOUBLE = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.EIGHT\nconst TRUE = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.TRUE\nconst FALSE = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.FALSE\nconst UNDEFINED = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.UNDEFINED\nconst NULL = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.NULL\n\nconst MAXINT_BN = new Bignumber('0x20000000000000')\nconst BUF_NAN = Buffer.from('f97e00', 'hex')\nconst BUF_INF_NEG = Buffer.from('f9fc00', 'hex')\nconst BUF_INF_POS = Buffer.from('f97c00', 'hex')\n\nfunction toType (obj) {\n  // [object Type]\n  // --------8---1\n  return ({}).toString.call(obj).slice(8, -1)\n}\n\n/**\n * Transform JavaScript values into CBOR bytes\n *\n */\nclass Encoder {\n  /**\n   * @param {Object} [options={}]\n   * @param {function(Buffer)} options.stream\n   */\n  constructor (options) {\n    options = options || {}\n\n    this.streaming = typeof options.stream === 'function'\n    this.onData = options.stream\n\n    this.semanticTypes = [\n      [URL, this._pushUrl],\n      [Bignumber, this._pushBigNumber]\n    ]\n\n    const addTypes = options.genTypes || []\n    const len = addTypes.length\n    for (let i = 0; i < len; i++) {\n      this.addSemanticType(\n        addTypes[i][0],\n        addTypes[i][1]\n      )\n    }\n\n    this._reset()\n  }\n\n  addSemanticType (type, fun) {\n    const len = this.semanticTypes.length\n    for (let i = 0; i < len; i++) {\n      const typ = this.semanticTypes[i][0]\n      if (typ === type) {\n        const old = this.semanticTypes[i][1]\n        this.semanticTypes[i][1] = fun\n        return old\n      }\n    }\n    this.semanticTypes.push([type, fun])\n    return null\n  }\n\n  push (val) {\n    if (!val) {\n      return true\n    }\n\n    this.result[this.offset] = val\n    this.resultMethod[this.offset] = 0\n    this.resultLength[this.offset] = val.length\n    this.offset++\n\n    if (this.streaming) {\n      this.onData(this.finalize())\n    }\n\n    return true\n  }\n\n  pushWrite (val, method, len) {\n    this.result[this.offset] = val\n    this.resultMethod[this.offset] = method\n    this.resultLength[this.offset] = len\n    this.offset++\n\n    if (this.streaming) {\n      this.onData(this.finalize())\n    }\n\n    return true\n  }\n\n  _pushUInt8 (val) {\n    return this.pushWrite(val, 1, 1)\n  }\n\n  _pushUInt16BE (val) {\n    return this.pushWrite(val, 2, 2)\n  }\n\n  _pushUInt32BE (val) {\n    return this.pushWrite(val, 3, 4)\n  }\n\n  _pushDoubleBE (val) {\n    return this.pushWrite(val, 4, 8)\n  }\n\n  _pushNaN () {\n    return this.push(BUF_NAN)\n  }\n\n  _pushInfinity (obj) {\n    const half = (obj < 0) ? BUF_INF_NEG : BUF_INF_POS\n    return this.push(half)\n  }\n\n  _pushFloat (obj) {\n    const b2 = Buffer.allocUnsafe(2)\n\n    if (utils.writeHalf(b2, obj)) {\n      if (utils.parseHalf(b2) === obj) {\n        return this._pushUInt8(HALF) && this.push(b2)\n      }\n    }\n\n    const b4 = Buffer.allocUnsafe(4)\n    b4.writeFloatBE(obj, 0)\n    if (b4.readFloatBE(0) === obj) {\n      return this._pushUInt8(FLOAT) && this.push(b4)\n    }\n\n    return this._pushUInt8(DOUBLE) && this._pushDoubleBE(obj)\n  }\n\n  _pushInt (obj, mt, orig) {\n    const m = mt << 5\n    if (obj < 24) {\n      return this._pushUInt8(m | obj)\n    }\n\n    if (obj <= 0xff) {\n      return this._pushUInt8(m | NUMBYTES.ONE) && this._pushUInt8(obj)\n    }\n\n    if (obj <= 0xffff) {\n      return this._pushUInt8(m | NUMBYTES.TWO) && this._pushUInt16BE(obj)\n    }\n\n    if (obj <= 0xffffffff) {\n      return this._pushUInt8(m | NUMBYTES.FOUR) && this._pushUInt32BE(obj)\n    }\n\n    if (obj <= Number.MAX_SAFE_INTEGER) {\n      return this._pushUInt8(m | NUMBYTES.EIGHT) &&\n        this._pushUInt32BE(Math.floor(obj / SHIFT32)) &&\n        this._pushUInt32BE(obj % SHIFT32)\n    }\n\n    if (mt === MT.NEG_INT) {\n      return this._pushFloat(orig)\n    }\n\n    return this._pushFloat(obj)\n  }\n\n  _pushIntNum (obj) {\n    if (obj < 0) {\n      return this._pushInt(-obj - 1, MT.NEG_INT, obj)\n    } else {\n      return this._pushInt(obj, MT.POS_INT)\n    }\n  }\n\n  _pushNumber (obj) {\n    switch (false) {\n      case (obj === obj): // eslint-disable-line\n        return this._pushNaN(obj)\n      case isFinite(obj):\n        return this._pushInfinity(obj)\n      case ((obj % 1) !== 0):\n        return this._pushIntNum(obj)\n      default:\n        return this._pushFloat(obj)\n    }\n  }\n\n  _pushString (obj) {\n    const len = Buffer.byteLength(obj, 'utf8')\n    return this._pushInt(len, MT.UTF8_STRING) && this.pushWrite(obj, 5, len)\n  }\n\n  _pushBoolean (obj) {\n    return this._pushUInt8(obj ? TRUE : FALSE)\n  }\n\n  _pushUndefined (obj) {\n    return this._pushUInt8(UNDEFINED)\n  }\n\n  _pushArray (gen, obj) {\n    const len = obj.length\n    if (!gen._pushInt(len, MT.ARRAY)) {\n      return false\n    }\n    for (let j = 0; j < len; j++) {\n      if (!gen.pushAny(obj[j])) {\n        return false\n      }\n    }\n    return true\n  }\n\n  _pushTag (tag) {\n    return this._pushInt(tag, MT.TAG)\n  }\n\n  _pushDate (gen, obj) {\n    // Round date, to get seconds since 1970-01-01 00:00:00 as defined in\n    // Sec. 2.4.1 and get a possibly more compact encoding. Note that it is\n    // still allowed to encode fractions of seconds which can be achieved by\n    // changing overwriting the encode function for Date objects.\n    return gen._pushTag(TAG.DATE_EPOCH) && gen.pushAny(Math.round(obj / 1000))\n  }\n\n  _pushBuffer (gen, obj) {\n    return gen._pushInt(obj.length, MT.BYTE_STRING) && gen.push(obj)\n  }\n\n  _pushNoFilter (gen, obj) {\n    return gen._pushBuffer(gen, obj.slice())\n  }\n\n  _pushRegexp (gen, obj) {\n    return gen._pushTag(TAG.REGEXP) && gen.pushAny(obj.source)\n  }\n\n  _pushSet (gen, obj) {\n    if (!gen._pushInt(obj.size, MT.ARRAY)) {\n      return false\n    }\n    for (const x of obj) {\n      if (!gen.pushAny(x)) {\n        return false\n      }\n    }\n    return true\n  }\n\n  _pushUrl (gen, obj) {\n    return gen._pushTag(TAG.URI) && gen.pushAny(obj.format())\n  }\n\n  _pushBigint (obj) {\n    let tag = TAG.POS_BIGINT\n    if (obj.isNegative()) {\n      obj = obj.negated().minus(1)\n      tag = TAG.NEG_BIGINT\n    }\n    let str = obj.toString(16)\n    if (str.length % 2) {\n      str = '0' + str\n    }\n    const buf = Buffer.from(str, 'hex')\n    return this._pushTag(tag) && this._pushBuffer(this, buf)\n  }\n\n  _pushBigNumber (gen, obj) {\n    if (obj.isNaN()) {\n      return gen._pushNaN()\n    }\n    if (!obj.isFinite()) {\n      return gen._pushInfinity(obj.isNegative() ? -Infinity : Infinity)\n    }\n    if (obj.isInteger()) {\n      return gen._pushBigint(obj)\n    }\n    if (!(gen._pushTag(TAG.DECIMAL_FRAC) &&\n      gen._pushInt(2, MT.ARRAY))) {\n      return false\n    }\n\n    const dec = obj.decimalPlaces()\n    const slide = obj.multipliedBy(new Bignumber(10).pow(dec))\n    if (!gen._pushIntNum(-dec)) {\n      return false\n    }\n    if (slide.abs().isLessThan(MAXINT_BN)) {\n      return gen._pushIntNum(slide.toNumber())\n    } else {\n      return gen._pushBigint(slide)\n    }\n  }\n\n  _pushMap (gen, obj) {\n    if (!gen._pushInt(obj.size, MT.MAP)) {\n      return false\n    }\n\n    return this._pushRawMap(\n      obj.size,\n      Array.from(obj)\n    )\n  }\n\n  _pushObject (obj) {\n    if (!obj) {\n      return this._pushUInt8(NULL)\n    }\n\n    var len = this.semanticTypes.length\n    for (var i = 0; i < len; i++) {\n      if (obj instanceof this.semanticTypes[i][0]) {\n        return this.semanticTypes[i][1].call(obj, this, obj)\n      }\n    }\n\n    var f = obj.encodeCBOR\n    if (typeof f === 'function') {\n      return f.call(obj, this)\n    }\n\n    var keys = Object.keys(obj)\n    var keyLength = keys.length\n    if (!this._pushInt(keyLength, MT.MAP)) {\n      return false\n    }\n\n    return this._pushRawMap(\n      keyLength,\n      keys.map((k) => [k, obj[k]])\n    )\n  }\n\n  _pushRawMap (len, map) {\n    // Sort keys for canoncialization\n    // 1. encode key\n    // 2. shorter key comes before longer key\n    // 3. same length keys are sorted with lower\n    //    byte value before higher\n\n    map = map.map(function (a) {\n      a[0] = Encoder.encode(a[0])\n      return a\n    }).sort(utils.keySorter)\n\n    for (var j = 0; j < len; j++) {\n      if (!this.push(map[j][0])) {\n        return false\n      }\n\n      if (!this.pushAny(map[j][1])) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  /**\n   * Alias for `.pushAny`\n   *\n   * @param {*} obj\n   * @returns {boolean} true on success\n   */\n  write (obj) {\n    return this.pushAny(obj)\n  }\n\n  /**\n   * Push any supported type onto the encoded stream\n   *\n   * @param {any} obj\n   * @returns {boolean} true on success\n   */\n  pushAny (obj) {\n    var typ = toType(obj)\n\n    switch (typ) {\n      case 'Number':\n        return this._pushNumber(obj)\n      case 'String':\n        return this._pushString(obj)\n      case 'Boolean':\n        return this._pushBoolean(obj)\n      case 'Object':\n        return this._pushObject(obj)\n      case 'Array':\n        return this._pushArray(this, obj)\n      case 'Uint8Array':\n        return this._pushBuffer(this, Buffer.isBuffer(obj) ? obj : Buffer.from(obj))\n      case 'Null':\n        return this._pushUInt8(NULL)\n      case 'Undefined':\n        return this._pushUndefined(obj)\n      case 'Map':\n        return this._pushMap(this, obj)\n      case 'Set':\n        return this._pushSet(this, obj)\n      case 'URL':\n        return this._pushUrl(this, obj)\n      case 'BigNumber':\n        return this._pushBigNumber(this, obj)\n      case 'Date':\n        return this._pushDate(this, obj)\n      case 'RegExp':\n        return this._pushRegexp(this, obj)\n      case 'Symbol':\n        switch (obj) {\n          case SYMS.NULL:\n            return this._pushObject(null)\n          case SYMS.UNDEFINED:\n            return this._pushUndefined(undefined)\n          // TODO: Add pluggable support for other symbols\n          default:\n            throw new Error('Unknown symbol: ' + obj.toString())\n        }\n      default:\n        throw new Error('Unknown type: ' + typeof obj + ', ' + (obj ? obj.toString() : ''))\n    }\n  }\n\n  finalize () {\n    if (this.offset === 0) {\n      return null\n    }\n\n    var result = this.result\n    var resultLength = this.resultLength\n    var resultMethod = this.resultMethod\n    var offset = this.offset\n\n    // Determine the size of the buffer\n    var size = 0\n    var i = 0\n\n    for (; i < offset; i++) {\n      size += resultLength[i]\n    }\n\n    var res = Buffer.allocUnsafe(size)\n    var index = 0\n    var length = 0\n\n    // Write the content into the result buffer\n    for (i = 0; i < offset; i++) {\n      length = resultLength[i]\n\n      switch (resultMethod[i]) {\n        case 0:\n          result[i].copy(res, index)\n          break\n        case 1:\n          res.writeUInt8(result[i], index, true)\n          break\n        case 2:\n          res.writeUInt16BE(result[i], index, true)\n          break\n        case 3:\n          res.writeUInt32BE(result[i], index, true)\n          break\n        case 4:\n          res.writeDoubleBE(result[i], index, true)\n          break\n        case 5:\n          res.write(result[i], index, length, 'utf8')\n          break\n        default:\n          throw new Error('unkown method')\n      }\n\n      index += length\n    }\n\n    var tmp = res\n\n    this._reset()\n\n    return tmp\n  }\n\n  _reset () {\n    this.result = []\n    this.resultMethod = []\n    this.resultLength = []\n    this.offset = 0\n  }\n\n  /**\n   * Encode the given value\n   * @param {*} o\n   * @returns {Buffer}\n   */\n  static encode (o) {\n    const enc = new Encoder()\n    const ret = enc.pushAny(o)\n    if (!ret) {\n      throw new Error('Failed to encode input')\n    }\n\n    return enc.finalize()\n  }\n}\n\nmodule.exports = Encoder\n", "'use strict'\n\n// exports.Commented = require('./commented')\nexports.Diagnose = require('./diagnose')\nexports.Decoder = require('./decoder')\nexports.Encoder = require('./encoder')\nexports.Simple = require('./simple')\nexports.Tagged = require('./tagged')\n\n// exports.comment = exports.Commented.comment\nexports.decodeAll = exports.Decoder.decodeAll\nexports.decodeFirst = exports.Decoder.decodeFirst\nexports.diagnose = exports.Diagnose.diagnose\nexports.encode = exports.Encoder.encode\nexports.decode = exports.Decoder.decode\n\nexports.leveldb = {\n  decode: exports.Decoder.decodeAll,\n  encode: exports.Encoder.encode,\n  buffer: true,\n  name: 'cbor'\n}\n", null, null, null, "const alphabet = 'abcdefghijklmnopqrstuvwxyz234567';\n\n// Build a lookup table for decoding.\nconst lookupTable: Record<string, number> = Object.create(null);\nfor (let i = 0; i < alphabet.length; i++) {\n  lookupTable[alphabet[i]] = i;\n}\n\n// Add aliases for rfc4648.\nlookupTable['0'] = lookupTable.o;\nlookupTable['1'] = lookupTable.i;\n\n/**\n * @param input The input array to encode.\n * @returns A Base32 string encoding the input.\n */\nexport function encode(input: Uint8Array): string {\n  // How many bits will we skip from the first byte.\n  let skip = 0;\n  // 5 high bits, carry from one byte to the next.\n  let bits = 0;\n\n  // The output string in base32.\n  let output = '';\n\n  function encodeByte(byte: number) {\n    if (skip < 0) {\n      // we have a carry from the previous byte\n      bits |= byte >> -skip;\n    } else {\n      // no carry\n      bits = (byte << skip) & 248;\n    }\n\n    if (skip > 3) {\n      // Not enough data to produce a character, get us another one\n      skip -= 8;\n      return 1;\n    }\n\n    if (skip < 4) {\n      // produce a character\n      output += alphabet[bits >> 3];\n      skip += 5;\n    }\n\n    return 0;\n  }\n\n  for (let i = 0; i < input.length; ) {\n    i += encodeByte(input[i]);\n  }\n\n  return output + (skip < 0 ? alphabet[bits >> 3] : '');\n}\n\n/**\n * @param input The base32 encoded string to decode.\n */\nexport function decode(input: string): Uint8Array {\n  // how many bits we have from the previous character.\n  let skip = 0;\n  // current byte we're producing.\n  let byte = 0;\n\n  const output = new Uint8Array(((input.length * 4) / 3) | 0);\n  let o = 0;\n\n  function decodeChar(char: string) {\n    // Consume a character from the stream, store\n    // the output in this.output. As before, better\n    // to use update().\n    let val = lookupTable[char.toLowerCase()];\n    if (val === undefined) {\n      throw new Error(`Invalid character: ${JSON.stringify(char)}`);\n    }\n\n    // move to the high bits\n    val <<= 3;\n    byte |= val >>> skip;\n    skip += 5;\n\n    if (skip >= 8) {\n      // We have enough bytes to produce an output\n      output[o++] = byte;\n      skip -= 8;\n\n      if (skip > 0) {\n        byte = (val << (5 - skip)) & 255;\n      } else {\n        byte = 0;\n      }\n    }\n  }\n\n  for (const c of input) {\n    decodeChar(c);\n  }\n\n  return output.slice(0, o);\n}\n", "// This file is translated to JavaScript from\n// https://lxp32.github.io/docs/a-simple-example-crc32-calculation/\nconst lookUpTable: Uint32Array = new Uint32Array([\n  0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3,\n  0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91,\n  0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,\n  0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5,\n  0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,\n  0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,\n  0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f,\n  0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d,\n  0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,\n  0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,\n  0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457,\n  0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,\n  0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb,\n  0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9,\n  0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,\n  0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad,\n  0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683,\n  0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,\n  0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7,\n  0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,\n  0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,\n  0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79,\n  0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f,\n  0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,\n  0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,\n  0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21,\n  0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,\n  0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45,\n  0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db,\n  0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,\n  0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf,\n  0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d,\n]);\n\n/**\n * Calculate the CRC32 of an ArrayBufferLike.\n * @param buf The BufferLike to calculate the CRC32 of.\n */\nexport function getCrc32(buf: ArrayBufferLike): number {\n  const b = new Uint8Array(buf);\n  let crc = -1;\n\n  for (let i = 0; i < b.length; i++) {\n    const byte = b[i];\n    const t = (byte ^ crc) & 0xff;\n    crc = lookUpTable[t] ^ (crc >>> 8);\n  }\n\n  return (crc ^ -1) >>> 0;\n}\n", "function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`positive integer expected, not ${n}`);\n}\n\nfunction bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`boolean expected, not ${b}`);\n}\n\n// copied from utils\nexport function isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\nfunction bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nfunction hash(h: Hash) {\n  if (typeof h !== 'function' || typeof h.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(h.outputLen);\n  number(h.blockLen);\n}\n\nfunction exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nfunction output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nexport { number, bool, bytes, hash, exists, output };\n\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n", "// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// See utils.ts for details.\ndeclare const globalThis: Record<string, any> | undefined;\nexport const crypto =\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n", "/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nimport { bytes as abytes } from './_assert.js';\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nexport function isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n// The rotate left (circular left shift) operation for uint32\nexport const rotl = (word: number, shift: number) =>\n  (word << shift) | ((word >>> (32 - shift)) >>> 0);\n\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// The byte swap operation for uint32\nexport const byteSwap = (word: number) =>\n  ((word << 24) & 0xff000000) |\n  ((word << 8) & 0xff0000) |\n  ((word >>> 8) & 0xff00) |\n  ((word >>> 24) & 0xff);\n// Conditionally byte swap if on a big-endian platform\nexport const byteSwapIfBE = isLE ? (n: number) => n : (n: number) => byteSwap(n);\n\n// In place byte swap for Uint32Array\nexport function byteSwap32(arr: Uint32Array) {\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = byteSwap(arr[i]);\n  }\n}\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 } as const;\nfunction asciiToBase16(char: number): number | undefined {\n  if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;\n  if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);\n  if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);\n  return;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2;\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\nexport type Input = Uint8Array | string;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  abytes(data);\n  return data;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\nconst toStr = {}.toString;\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n    throw new Error('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashCons: () => Hash<T>) {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n", "import { exists, output } from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n// Polyfill for Safari 14\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n// Choice: a ? b : c\nexport const Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nexport const Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport abstract class HashMD<T extends HashMD<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    exists(this);\n    output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in\n    // current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n", "import { HashMD, Chi, Maj } from './_md.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state:\n// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends HashMD<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = SHA256_IV[0] | 0;\n  B = SHA256_IV[1] | 0;\n  C = SHA256_IV[2] | 0;\n  D = SHA256_IV[3] | 0;\n  E = SHA256_IV[4] | 0;\n  F = SHA256_IV[5] | 0;\n  G = SHA256_IV[6] | 0;\n  H = SHA256_IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n", "import { sha224 as jsSha224 } from '@noble/hashes/sha256';\n\n/**\n * Returns the SHA224 hash of the buffer.\n * @param data Arraybuffer to encode\n */\nexport function sha224(data: ArrayBuffer): Uint8Array {\n  return jsSha224.create().update(new Uint8Array(data)).digest();\n}\n", "import { decode, encode } from './utils/base32';\nimport { getCrc32 } from './utils/getCrc';\nimport { sha224 } from './utils/sha224';\n\nexport const JSON_KEY_PRINCIPAL = '__principal__';\nconst SELF_AUTHENTICATING_SUFFIX = 2;\nconst ANONYMOUS_SUFFIX = 4;\n\nconst MANAGEMENT_CANISTER_PRINCIPAL_HEX_STR = 'aaaaa-aa';\n\nconst fromHexString = (hexString: string) =>\n  new Uint8Array((hexString.match(/.{1,2}/g) ?? []).map(byte => parseInt(byte, 16)));\n\nconst toHexString = (bytes: Uint8Array) =>\n  bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');\n\nexport type JsonnablePrincipal = {\n  [JSON_KEY_PRINCIPAL]: string;\n};\n\nexport class Principal {\n  public static anonymous(): Principal {\n    return new this(new Uint8Array([ANONYMOUS_SUFFIX]));\n  }\n\n  /**\n   * Utility method, returning the principal representing the management canister, decoded from the hex string `'aaaaa-aa'`\n   * @returns {Principal} principal of the management canister\n   */\n  public static managementCanister(): Principal {\n    return this.fromHex(MANAGEMENT_CANISTER_PRINCIPAL_HEX_STR);\n  }\n\n  public static selfAuthenticating(publicKey: Uint8Array): Principal {\n    const sha = sha224(publicKey);\n    return new this(new Uint8Array([...sha, SELF_AUTHENTICATING_SUFFIX]));\n  }\n\n  public static from(other: unknown): Principal {\n    if (typeof other === 'string') {\n      return Principal.fromText(other);\n    } else if (Object.getPrototypeOf(other) === Uint8Array.prototype) {\n      return new Principal(other as Uint8Array);\n    } else if (\n      typeof other === 'object' &&\n      other !== null &&\n      (other as Principal)._isPrincipal === true\n    ) {\n      return new Principal((other as Principal)._arr);\n    }\n\n    throw new Error(`Impossible to convert ${JSON.stringify(other)} to Principal.`);\n  }\n\n  public static fromHex(hex: string): Principal {\n    return new this(fromHexString(hex));\n  }\n\n  public static fromText(text: string): Principal {\n    let maybePrincipal = text;\n    // If formatted as JSON string, parse it first\n    if (text.includes(JSON_KEY_PRINCIPAL)) {\n      const obj = JSON.parse(text);\n      if (JSON_KEY_PRINCIPAL in obj) {\n        maybePrincipal = obj[JSON_KEY_PRINCIPAL];\n      }\n    }\n\n    const canisterIdNoDash = maybePrincipal.toLowerCase().replace(/-/g, '');\n\n    let arr = decode(canisterIdNoDash);\n    arr = arr.slice(4, arr.length);\n\n    const principal = new this(arr);\n    if (principal.toText() !== maybePrincipal) {\n      throw new Error(\n        `Principal \"${principal.toText()}\" does not have a valid checksum (original value \"${maybePrincipal}\" may not be a valid Principal ID).`,\n      );\n    }\n\n    return principal;\n  }\n\n  public static fromUint8Array(arr: Uint8Array): Principal {\n    return new this(arr);\n  }\n\n  public readonly _isPrincipal = true;\n\n  protected constructor(private _arr: Uint8Array) {}\n\n  public isAnonymous(): boolean {\n    return this._arr.byteLength === 1 && this._arr[0] === ANONYMOUS_SUFFIX;\n  }\n\n  public toUint8Array(): Uint8Array {\n    return this._arr;\n  }\n\n  public toHex(): string {\n    return toHexString(this._arr).toUpperCase();\n  }\n\n  public toText(): string {\n    const checksumArrayBuf = new ArrayBuffer(4);\n    const view = new DataView(checksumArrayBuf);\n    view.setUint32(0, getCrc32(this._arr));\n    const checksum = new Uint8Array(checksumArrayBuf);\n\n    const bytes = Uint8Array.from(this._arr);\n    const array = new Uint8Array([...checksum, ...bytes]);\n\n    const result = encode(array);\n    const matches = result.match(/.{1,5}/g);\n    if (!matches) {\n      // This should only happen if there's no character, which is unreachable.\n      throw new Error();\n    }\n    return matches.join('-');\n  }\n\n  public toString(): string {\n    return this.toText();\n  }\n\n  /**\n   * Serializes to JSON\n   * @returns {JsonnablePrincipal} a JSON object with a single key, {@link JSON_KEY_PRINCIPAL}, whose value is the principal as a string\n   */\n  public toJSON(): JsonnablePrincipal {\n    return { [JSON_KEY_PRINCIPAL]: this.toText() };\n  }\n\n  /**\n   * Utility method taking a Principal to compare against. Used for determining canister ranges in certificate verification\n   * @param {Principal} other - a {@link Principal} to compare\n   * @returns {'lt' | 'eq' | 'gt'} `'lt' | 'eq' | 'gt'` a string, representing less than, equal to, or greater than\n   */\n  public compareTo(other: Principal): 'lt' | 'eq' | 'gt' {\n    for (let i = 0; i < Math.min(this._arr.length, other._arr.length); i++) {\n      if (this._arr[i] < other._arr[i]) return 'lt';\n      else if (this._arr[i] > other._arr[i]) return 'gt';\n    }\n    // Here, at least one principal is a prefix of the other principal (they could be the same)\n    if (this._arr.length < other._arr.length) return 'lt';\n    if (this._arr.length > other._arr.length) return 'gt';\n    return 'eq';\n  }\n\n  /**\n   * Utility method checking whether a provided Principal is less than or equal to the current one using the {@link Principal.compareTo} method\n   * @param other a {@link Principal} to compare\n   * @returns {boolean} boolean\n   */\n  public ltEq(other: Principal): boolean {\n    const cmp = this.compareTo(other);\n    return cmp == 'lt' || cmp == 'eq';\n  }\n\n  /**\n   * Utility method checking whether a provided Principal is greater than or equal to the current one using the {@link Principal.compareTo} method\n   * @param other a {@link Principal} to compare\n   * @returns {boolean} boolean\n   */\n  public gtEq(other: Principal): boolean {\n    const cmp = this.compareTo(other);\n    return cmp == 'gt' || cmp == 'eq';\n  }\n}\n", "/**\n * An error that happens in the Agent. This is the root of all errors and should be used\n * everywhere in the Agent code (this package).\n *\n * @todo https://github.com/dfinity/agent-js/issues/420\n */\nexport class AgentError extends Error {\n  constructor(public readonly message: string) {\n    super(message);\n    Object.setPrototypeOf(this, AgentError.prototype);\n  }\n}\n", "// This file is based on:\n// https://github.com/dfinity-lab/dfinity/blob/9bca65f8edd65701ea6bdb00e0752f9186bbc893/docs/spec/public/index.adoc#cbor-encoding-of-requests-and-responses\nimport borc from 'borc';\nimport * as cbor from 'simple-cbor';\nimport { CborEncoder, SelfDescribeCborSerializer } from 'simple-cbor';\nimport { Principal } from '@dfinity/principal';\nimport { concat, fromHex } from './utils/buffer';\n\n// We are using hansl/simple-cbor for CBOR serialization, to avoid issues with\n// encoding the uint64 values that the HTTP handler of the client expects for\n// canister IDs. However, simple-cbor does not yet provide deserialization so\n// we are using `Uint8Array` so that we can use the dignifiedquire/borc CBOR\n// decoder.\n\nclass PrincipalEncoder implements CborEncoder<Principal> {\n  public get name() {\n    return 'Principal';\n  }\n\n  public get priority() {\n    return 0;\n  }\n\n  public match(value: any): boolean {\n    return value && value._isPrincipal === true;\n  }\n\n  public encode(v: Principal): cbor.CborValue {\n    return cbor.value.bytes(v.toUint8Array());\n  }\n}\n\nclass BufferEncoder implements CborEncoder<ArrayBuffer> {\n  public get name() {\n    return 'Buffer';\n  }\n\n  public get priority() {\n    return 1;\n  }\n\n  public match(value: any): boolean {\n    return value instanceof ArrayBuffer || ArrayBuffer.isView(value);\n  }\n\n  public encode(v: ArrayBuffer): cbor.CborValue {\n    return cbor.value.bytes(new Uint8Array(v));\n  }\n}\n\nclass BigIntEncoder implements CborEncoder<BigInt> {\n  public get name() {\n    return 'BigInt';\n  }\n\n  public get priority() {\n    return 1;\n  }\n\n  public match(value: any): boolean {\n    return typeof value === `bigint`;\n  }\n\n  public encode(v: bigint): cbor.CborValue {\n    // Always use a bigint encoding.\n    if (v > BigInt(0)) {\n      return cbor.value.tagged(2, cbor.value.bytes(fromHex(v.toString(16))));\n    } else {\n      return cbor.value.tagged(3, cbor.value.bytes(fromHex((BigInt('-1') * v).toString(16))));\n    }\n  }\n}\n\nconst serializer = SelfDescribeCborSerializer.withDefaultEncoders(true);\nserializer.addEncoder(new PrincipalEncoder());\nserializer.addEncoder(new BufferEncoder());\nserializer.addEncoder(new BigIntEncoder());\n\nexport enum CborTag {\n  Uint64LittleEndian = 71,\n  Semantic = 55799,\n}\n\n/**\n * Encode a JavaScript value into CBOR.\n */\nexport function encode(value: any): ArrayBuffer {\n  return serializer.serialize(value);\n}\n\nfunction decodePositiveBigInt(buf: Uint8Array): bigint {\n  const len = buf.byteLength;\n  let res = BigInt(0);\n  for (let i = 0; i < len; i++) {\n    res = res * BigInt(0x100) + BigInt(buf[i]);\n  }\n\n  return res;\n}\n\n// A BORC subclass that decodes byte strings to ArrayBuffer instead of the Buffer class.\nclass Uint8ArrayDecoder extends borc.Decoder {\n  public createByteString(raw: ArrayBuffer[]): ArrayBuffer {\n    return concat(...raw);\n  }\n\n  public createByteStringFromHeap(start: number, end: number): ArrayBuffer {\n    if (start === end) {\n      return new ArrayBuffer(0);\n    }\n\n    return new Uint8Array((this as any)._heap.slice(start, end));\n  }\n}\n\nexport function decode<T>(input: ArrayBuffer): T {\n  const buffer = new Uint8Array(input);\n  const decoder = new Uint8ArrayDecoder({\n    size: buffer.byteLength,\n    tags: {\n      // Override tags 2 and 3 for BigInt support (borc supports only BigNumber).\n      2: val => decodePositiveBigInt(val),\n      3: val => -decodePositiveBigInt(val),\n      [CborTag.Semantic]: (value: T): T => value,\n    },\n  });\n\n  return decoder.decodeFirst(buffer);\n}\n", "/**\n * Concatenate multiple array buffers.\n * @param buffers The buffers to concatenate.\n */\nexport function concat(...buffers: ArrayBuffer[]): ArrayBuffer {\n  const result = new Uint8Array(buffers.reduce((acc, curr) => acc + curr.byteLength, 0));\n  let index = 0;\n  for (const b of buffers) {\n    result.set(new Uint8Array(b), index);\n    index += b.byteLength;\n  }\n  return result.buffer;\n}\n\n/**\n * Transforms a buffer to an hexadecimal string. This will use the buffer as an Uint8Array.\n * @param buffer The buffer to return the hexadecimal string of.\n */\nexport function toHex(buffer: ArrayBuffer): string {\n  return [...new Uint8Array(buffer)].map(x => x.toString(16).padStart(2, '0')).join('');\n}\n\nconst hexRe = new RegExp(/^[0-9a-fA-F]+$/);\n\n/**\n * Transforms a hexadecimal string into an array buffer.\n * @param hex The hexadecimal string to use.\n */\nexport function fromHex(hex: string): ArrayBuffer {\n  if (!hexRe.test(hex)) {\n    throw new Error('Invalid hexadecimal string.');\n  }\n  const buffer = [...hex]\n    .reduce((acc, curr, i) => {\n      acc[(i / 2) | 0] = (acc[(i / 2) | 0] || '') + curr;\n      return acc;\n    }, [] as string[])\n    .map(x => Number.parseInt(x, 16));\n\n  return new Uint8Array(buffer).buffer;\n}\n\n/**\n *\n * @param b1 array buffer 1\n * @param b2 array buffer 2\n * @returns number - negative if b1 < b2, positive if b1 > b2, 0 if b1 === b2\n */\nexport function compare(b1: ArrayBuffer, b2: ArrayBuffer): number {\n  if (b1.byteLength !== b2.byteLength) {\n    return b1.byteLength - b2.byteLength;\n  }\n\n  const u1 = new Uint8Array(b1);\n  const u2 = new Uint8Array(b2);\n  for (let i = 0; i < u1.length; i++) {\n    if (u1[i] !== u2[i]) {\n      return u1[i] - u2[i];\n    }\n  }\n  return 0;\n}\n\n/**\n * Checks two array buffers for equality.\n * @param b1 array buffer 1\n * @param b2 array buffer 2\n * @returns boolean\n */\nexport function bufEquals(b1: ArrayBuffer, b2: ArrayBuffer): boolean {\n  return compare(b1, b2) === 0;\n}\n\n/**\n * Returns a true ArrayBuffer from a Uint8Array, as Uint8Array.buffer is unsafe.\n * @param {Uint8Array} arr Uint8Array to convert\n * @returns ArrayBuffer\n */\nexport function uint8ToBuf(arr: Uint8Array): ArrayBuffer {\n  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength).buffer;\n}\n\n/**\n * Returns a true ArrayBuffer from an ArrayBufferLike object.\n * @param bufLike a buffer-like object\n * @returns ArrayBuffer\n */\nexport function bufFromBufLike(\n  bufLike:\n    | ArrayBuffer\n    | Uint8Array\n    | DataView\n    | ArrayBufferView\n    | ArrayBufferLike\n    | [number]\n    | number[]\n    | { buffer: ArrayBuffer },\n): ArrayBuffer {\n  if (bufLike instanceof Uint8Array) {\n    return uint8ToBuf(bufLike);\n  }\n  if (bufLike instanceof ArrayBuffer) {\n    return bufLike;\n  }\n  if (Array.isArray(bufLike)) {\n    return uint8ToBuf(new Uint8Array(bufLike));\n  }\n  if ('buffer' in bufLike) {\n    return bufFromBufLike(bufLike.buffer);\n  }\n  return uint8ToBuf(new Uint8Array(bufLike));\n}\n", "/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Principal as PrincipalId } from '@dfinity/principal';\nimport { JsonValue } from './types';\nimport { concat, PipeArrayBuffer as Pipe } from './utils/buffer';\nimport { idlLabelToId } from './utils/hash';\nimport {\n  lebDecode,\n  lebEncode,\n  readIntLE,\n  readUIntLE,\n  safeRead,\n  safeReadUint8,\n  slebDecode,\n  slebEncode,\n  writeIntLE,\n  writeUIntLE,\n} from './utils/leb128';\nimport { iexp2 } from './utils/bigint-math';\n\n/**\n * This module provides a combinator library to create serializers/deserializers\n * between JavaScript values and IDL used by canisters on the Internet Computer,\n * as documented at https://github.com/dfinity/candid/blob/119703ba342d2fef6ab4972d2541b9fe36ae8e36/spec/Candid.md\n */\n\nconst enum IDLTypeIds {\n  Null = -1,\n  Bool = -2,\n  Nat = -3,\n  Int = -4,\n  Float32 = -13,\n  Float64 = -14,\n  Text = -15,\n  Reserved = -16,\n  Empty = -17,\n  Opt = -18,\n  Vector = -19,\n  Record = -20,\n  Variant = -21,\n  Func = -22,\n  Service = -23,\n  Principal = -24,\n}\n\nconst magicNumber = 'DIDL';\nconst toReadableString_max = 400; // will not display arguments after 400chars. Makes sure 2mb blobs don't get inside the error\n\nfunction zipWith<TX, TY, TR>(xs: TX[], ys: TY[], f: (a: TX, b: TY) => TR): TR[] {\n  return xs.map((x, i) => f(x, ys[i]));\n}\n\n/**\n * An IDL Type Table, which precedes the data in the stream.\n */\nclass TypeTable {\n  // List of types. Needs to be an array as the index needs to be stable.\n  private _typs: ArrayBuffer[] = [];\n  private _idx = new Map<string, number>();\n\n  public has(obj: ConstructType) {\n    return this._idx.has(obj.name);\n  }\n\n  public add<T>(type: ConstructType<T>, buf: ArrayBuffer) {\n    const idx = this._typs.length;\n    this._idx.set(type.name, idx);\n    this._typs.push(buf);\n  }\n\n  public merge<T>(obj: ConstructType<T>, knot: string) {\n    const idx = this._idx.get(obj.name);\n    const knotIdx = this._idx.get(knot);\n    if (idx === undefined) {\n      throw new Error('Missing type index for ' + obj);\n    }\n    if (knotIdx === undefined) {\n      throw new Error('Missing type index for ' + knot);\n    }\n    this._typs[idx] = this._typs[knotIdx];\n\n    // Delete the type.\n    this._typs.splice(knotIdx, 1);\n    this._idx.delete(knot);\n  }\n\n  public encode() {\n    const len = lebEncode(this._typs.length);\n    const buf = concat(...this._typs);\n    return concat(len, buf);\n  }\n\n  public indexOf(typeName: string) {\n    if (!this._idx.has(typeName)) {\n      throw new Error('Missing type index for ' + typeName);\n    }\n    return slebEncode(this._idx.get(typeName) || 0);\n  }\n}\n\nexport abstract class Visitor<D, R> {\n  public visitType<T>(t: Type<T>, data: D): R {\n    throw new Error('Not implemented');\n  }\n  public visitPrimitive<T>(t: PrimitiveType<T>, data: D): R {\n    return this.visitType(t, data);\n  }\n  public visitEmpty(t: EmptyClass, data: D): R {\n    return this.visitPrimitive(t, data);\n  }\n  public visitBool(t: BoolClass, data: D): R {\n    return this.visitPrimitive(t, data);\n  }\n  public visitNull(t: NullClass, data: D): R {\n    return this.visitPrimitive(t, data);\n  }\n  public visitReserved(t: ReservedClass, data: D): R {\n    return this.visitPrimitive(t, data);\n  }\n  public visitText(t: TextClass, data: D): R {\n    return this.visitPrimitive(t, data);\n  }\n  public visitNumber<T>(t: PrimitiveType<T>, data: D): R {\n    return this.visitPrimitive(t, data);\n  }\n  public visitInt(t: IntClass, data: D): R {\n    return this.visitNumber(t, data);\n  }\n  public visitNat(t: NatClass, data: D): R {\n    return this.visitNumber(t, data);\n  }\n  public visitFloat(t: FloatClass, data: D): R {\n    return this.visitPrimitive(t, data);\n  }\n  public visitFixedInt(t: FixedIntClass, data: D): R {\n    return this.visitNumber(t, data);\n  }\n  public visitFixedNat(t: FixedNatClass, data: D): R {\n    return this.visitNumber(t, data);\n  }\n  public visitPrincipal(t: PrincipalClass, data: D): R {\n    return this.visitPrimitive(t, data);\n  }\n\n  public visitConstruct<T>(t: ConstructType<T>, data: D): R {\n    return this.visitType(t, data);\n  }\n  public visitVec<T>(t: VecClass<T>, ty: Type<T>, data: D): R {\n    return this.visitConstruct(t, data);\n  }\n  public visitOpt<T>(t: OptClass<T>, ty: Type<T>, data: D): R {\n    return this.visitConstruct(t, data);\n  }\n  public visitRecord(t: RecordClass, fields: Array<[string, Type]>, data: D): R {\n    return this.visitConstruct(t, data);\n  }\n  public visitTuple<T extends any[]>(t: TupleClass<T>, components: Type[], data: D): R {\n    const fields: Array<[string, Type]> = components.map((ty, i) => [`_${i}_`, ty]);\n    return this.visitRecord(t, fields, data);\n  }\n  public visitVariant(t: VariantClass, fields: Array<[string, Type]>, data: D): R {\n    return this.visitConstruct(t, data);\n  }\n  public visitRec<T>(t: RecClass<T>, ty: ConstructType<T>, data: D): R {\n    return this.visitConstruct(ty, data);\n  }\n  public visitFunc(t: FuncClass, data: D): R {\n    return this.visitConstruct(t, data);\n  }\n  public visitService(t: ServiceClass, data: D): R {\n    return this.visitConstruct(t, data);\n  }\n}\n\n/**\n * Represents an IDL type.\n */\nexport abstract class Type<T = any> {\n  public abstract readonly name: string;\n  public abstract accept<D, R>(v: Visitor<D, R>, d: D): R;\n\n  /* Display type name */\n  public display(): string {\n    return this.name;\n  }\n\n  public valueToString(x: T): string {\n    return toReadableString(x);\n  }\n\n  /* Implement `T` in the IDL spec, only needed for non-primitive types */\n  public buildTypeTable(typeTable: TypeTable): void {\n    if (!typeTable.has(this)) {\n      this._buildTypeTableImpl(typeTable);\n    }\n  }\n\n  /**\n   * Assert that JavaScript's `x` is the proper type represented by this\n   * Type.\n   */\n  public abstract covariant(x: any): x is T;\n\n  /**\n   * Encode the value. This needs to be public because it is used by\n   * encodeValue() from different types.\n   * @internal\n   */\n  public abstract encodeValue(x: T): ArrayBuffer;\n\n  /**\n   * Implement `I` in the IDL spec.\n   * Encode this type for the type table.\n   */\n  public abstract encodeType(typeTable: TypeTable): ArrayBuffer;\n\n  public abstract checkType(t: Type): Type;\n  public abstract decodeValue(x: Pipe, t: Type): T;\n\n  protected abstract _buildTypeTableImpl(typeTable: TypeTable): void;\n}\n\nexport abstract class PrimitiveType<T = any> extends Type<T> {\n  public checkType(t: Type): Type {\n    if (this.name !== t.name) {\n      throw new Error(`type mismatch: type on the wire ${t.name}, expect type ${this.name}`);\n    }\n    return t;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public _buildTypeTableImpl(typeTable: TypeTable): void {\n    // No type table encoding for Primitive types.\n    return;\n  }\n}\n\nexport abstract class ConstructType<T = any> extends Type<T> {\n  public checkType(t: Type): ConstructType<T> {\n    if (t instanceof RecClass) {\n      const ty = t.getType();\n      if (typeof ty === 'undefined') {\n        throw new Error('type mismatch with uninitialized type');\n      }\n      return ty;\n    }\n    throw new Error(`type mismatch: type on the wire ${t.name}, expect type ${this.name}`);\n  }\n  public encodeType(typeTable: TypeTable) {\n    return typeTable.indexOf(this.name);\n  }\n}\n\n/**\n * Represents an IDL Empty, a type which has no inhabitants.\n * Since no values exist for this type, it cannot be serialised or deserialised.\n * Result types like `Result<Text, Empty>` should always succeed.\n */\nexport class EmptyClass extends PrimitiveType<never> {\n  public accept<D, R>(v: Visitor<D, R>, d: D): R {\n    return v.visitEmpty(this, d);\n  }\n\n  public covariant(x: any): x is never {\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n\n  public encodeValue(): never {\n    throw new Error('Empty cannot appear as a function argument');\n  }\n\n  public valueToString(): never {\n    throw new Error('Empty cannot appear as a value');\n  }\n\n  public encodeType() {\n    return slebEncode(IDLTypeIds.Empty);\n  }\n\n  public decodeValue(): never {\n    throw new Error('Empty cannot appear as an output');\n  }\n\n  get name() {\n    return 'empty';\n  }\n}\n\n/**\n * Represents an IDL Unknown, a placeholder type for deserialization only.\n * When decoding a value as Unknown, all fields will be retained but the names are only available in\n * hashed form.\n * A deserialized unknown will offer it's actual type by calling the `type()` function.\n * Unknown cannot be serialized and attempting to do so will throw an error.\n */\nexport class UnknownClass extends Type {\n  public checkType(t: Type): Type {\n    throw new Error('Method not implemented for unknown.');\n  }\n\n  public accept<D, R>(v: Visitor<D, R>, d: D): R {\n    throw v.visitType(this, d);\n  }\n\n  public covariant(x: any): x is any {\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n\n  public encodeValue(): never {\n    throw new Error('Unknown cannot appear as a function argument');\n  }\n\n  public valueToString(): never {\n    throw new Error('Unknown cannot appear as a value');\n  }\n\n  public encodeType(): never {\n    throw new Error('Unknown cannot be serialized');\n  }\n\n  public decodeValue(b: Pipe, t: Type): any {\n    let decodedValue = t.decodeValue(b, t);\n\n    if (Object(decodedValue) !== decodedValue) {\n      // decodedValue is primitive. Box it, otherwise we cannot add the type() function.\n      // The type() function is important for primitives because otherwise we cannot tell apart the\n      // different number types.\n      decodedValue = Object(decodedValue);\n    }\n\n    let typeFunc;\n    if (t instanceof RecClass) {\n      typeFunc = () => t.getType();\n    } else {\n      typeFunc = () => t;\n    }\n    // Do not use 'decodedValue.type = typeFunc' because this would lead to an enumerable property\n    // 'type' which means it would be serialized if the value would be candid encoded again.\n    // This in turn leads to problems if the decoded value is a variant because these values are\n    // only allowed to have a single property.\n    Object.defineProperty(decodedValue, 'type', {\n      value: typeFunc,\n      writable: true,\n      enumerable: false,\n      configurable: true,\n    });\n    return decodedValue;\n  }\n\n  protected _buildTypeTableImpl(): void {\n    throw new Error('Unknown cannot be serialized');\n  }\n\n  get name() {\n    return 'Unknown';\n  }\n}\n\n/**\n * Represents an IDL Bool\n */\nexport class BoolClass extends PrimitiveType<boolean> {\n  public accept<D, R>(v: Visitor<D, R>, d: D): R {\n    return v.visitBool(this, d);\n  }\n\n  public covariant(x: any): x is boolean {\n    if (typeof x === 'boolean') return true;\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n\n  public encodeValue(x: boolean): ArrayBuffer {\n    return new Uint8Array([x ? 1 : 0]);\n  }\n\n  public encodeType() {\n    return slebEncode(IDLTypeIds.Bool);\n  }\n\n  public decodeValue(b: Pipe, t: Type) {\n    this.checkType(t);\n    switch (safeReadUint8(b)) {\n      case 0:\n        return false;\n      case 1:\n        return true;\n      default:\n        throw new Error('Boolean value out of range');\n    }\n  }\n\n  get name() {\n    return 'bool';\n  }\n}\n\n/**\n * Represents an IDL Null\n */\nexport class NullClass extends PrimitiveType<null> {\n  public accept<D, R>(v: Visitor<D, R>, d: D): R {\n    return v.visitNull(this, d);\n  }\n\n  public covariant(x: any): x is null {\n    if (x === null) return true;\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n\n  public encodeValue() {\n    return new ArrayBuffer(0);\n  }\n\n  public encodeType() {\n    return slebEncode(IDLTypeIds.Null);\n  }\n\n  public decodeValue(b: Pipe, t: Type) {\n    this.checkType(t);\n    return null;\n  }\n\n  get name() {\n    return 'null';\n  }\n}\n\n/**\n * Represents an IDL Reserved\n */\nexport class ReservedClass extends PrimitiveType<any> {\n  public accept<D, R>(v: Visitor<D, R>, d: D): R {\n    return v.visitReserved(this, d);\n  }\n\n  public covariant(x: any): x is any {\n    return true;\n  }\n\n  public encodeValue() {\n    return new ArrayBuffer(0);\n  }\n\n  public encodeType() {\n    return slebEncode(IDLTypeIds.Reserved);\n  }\n\n  public decodeValue(b: Pipe, t: Type) {\n    if (t.name !== this.name) {\n      t.decodeValue(b, t);\n    }\n    return null;\n  }\n\n  get name() {\n    return 'reserved';\n  }\n}\n\n/**\n * Represents an IDL Text\n */\nexport class TextClass extends PrimitiveType<string> {\n  public accept<D, R>(v: Visitor<D, R>, d: D): R {\n    return v.visitText(this, d);\n  }\n\n  public covariant(x: any): x is string {\n    if (typeof x === 'string') return true;\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n\n  public encodeValue(x: string) {\n    const buf = new TextEncoder().encode(x);\n    const len = lebEncode(buf.byteLength);\n    return concat(len, buf);\n  }\n\n  public encodeType() {\n    return slebEncode(IDLTypeIds.Text);\n  }\n\n  public decodeValue(b: Pipe, t: Type) {\n    this.checkType(t);\n    const len = lebDecode(b);\n    const buf = safeRead(b, Number(len));\n    const decoder = new TextDecoder('utf8', { fatal: true });\n    return decoder.decode(buf);\n  }\n\n  get name() {\n    return 'text';\n  }\n\n  public valueToString(x: string) {\n    return '\"' + x + '\"';\n  }\n}\n\n/**\n * Represents an IDL Int\n */\nexport class IntClass extends PrimitiveType<bigint> {\n  public accept<D, R>(v: Visitor<D, R>, d: D): R {\n    return v.visitInt(this, d);\n  }\n\n  public covariant(x: any): x is bigint {\n    // We allow encoding of JavaScript plain numbers.\n    // But we will always decode to bigint.\n    if (typeof x === 'bigint' || Number.isInteger(x)) return true;\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n\n  public encodeValue(x: bigint | number) {\n    return slebEncode(x);\n  }\n\n  public encodeType() {\n    return slebEncode(IDLTypeIds.Int);\n  }\n\n  public decodeValue(b: Pipe, t: Type) {\n    this.checkType(t);\n    return slebDecode(b);\n  }\n\n  get name() {\n    return 'int';\n  }\n\n  public valueToString(x: bigint) {\n    return x.toString();\n  }\n}\n\n/**\n * Represents an IDL Nat\n */\nexport class NatClass extends PrimitiveType<bigint> {\n  public accept<D, R>(v: Visitor<D, R>, d: D): R {\n    return v.visitNat(this, d);\n  }\n\n  public covariant(x: any): x is bigint {\n    // We allow encoding of JavaScript plain numbers.\n    // But we will always decode to bigint.\n    if ((typeof x === 'bigint' && x >= BigInt(0)) || (Number.isInteger(x) && x >= 0)) return true;\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n\n  public encodeValue(x: bigint | number) {\n    return lebEncode(x);\n  }\n\n  public encodeType() {\n    return slebEncode(IDLTypeIds.Nat);\n  }\n\n  public decodeValue(b: Pipe, t: Type) {\n    this.checkType(t);\n    return lebDecode(b);\n  }\n\n  get name() {\n    return 'nat';\n  }\n\n  public valueToString(x: bigint) {\n    return x.toString();\n  }\n}\n\n/**\n * Represents an IDL Float\n */\nexport class FloatClass extends PrimitiveType<number> {\n  constructor(private _bits: number) {\n    super();\n    if (_bits !== 32 && _bits !== 64) {\n      throw new Error('not a valid float type');\n    }\n  }\n  public accept<D, R>(v: Visitor<D, R>, d: D): R {\n    return v.visitFloat(this, d);\n  }\n\n  public covariant(x: any): x is number {\n    if (typeof x === 'number' || x instanceof Number) return true;\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n\n  public encodeValue(x: number) {\n    const buf = new ArrayBuffer(this._bits / 8);\n    const view = new DataView(buf);\n    if (this._bits === 32) {\n      view.setFloat32(0, x, true);\n    } else {\n      view.setFloat64(0, x, true);\n    }\n    return buf;\n  }\n\n  public encodeType() {\n    const opcode = this._bits === 32 ? IDLTypeIds.Float32 : IDLTypeIds.Float64;\n    return slebEncode(opcode);\n  }\n\n  public decodeValue(b: Pipe, t: Type) {\n    this.checkType(t);\n    const bytes = safeRead(b, this._bits / 8);\n    const view = new DataView(bytes);\n    if (this._bits === 32) {\n      return view.getFloat32(0, true);\n    } else {\n      return view.getFloat64(0, true);\n    }\n  }\n\n  get name() {\n    return 'float' + this._bits;\n  }\n\n  public valueToString(x: number) {\n    return x.toString();\n  }\n}\n\n/**\n * Represents an IDL fixed-width Int(n)\n */\nexport class FixedIntClass extends PrimitiveType<bigint | number> {\n  constructor(public readonly _bits: number) {\n    super();\n  }\n\n  public accept<D, R>(v: Visitor<D, R>, d: D): R {\n    return v.visitFixedInt(this, d);\n  }\n\n  public covariant(x: any): x is bigint {\n    const min = iexp2(this._bits - 1) * BigInt(-1);\n    const max = iexp2(this._bits - 1) - BigInt(1);\n    let ok = false;\n    if (typeof x === 'bigint') {\n      ok = x >= min && x <= max;\n    } else if (Number.isInteger(x)) {\n      const v = BigInt(x);\n      ok = v >= min && v <= max;\n    } else {\n      ok = false;\n    }\n\n    if (ok) return true;\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n\n  public encodeValue(x: bigint | number) {\n    return writeIntLE(x, this._bits / 8);\n  }\n\n  public encodeType() {\n    const offset = Math.log2(this._bits) - 3;\n    return slebEncode(-9 - offset);\n  }\n\n  public decodeValue(b: Pipe, t: Type) {\n    this.checkType(t);\n    const num = readIntLE(b, this._bits / 8);\n    if (this._bits <= 32) {\n      return Number(num);\n    } else {\n      return num;\n    }\n  }\n\n  get name() {\n    return `int${this._bits}`;\n  }\n\n  public valueToString(x: bigint | number) {\n    return x.toString();\n  }\n}\n\n/**\n * Represents an IDL fixed-width Nat(n)\n */\nexport class FixedNatClass extends PrimitiveType<bigint | number> {\n  constructor(public readonly _bits: number) {\n    super();\n  }\n\n  public accept<D, R>(v: Visitor<D, R>, d: D): R {\n    return v.visitFixedNat(this, d);\n  }\n\n  public covariant(x: any): x is bigint {\n    const max = iexp2(this._bits);\n    let ok = false;\n    if (typeof x === 'bigint' && x >= BigInt(0)) {\n      ok = x < max;\n    } else if (Number.isInteger(x) && x >= 0) {\n      const v = BigInt(x);\n      ok = v < max;\n    } else {\n      ok = false;\n    }\n    if (ok) return true;\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n\n  public encodeValue(x: bigint | number) {\n    return writeUIntLE(x, this._bits / 8);\n  }\n\n  public encodeType() {\n    const offset = Math.log2(this._bits) - 3;\n    return slebEncode(-5 - offset);\n  }\n\n  public decodeValue(b: Pipe, t: Type) {\n    this.checkType(t);\n    const num = readUIntLE(b, this._bits / 8);\n    if (this._bits <= 32) {\n      return Number(num);\n    } else {\n      return num;\n    }\n  }\n\n  get name() {\n    return `nat${this._bits}`;\n  }\n\n  public valueToString(x: bigint | number) {\n    return x.toString();\n  }\n}\n\n/**\n * Represents an IDL Array\n *\n * Arrays of fixed-sized nat/int type (e.g. nat8), are encoded from and decoded to TypedArrays (e.g. Uint8Array).\n * Arrays of float or other non-primitive types are encoded/decoded as untyped array in Javascript.\n * @param {Type} t\n */\nexport class VecClass<T> extends ConstructType<T[]> {\n  // If true, this vector is really a blob and we can just use memcpy.\n  //\n  // NOTE:\n  // With support of encoding/dencoding of TypedArrays, this optimization is\n  // only used when plain array of bytes are passed as encoding input in order\n  // to be backward compatible.\n  private _blobOptimization = false;\n\n  constructor(protected _type: Type<T>) {\n    super();\n    if (_type instanceof FixedNatClass && _type._bits === 8) {\n      this._blobOptimization = true;\n    }\n  }\n\n  public accept<D, R>(v: Visitor<D, R>, d: D): R {\n    return v.visitVec(this, this._type, d);\n  }\n\n  public covariant(x: any): x is T[] {\n    // Special case for ArrayBuffer\n    const bits =\n      this._type instanceof FixedNatClass\n        ? this._type._bits\n        : this._type instanceof FixedIntClass\n        ? this._type._bits\n        : 0;\n\n    if (\n      (ArrayBuffer.isView(x) && bits == (x as any).BYTES_PER_ELEMENT * 8) ||\n      (Array.isArray(x) &&\n        x.every((v, idx) => {\n          try {\n            return this._type.covariant(v);\n          } catch (e: any) {\n            throw new Error(`Invalid ${this.display()} argument: \\n\\nindex ${idx} -> ${e.message}`);\n          }\n        }))\n    )\n      return true;\n\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n\n  public encodeValue(x: T[]) {\n    const len = lebEncode(x.length);\n    if (this._blobOptimization) {\n      return concat(len, new Uint8Array(x as unknown as number[]));\n    }\n    if (ArrayBuffer.isView(x)) {\n      return concat(len, new Uint8Array(x.buffer));\n    }\n    const buf = new Pipe(new ArrayBuffer(len.byteLength + x.length), 0);\n    buf.write(len);\n    for (const d of x) {\n      const encoded = this._type.encodeValue(d);\n      buf.write(new Uint8Array(encoded));\n    }\n    return buf.buffer;\n  }\n\n  public _buildTypeTableImpl(typeTable: TypeTable) {\n    this._type.buildTypeTable(typeTable);\n\n    const opCode = slebEncode(IDLTypeIds.Vector);\n    const buffer = this._type.encodeType(typeTable);\n    typeTable.add(this, concat(opCode, buffer));\n  }\n\n  public decodeValue(b: Pipe, t: Type): T[] {\n    const vec = this.checkType(t);\n    if (!(vec instanceof VecClass)) {\n      throw new Error('Not a vector type');\n    }\n    const len = Number(lebDecode(b));\n\n    if (this._type instanceof FixedNatClass) {\n      if (this._type._bits == 8) {\n        return new Uint8Array(b.read(len)) as unknown as T[];\n      }\n      if (this._type._bits == 16) {\n        return new Uint16Array(b.read(len * 2)) as unknown as T[];\n      }\n      if (this._type._bits == 32) {\n        return new Uint32Array(b.read(len * 4)) as unknown as T[];\n      }\n      if (this._type._bits == 64) {\n        return new BigUint64Array(b.read(len * 8)) as unknown as T[];\n      }\n    }\n\n    if (this._type instanceof FixedIntClass) {\n      if (this._type._bits == 8) {\n        return new Int8Array(b.read(len)) as unknown as T[];\n      }\n      if (this._type._bits == 16) {\n        return new Int16Array(b.read(len * 2)) as unknown as T[];\n      }\n      if (this._type._bits == 32) {\n        return new Int32Array(b.read(len * 4)) as unknown as T[];\n      }\n      if (this._type._bits == 64) {\n        return new BigInt64Array(b.read(len * 8)) as unknown as T[];\n      }\n    }\n\n    const rets: T[] = [];\n    for (let i = 0; i < len; i++) {\n      rets.push(this._type.decodeValue(b, vec._type));\n    }\n    return rets;\n  }\n\n  get name() {\n    return `vec ${this._type.name}`;\n  }\n\n  public display() {\n    return `vec ${this._type.display()}`;\n  }\n\n  public valueToString(x: T[]) {\n    const elements = x.map(e => this._type.valueToString(e));\n    return 'vec {' + elements.join('; ') + '}';\n  }\n}\n\n/**\n * Represents an IDL Option\n * @param {Type} t\n */\nexport class OptClass<T> extends ConstructType<[T] | []> {\n  constructor(protected _type: Type<T>) {\n    super();\n  }\n\n  public accept<D, R>(v: Visitor<D, R>, d: D): R {\n    return v.visitOpt(this, this._type, d);\n  }\n\n  public covariant(x: any): x is [T] | [] {\n    try {\n      if (Array.isArray(x) && (x.length === 0 || (x.length === 1 && this._type.covariant(x[0]))))\n        return true;\n    } catch (e: any) {\n      throw new Error(\n        `Invalid ${this.display()} argument: ${toReadableString(x)} \\n\\n-> ${e.message}`,\n      );\n    }\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n\n  public encodeValue(x: [T] | []) {\n    if (x.length === 0) {\n      return new Uint8Array([0]);\n    } else {\n      return concat(new Uint8Array([1]), this._type.encodeValue(x[0]));\n    }\n  }\n\n  public _buildTypeTableImpl(typeTable: TypeTable) {\n    this._type.buildTypeTable(typeTable);\n\n    const opCode = slebEncode(IDLTypeIds.Opt);\n    const buffer = this._type.encodeType(typeTable);\n    typeTable.add(this, concat(opCode, buffer));\n  }\n\n  public decodeValue(b: Pipe, t: Type): [T] | [] {\n    const opt = this.checkType(t);\n    if (!(opt instanceof OptClass)) {\n      throw new Error('Not an option type');\n    }\n    switch (safeReadUint8(b)) {\n      case 0:\n        return [];\n      case 1:\n        return [this._type.decodeValue(b, opt._type)];\n      default:\n        throw new Error('Not an option value');\n    }\n  }\n\n  get name() {\n    return `opt ${this._type.name}`;\n  }\n\n  public display() {\n    return `opt ${this._type.display()}`;\n  }\n\n  public valueToString(x: [T] | []) {\n    if (x.length === 0) {\n      return 'null';\n    } else {\n      return `opt ${this._type.valueToString(x[0])}`;\n    }\n  }\n}\n\n/**\n * Represents an IDL Record\n * @param {object} [fields] - mapping of function name to Type\n */\nexport class RecordClass extends ConstructType<Record<string, any>> {\n  protected readonly _fields: Array<[string, Type]>;\n\n  constructor(fields: Record<string, Type> = {}) {\n    super();\n    this._fields = Object.entries(fields).sort((a, b) => idlLabelToId(a[0]) - idlLabelToId(b[0]));\n  }\n\n  public accept<D, R>(v: Visitor<D, R>, d: D): R {\n    return v.visitRecord(this, this._fields, d);\n  }\n\n  public tryAsTuple(): Type[] | null {\n    const res: Type[] = [];\n    for (let i = 0; i < this._fields.length; i++) {\n      const [key, type] = this._fields[i];\n      if (key !== `_${i}_`) {\n        return null;\n      }\n      res.push(type);\n    }\n    return res;\n  }\n\n  public covariant(x: any): x is Record<string, any> {\n    if (\n      typeof x === 'object' &&\n      this._fields.every(([k, t]) => {\n        // eslint-disable-next-line\n        if (!x.hasOwnProperty(k)) {\n          throw new Error(`Record is missing key \"${k}\".`);\n        }\n        try {\n          return t.covariant(x[k]);\n        } catch (e: any) {\n          throw new Error(`Invalid ${this.display()} argument: \\n\\nfield ${k} -> ${e.message}`);\n        }\n      })\n    )\n      return true;\n\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n\n  public encodeValue(x: Record<string, any>) {\n    const values = this._fields.map(([key]) => x[key]);\n    const bufs = zipWith(this._fields, values, ([, c], d) => c.encodeValue(d));\n    return concat(...bufs);\n  }\n\n  public _buildTypeTableImpl(T: TypeTable) {\n    this._fields.forEach(([_, value]) => value.buildTypeTable(T));\n    const opCode = slebEncode(IDLTypeIds.Record);\n    const len = lebEncode(this._fields.length);\n    const fields = this._fields.map(([key, value]) =>\n      concat(lebEncode(idlLabelToId(key)), value.encodeType(T)),\n    );\n\n    T.add(this, concat(opCode, len, concat(...fields)));\n  }\n\n  public decodeValue(b: Pipe, t: Type) {\n    const record = this.checkType(t);\n    if (!(record instanceof RecordClass)) {\n      throw new Error('Not a record type');\n    }\n    const x: Record<string, any> = {};\n\n    let expectedRecordIdx = 0;\n    let actualRecordIdx = 0;\n    while (actualRecordIdx < record._fields.length) {\n      const [hash, type] = record._fields[actualRecordIdx];\n\n      if (expectedRecordIdx >= this._fields.length) {\n        // skip unexpected left over fields present on the wire\n        type.decodeValue(b, type);\n        actualRecordIdx++;\n        continue;\n      }\n\n      const [expectKey, expectType] = this._fields[expectedRecordIdx];\n      const expectedId = idlLabelToId(this._fields[expectedRecordIdx][0]);\n      const actualId = idlLabelToId(hash);\n      if (expectedId === actualId) {\n        // the current field on the wire matches the expected field\n        x[expectKey] = expectType.decodeValue(b, type);\n        expectedRecordIdx++;\n        actualRecordIdx++;\n      } else if (actualId > expectedId) {\n        // The expected field does not exist on the wire\n        if (expectType instanceof OptClass || expectType instanceof ReservedClass) {\n          x[expectKey] = [];\n          expectedRecordIdx++;\n        } else {\n          throw new Error('Cannot find required field ' + expectKey);\n        }\n      } else {\n        // The field on the wire does not exist in the output type, so we can skip it\n        type.decodeValue(b, type);\n        actualRecordIdx++;\n      }\n    }\n\n    // initialize left over expected optional fields\n    for (const [expectKey, expectType] of this._fields.slice(expectedRecordIdx)) {\n      if (expectType instanceof OptClass || expectType instanceof ReservedClass) {\n        // TODO this assumes null value in opt is represented as []\n        x[expectKey] = [];\n      } else {\n        throw new Error('Cannot find required field ' + expectKey);\n      }\n    }\n    return x;\n  }\n\n  get name() {\n    const fields = this._fields.map(([key, value]) => key + ':' + value.name);\n    return `record {${fields.join('; ')}}`;\n  }\n\n  public display() {\n    const fields = this._fields.map(([key, value]) => key + ':' + value.display());\n    return `record {${fields.join('; ')}}`;\n  }\n\n  public valueToString(x: Record<string, any>) {\n    const values = this._fields.map(([key]) => x[key]);\n    const fields = zipWith(this._fields, values, ([k, c], d) => k + '=' + c.valueToString(d));\n    return `record {${fields.join('; ')}}`;\n  }\n}\n\n/**\n * Represents Tuple, a syntactic sugar for Record.\n * @param {Type} components\n */\nexport class TupleClass<T extends any[]> extends RecordClass {\n  protected readonly _components: Type[];\n\n  constructor(_components: Type[]) {\n    const x: Record<string, any> = {};\n    _components.forEach((e, i) => (x['_' + i + '_'] = e));\n    super(x);\n    this._components = _components;\n  }\n\n  public accept<D, R>(v: Visitor<D, R>, d: D): R {\n    return v.visitTuple(this, this._components, d);\n  }\n\n  public covariant(x: any): x is T {\n    // `>=` because tuples can be covariant when encoded.\n\n    if (\n      Array.isArray(x) &&\n      x.length >= this._fields.length &&\n      this._components.every((t, i) => {\n        try {\n          return t.covariant(x[i]);\n        } catch (e: any) {\n          throw new Error(`Invalid ${this.display()} argument: \\n\\nindex ${i} -> ${e.message}`);\n        }\n      })\n    )\n      return true;\n\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n\n  public encodeValue(x: any[]) {\n    const bufs = zipWith(this._components, x, (c, d) => c.encodeValue(d));\n    return concat(...bufs);\n  }\n\n  public decodeValue(b: Pipe, t: Type): T {\n    const tuple = this.checkType(t);\n    if (!(tuple instanceof TupleClass)) {\n      throw new Error('not a tuple type');\n    }\n    if (tuple._components.length < this._components.length) {\n      throw new Error('tuple mismatch');\n    }\n    const res = [];\n    for (const [i, wireType] of tuple._components.entries()) {\n      if (i >= this._components.length) {\n        // skip value\n        wireType.decodeValue(b, wireType);\n      } else {\n        res.push(this._components[i].decodeValue(b, wireType));\n      }\n    }\n    return res as T;\n  }\n\n  public display() {\n    const fields = this._components.map(value => value.display());\n    return `record {${fields.join('; ')}}`;\n  }\n\n  public valueToString(values: any[]) {\n    const fields = zipWith(this._components, values, (c, d) => c.valueToString(d));\n    return `record {${fields.join('; ')}}`;\n  }\n}\n\n/**\n * Represents an IDL Variant\n * @param {object} [fields] - mapping of function name to Type\n */\nexport class VariantClass extends ConstructType<Record<string, any>> {\n  private readonly _fields: Array<[string, Type]>;\n\n  constructor(fields: Record<string, Type> = {}) {\n    super();\n    this._fields = Object.entries(fields).sort((a, b) => idlLabelToId(a[0]) - idlLabelToId(b[0]));\n  }\n\n  public accept<D, R>(v: Visitor<D, R>, d: D): R {\n    return v.visitVariant(this, this._fields, d);\n  }\n\n  public covariant(x: any): x is Record<string, any> {\n    if (\n      typeof x === 'object' &&\n      Object.entries(x).length === 1 &&\n      this._fields.every(([k, v]) => {\n        try {\n          // eslint-disable-next-line\n          return !x.hasOwnProperty(k) || v.covariant(x[k]);\n        } catch (e: any) {\n          throw new Error(`Invalid ${this.display()} argument: \\n\\nvariant ${k} -> ${e.message}`);\n        }\n      })\n    )\n      return true;\n\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n\n  public encodeValue(x: Record<string, any>) {\n    for (let i = 0; i < this._fields.length; i++) {\n      const [name, type] = this._fields[i];\n      // eslint-disable-next-line\n      if (x.hasOwnProperty(name)) {\n        const idx = lebEncode(i);\n        const buf = type.encodeValue(x[name]);\n\n        return concat(idx, buf);\n      }\n    }\n    throw Error('Variant has no data: ' + x);\n  }\n\n  public _buildTypeTableImpl(typeTable: TypeTable) {\n    this._fields.forEach(([, type]) => {\n      type.buildTypeTable(typeTable);\n    });\n    const opCode = slebEncode(IDLTypeIds.Variant);\n    const len = lebEncode(this._fields.length);\n    const fields = this._fields.map(([key, value]) =>\n      concat(lebEncode(idlLabelToId(key)), value.encodeType(typeTable)),\n    );\n    typeTable.add(this, concat(opCode, len, ...fields));\n  }\n\n  public decodeValue(b: Pipe, t: Type) {\n    const variant = this.checkType(t);\n    if (!(variant instanceof VariantClass)) {\n      throw new Error('Not a variant type');\n    }\n    const idx = Number(lebDecode(b));\n    if (idx >= variant._fields.length) {\n      throw Error('Invalid variant index: ' + idx);\n    }\n    const [wireHash, wireType] = variant._fields[idx];\n    for (const [key, expectType] of this._fields) {\n      if (idlLabelToId(wireHash) === idlLabelToId(key)) {\n        const value = expectType.decodeValue(b, wireType);\n        return { [key]: value };\n      }\n    }\n    throw new Error('Cannot find field hash ' + wireHash);\n  }\n\n  get name() {\n    const fields = this._fields.map(([key, type]) => key + ':' + type.name);\n    return `variant {${fields.join('; ')}}`;\n  }\n\n  public display() {\n    const fields = this._fields.map(\n      ([key, type]) => key + (type.name === 'null' ? '' : `:${type.display()}`),\n    );\n    return `variant {${fields.join('; ')}}`;\n  }\n\n  public valueToString(x: Record<string, any>) {\n    for (const [name, type] of this._fields) {\n      // eslint-disable-next-line\n      if (x.hasOwnProperty(name)) {\n        const value = type.valueToString(x[name]);\n        if (value === 'null') {\n          return `variant {${name}}`;\n        } else {\n          return `variant {${name}=${value}}`;\n        }\n      }\n    }\n    throw new Error('Variant has no data: ' + x);\n  }\n}\n\n/**\n * Represents a reference to an IDL type, used for defining recursive data\n * types.\n */\nexport class RecClass<T = any> extends ConstructType<T> {\n  private static _counter = 0;\n  private _id = RecClass._counter++;\n  private _type: ConstructType<T> | undefined = undefined;\n\n  public accept<D, R>(v: Visitor<D, R>, d: D): R {\n    if (!this._type) {\n      throw Error('Recursive type uninitialized.');\n    }\n    return v.visitRec(this, this._type, d);\n  }\n\n  public fill(t: ConstructType<T>) {\n    this._type = t;\n  }\n\n  public getType() {\n    return this._type;\n  }\n\n  public covariant(x: any): x is T {\n    if (this._type ? this._type.covariant(x) : false) return true;\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n\n  public encodeValue(x: T) {\n    if (!this._type) {\n      throw Error('Recursive type uninitialized.');\n    }\n    return this._type.encodeValue(x);\n  }\n\n  public _buildTypeTableImpl(typeTable: TypeTable) {\n    if (!this._type) {\n      throw Error('Recursive type uninitialized.');\n    }\n    typeTable.add(this, new Uint8Array([]));\n    this._type.buildTypeTable(typeTable);\n    typeTable.merge(this, this._type.name);\n  }\n\n  public decodeValue(b: Pipe, t: Type) {\n    if (!this._type) {\n      throw Error('Recursive type uninitialized.');\n    }\n    return this._type.decodeValue(b, t);\n  }\n\n  get name() {\n    return `rec_${this._id}`;\n  }\n\n  public display() {\n    if (!this._type) {\n      throw Error('Recursive type uninitialized.');\n    }\n    return `μ${this.name}.${this._type.name}`;\n  }\n\n  public valueToString(x: T) {\n    if (!this._type) {\n      throw Error('Recursive type uninitialized.');\n    }\n    return this._type.valueToString(x);\n  }\n}\n\nfunction decodePrincipalId(b: Pipe): PrincipalId {\n  const x = safeReadUint8(b);\n  if (x !== 1) {\n    throw new Error('Cannot decode principal');\n  }\n\n  const len = Number(lebDecode(b));\n  return PrincipalId.fromUint8Array(new Uint8Array(safeRead(b, len)));\n}\n\n/**\n * Represents an IDL principal reference\n */\nexport class PrincipalClass extends PrimitiveType<PrincipalId> {\n  public accept<D, R>(v: Visitor<D, R>, d: D): R {\n    return v.visitPrincipal(this, d);\n  }\n\n  public covariant(x: any): x is PrincipalId {\n    if (x && x._isPrincipal) return true;\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n\n  public encodeValue(x: PrincipalId): ArrayBuffer {\n    const buf = x.toUint8Array();\n    const len = lebEncode(buf.byteLength);\n    return concat(new Uint8Array([1]), len, buf);\n  }\n\n  public encodeType() {\n    return slebEncode(IDLTypeIds.Principal);\n  }\n\n  public decodeValue(b: Pipe, t: Type): PrincipalId {\n    this.checkType(t);\n    return decodePrincipalId(b);\n  }\n\n  get name() {\n    return 'principal';\n  }\n  public valueToString(x: PrincipalId) {\n    return `${this.name} \"${x.toText()}\"`;\n  }\n}\n\n/**\n * Represents an IDL function reference.\n * @param argTypes Argument types.\n * @param retTypes Return types.\n * @param annotations Function annotations.\n */\nexport class FuncClass extends ConstructType<[PrincipalId, string]> {\n  public static argsToString(types: Type[], v: any[]) {\n    if (types.length !== v.length) {\n      throw new Error('arity mismatch');\n    }\n    return '(' + types.map((t, i) => t.valueToString(v[i])).join(', ') + ')';\n  }\n\n  constructor(public argTypes: Type[], public retTypes: Type[], public annotations: string[] = []) {\n    super();\n  }\n\n  public accept<D, R>(v: Visitor<D, R>, d: D): R {\n    return v.visitFunc(this, d);\n  }\n  public covariant(x: any): x is [PrincipalId, string] {\n    if (Array.isArray(x) && x.length === 2 && x[0] && x[0]._isPrincipal && typeof x[1] === 'string')\n      return true;\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n\n  public encodeValue([principal, methodName]: [PrincipalId, string]) {\n    const buf = principal.toUint8Array();\n    const len = lebEncode(buf.byteLength);\n    const canister = concat(new Uint8Array([1]), len, buf);\n\n    const method = new TextEncoder().encode(methodName);\n    const methodLen = lebEncode(method.byteLength);\n    return concat(new Uint8Array([1]), canister, methodLen, method);\n  }\n\n  public _buildTypeTableImpl(T: TypeTable) {\n    this.argTypes.forEach(arg => arg.buildTypeTable(T));\n    this.retTypes.forEach(arg => arg.buildTypeTable(T));\n\n    const opCode = slebEncode(IDLTypeIds.Func);\n    const argLen = lebEncode(this.argTypes.length);\n    const args = concat(...this.argTypes.map(arg => arg.encodeType(T)));\n    const retLen = lebEncode(this.retTypes.length);\n    const rets = concat(...this.retTypes.map(arg => arg.encodeType(T)));\n    const annLen = lebEncode(this.annotations.length);\n    const anns = concat(...this.annotations.map(a => this.encodeAnnotation(a)));\n\n    T.add(this, concat(opCode, argLen, args, retLen, rets, annLen, anns));\n  }\n\n  public decodeValue(b: Pipe): [PrincipalId, string] {\n    const x = safeReadUint8(b);\n    if (x !== 1) {\n      throw new Error('Cannot decode function reference');\n    }\n    const canister = decodePrincipalId(b);\n\n    const mLen = Number(lebDecode(b));\n    const buf = safeRead(b, mLen);\n    const decoder = new TextDecoder('utf8', { fatal: true });\n    const method = decoder.decode(buf);\n\n    return [canister, method];\n  }\n\n  get name() {\n    const args = this.argTypes.map(arg => arg.name).join(', ');\n    const rets = this.retTypes.map(arg => arg.name).join(', ');\n    const annon = ' ' + this.annotations.join(' ');\n    return `(${args}) -> (${rets})${annon}`;\n  }\n\n  public valueToString([principal, str]: [PrincipalId, string]) {\n    return `func \"${principal.toText()}\".${str}`;\n  }\n\n  public display(): string {\n    const args = this.argTypes.map(arg => arg.display()).join(', ');\n    const rets = this.retTypes.map(arg => arg.display()).join(', ');\n    const annon = ' ' + this.annotations.join(' ');\n    return `(${args}) → (${rets})${annon}`;\n  }\n\n  private encodeAnnotation(ann: string): ArrayBuffer {\n    if (ann === 'query') {\n      return new Uint8Array([1]);\n    } else if (ann === 'oneway') {\n      return new Uint8Array([2]);\n    } else if (ann === 'composite_query') {\n      return new Uint8Array([3]);\n    } else {\n      throw new Error('Illegal function annotation');\n    }\n  }\n}\n\nexport class ServiceClass extends ConstructType<PrincipalId> {\n  public readonly _fields: Array<[string, FuncClass]>;\n  constructor(fields: Record<string, FuncClass>) {\n    super();\n    this._fields = Object.entries(fields).sort((a, b) => {\n      if (a[0] < b[0]) {\n        return -1;\n      }\n      if (a[0] > b[0]) {\n        return 1;\n      }\n      return 0;\n    });\n  }\n  public accept<D, R>(v: Visitor<D, R>, d: D): R {\n    return v.visitService(this, d);\n  }\n  public covariant(x: any): x is PrincipalId {\n    if (x && x._isPrincipal) return true;\n    throw new Error(`Invalid ${this.display()} argument: ${toReadableString(x)}`);\n  }\n\n  public encodeValue(x: PrincipalId) {\n    const buf = x.toUint8Array();\n    const len = lebEncode(buf.length);\n    return concat(new Uint8Array([1]), len, buf);\n  }\n\n  public _buildTypeTableImpl(T: TypeTable) {\n    this._fields.forEach(([_, func]) => func.buildTypeTable(T));\n    const opCode = slebEncode(IDLTypeIds.Service);\n    const len = lebEncode(this._fields.length);\n    const meths = this._fields.map(([label, func]) => {\n      const labelBuf = new TextEncoder().encode(label);\n      const labelLen = lebEncode(labelBuf.length);\n      return concat(labelLen, labelBuf, func.encodeType(T));\n    });\n\n    T.add(this, concat(opCode, len, ...meths));\n  }\n\n  public decodeValue(b: Pipe): PrincipalId {\n    return decodePrincipalId(b);\n  }\n  get name() {\n    const fields = this._fields.map(([key, value]) => key + ':' + value.name);\n    return `service {${fields.join('; ')}}`;\n  }\n\n  public valueToString(x: PrincipalId) {\n    return `service \"${x.toText()}\"`;\n  }\n}\n\n/**\n * Takes an unknown value and returns a string representation of it.\n * @param x - unknown value\n * @returns {string} string representation of the value\n */\nfunction toReadableString(x: unknown): string {\n  const str = JSON.stringify(x, (_key, value) =>\n    typeof value === 'bigint' ? `BigInt(${value})` : value,\n  );\n\n  return str && str.length > toReadableString_max\n    ? str.substring(0, toReadableString_max - 3) + '...'\n    : str;\n}\n\n/**\n * Encode a array of values\n * @param argTypes - array of Types\n * @param args - array of values\n * @returns {ArrayBuffer} serialised value\n */\nexport function encode(argTypes: Array<Type<any>>, args: any[]): ArrayBuffer {\n  if (args.length < argTypes.length) {\n    throw Error('Wrong number of message arguments');\n  }\n\n  const typeTable = new TypeTable();\n  argTypes.forEach(t => t.buildTypeTable(typeTable));\n\n  const magic = new TextEncoder().encode(magicNumber);\n  const table = typeTable.encode();\n  const len = lebEncode(args.length);\n  const typs = concat(...argTypes.map(t => t.encodeType(typeTable)));\n  const vals = concat(\n    ...zipWith(argTypes, args, (t, x) => {\n      try {\n        t.covariant(x);\n      } catch (e: any) {\n        const err = new Error(e.message + '\\n\\n');\n        throw err;\n      }\n\n      return t.encodeValue(x);\n    }),\n  );\n\n  return concat(magic, table, len, typs, vals);\n}\n\n/**\n * Decode a binary value\n * @param retTypes - Types expected in the buffer.\n * @param bytes - hex-encoded string, or buffer.\n * @returns Value deserialised to JS type\n */\nexport function decode(retTypes: Type[], bytes: ArrayBuffer): JsonValue[] {\n  const b = new Pipe(bytes);\n\n  if (bytes.byteLength < magicNumber.length) {\n    throw new Error('Message length smaller than magic number');\n  }\n  const magicBuffer = safeRead(b, magicNumber.length);\n  const magic = new TextDecoder().decode(magicBuffer);\n  if (magic !== magicNumber) {\n    throw new Error('Wrong magic number: ' + JSON.stringify(magic));\n  }\n\n  function readTypeTable(pipe: Pipe): [Array<[IDLTypeIds, any]>, number[]] {\n    const typeTable: Array<[IDLTypeIds, any]> = [];\n    const len = Number(lebDecode(pipe));\n\n    for (let i = 0; i < len; i++) {\n      const ty = Number(slebDecode(pipe));\n      switch (ty) {\n        case IDLTypeIds.Opt:\n        case IDLTypeIds.Vector: {\n          const t = Number(slebDecode(pipe));\n          typeTable.push([ty, t]);\n          break;\n        }\n        case IDLTypeIds.Record:\n        case IDLTypeIds.Variant: {\n          const fields = [];\n          let objectLength = Number(lebDecode(pipe));\n          let prevHash;\n          while (objectLength--) {\n            const hash = Number(lebDecode(pipe));\n            if (hash >= Math.pow(2, 32)) {\n              throw new Error('field id out of 32-bit range');\n            }\n            if (typeof prevHash === 'number' && prevHash >= hash) {\n              throw new Error('field id collision or not sorted');\n            }\n            prevHash = hash;\n            const t = Number(slebDecode(pipe));\n            fields.push([hash, t]);\n          }\n          typeTable.push([ty, fields]);\n          break;\n        }\n        case IDLTypeIds.Func: {\n          const args = [];\n          let argLength = Number(lebDecode(pipe));\n          while (argLength--) {\n            args.push(Number(slebDecode(pipe)));\n          }\n          const returnValues = [];\n          let returnValuesLength = Number(lebDecode(pipe));\n          while (returnValuesLength--) {\n            returnValues.push(Number(slebDecode(pipe)));\n          }\n          const annotations = [];\n          let annotationLength = Number(lebDecode(pipe));\n          while (annotationLength--) {\n            const annotation = Number(lebDecode(pipe));\n            switch (annotation) {\n              case 1: {\n                annotations.push('query');\n                break;\n              }\n              case 2: {\n                annotations.push('oneway');\n                break;\n              }\n              case 3: {\n                annotations.push('composite_query');\n                break;\n              }\n              default:\n                throw new Error('unknown annotation');\n            }\n          }\n          typeTable.push([ty, [args, returnValues, annotations]]);\n          break;\n        }\n        case IDLTypeIds.Service: {\n          let servLength = Number(lebDecode(pipe));\n          const methods = [];\n          while (servLength--) {\n            const nameLength = Number(lebDecode(pipe));\n            const funcName = new TextDecoder().decode(safeRead(pipe, nameLength));\n            const funcType = slebDecode(pipe);\n            methods.push([funcName, funcType]);\n          }\n          typeTable.push([ty, methods]);\n          break;\n        }\n        default:\n          throw new Error('Illegal op_code: ' + ty);\n      }\n    }\n\n    const rawList: number[] = [];\n    const length = Number(lebDecode(pipe));\n    for (let i = 0; i < length; i++) {\n      rawList.push(Number(slebDecode(pipe)));\n    }\n    return [typeTable, rawList];\n  }\n  const [rawTable, rawTypes] = readTypeTable(b);\n  if (rawTypes.length < retTypes.length) {\n    throw new Error('Wrong number of return values');\n  }\n\n  const table: RecClass[] = rawTable.map(_ => Rec());\n  function getType(t: number): Type {\n    if (t < -24) {\n      throw new Error('future value not supported');\n    }\n    if (t < 0) {\n      switch (t) {\n        case -1:\n          return Null;\n        case -2:\n          return Bool;\n        case -3:\n          return Nat;\n        case -4:\n          return Int;\n        case -5:\n          return Nat8;\n        case -6:\n          return Nat16;\n        case -7:\n          return Nat32;\n        case -8:\n          return Nat64;\n        case -9:\n          return Int8;\n        case -10:\n          return Int16;\n        case -11:\n          return Int32;\n        case -12:\n          return Int64;\n        case -13:\n          return Float32;\n        case -14:\n          return Float64;\n        case -15:\n          return Text;\n        case -16:\n          return Reserved;\n        case -17:\n          return Empty;\n        case -24:\n          return Principal;\n        default:\n          throw new Error('Illegal op_code: ' + t);\n      }\n    }\n    if (t >= rawTable.length) {\n      throw new Error('type index out of range');\n    }\n    return table[t];\n  }\n  function buildType(entry: [IDLTypeIds, any]): Type {\n    switch (entry[0]) {\n      case IDLTypeIds.Vector: {\n        const ty = getType(entry[1]);\n        return Vec(ty);\n      }\n      case IDLTypeIds.Opt: {\n        const ty = getType(entry[1]);\n        return Opt(ty);\n      }\n      case IDLTypeIds.Record: {\n        const fields: Record<string, Type> = {};\n        for (const [hash, ty] of entry[1]) {\n          const name = `_${hash}_`;\n          fields[name] = getType(ty);\n        }\n        const record = Record(fields);\n        const tuple = record.tryAsTuple();\n        if (Array.isArray(tuple)) {\n          return Tuple(...tuple);\n        } else {\n          return record;\n        }\n      }\n      case IDLTypeIds.Variant: {\n        const fields: Record<string, Type> = {};\n        for (const [hash, ty] of entry[1]) {\n          const name = `_${hash}_`;\n          fields[name] = getType(ty);\n        }\n        return Variant(fields);\n      }\n      case IDLTypeIds.Func: {\n        const [args, returnValues, annotations] = entry[1];\n        return Func(\n          args.map((t: number) => getType(t)),\n          returnValues.map((t: number) => getType(t)),\n          annotations,\n        );\n      }\n      case IDLTypeIds.Service: {\n        const rec: Record<string, FuncClass> = {};\n        const methods = entry[1] as [[string, number]];\n        for (const [name, typeRef] of methods) {\n          let type: Type | undefined = getType(typeRef);\n\n          if (type instanceof RecClass) {\n            // unpack reference type\n            type = type.getType();\n          }\n          if (!(type instanceof FuncClass)) {\n            throw new Error('Illegal service definition: services can only contain functions');\n          }\n          rec[name] = type;\n        }\n        return Service(rec);\n      }\n      default:\n        throw new Error('Illegal op_code: ' + entry[0]);\n    }\n  }\n\n  rawTable.forEach((entry, i) => {\n    // Process function type first, so that we can construct the correct service type\n    if (entry[0] === IDLTypeIds.Func) {\n      const t = buildType(entry);\n      table[i].fill(t);\n    }\n  });\n  rawTable.forEach((entry, i) => {\n    if (entry[0] !== IDLTypeIds.Func) {\n      const t = buildType(entry);\n      table[i].fill(t);\n    }\n  });\n\n  const types = rawTypes.map(t => getType(t));\n  const output = retTypes.map((t, i) => {\n    return t.decodeValue(b, types[i]);\n  });\n\n  // skip unused values\n  for (let ind = retTypes.length; ind < types.length; ind++) {\n    types[ind].decodeValue(b, types[ind]);\n  }\n\n  if (b.byteLength > 0) {\n    throw new Error('decode: Left-over bytes');\n  }\n\n  return output;\n}\n\n/**\n * An Interface Factory, normally provided by a Candid code generation.\n */\nexport type InterfaceFactory = (idl: {\n  IDL: {\n    Empty: EmptyClass;\n    Reserved: ReservedClass;\n    Unknown: UnknownClass;\n    Bool: BoolClass;\n    Null: NullClass;\n    Text: TextClass;\n    Int: IntClass;\n    Nat: NatClass;\n\n    Float32: FloatClass;\n    Float64: FloatClass;\n\n    Int8: FixedIntClass;\n    Int16: FixedIntClass;\n    Int32: FixedIntClass;\n    Int64: FixedIntClass;\n\n    Nat8: FixedNatClass;\n    Nat16: FixedNatClass;\n    Nat32: FixedNatClass;\n    Nat64: FixedNatClass;\n\n    Principal: PrincipalClass;\n\n    Tuple: typeof Tuple;\n    Vec: typeof Vec;\n    Opt: typeof Opt;\n    Record: typeof Record;\n    Variant: typeof Variant;\n    Rec: typeof Rec;\n    Func: typeof Func;\n\n    Service(t: Record<string, FuncClass>): ServiceClass;\n  };\n}) => ServiceClass;\n\n// Export Types instances.\nexport const Empty = new EmptyClass();\nexport const Reserved = new ReservedClass();\n/**\n * Client-only type for deserializing unknown data. Not supported by Candid, and its use is discouraged.\n */\nexport const Unknown = new UnknownClass();\nexport const Bool = new BoolClass();\nexport const Null = new NullClass();\nexport const Text = new TextClass();\nexport const Int = new IntClass();\nexport const Nat = new NatClass();\n\nexport const Float32 = new FloatClass(32);\nexport const Float64 = new FloatClass(64);\n\nexport const Int8 = new FixedIntClass(8);\nexport const Int16 = new FixedIntClass(16);\nexport const Int32 = new FixedIntClass(32);\nexport const Int64 = new FixedIntClass(64);\n\nexport const Nat8 = new FixedNatClass(8);\nexport const Nat16 = new FixedNatClass(16);\nexport const Nat32 = new FixedNatClass(32);\nexport const Nat64 = new FixedNatClass(64);\n\nexport const Principal = new PrincipalClass();\n\n/**\n *\n * @param types array of any types\n * @returns TupleClass from those types\n */\nexport function Tuple<T extends any[]>(...types: T): TupleClass<T> {\n  return new TupleClass(types);\n}\n/**\n *\n * @param t IDL Type\n * @returns VecClass from that type\n */\nexport function Vec<T>(t: Type<T>): VecClass<T> {\n  return new VecClass(t);\n}\n/**\n *\n * @param t IDL Type\n * @returns OptClass of Type\n */\nexport function Opt<T>(t: Type<T>): OptClass<T> {\n  return new OptClass(t);\n}\n/**\n *\n * @param t Record of string and IDL Type\n * @returns RecordClass of string and Type\n */\nexport function Record(t: Record<string, Type>): RecordClass {\n  return new RecordClass(t);\n}\n\n/**\n *\n * @param fields Record of string and IDL Type\n * @returns VariantClass\n */\nexport function Variant(fields: Record<string, Type>): VariantClass {\n  return new VariantClass(fields);\n}\n/**\n *\n * @returns new RecClass\n */\nexport function Rec(): RecClass {\n  return new RecClass();\n}\n\n/**\n *\n * @param args array of IDL Types\n * @param ret array of IDL Types\n * @param annotations array of strings, [] by default\n * @returns new FuncClass\n */\nexport function Func(args: Type[], ret: Type[], annotations: string[] = []): FuncClass {\n  return new FuncClass(args, ret, annotations);\n}\n\n/**\n *\n * @param t Record of string and FuncClass\n * @returns ServiceClass\n */\nexport function Service(t: Record<string, FuncClass>): ServiceClass {\n  return new ServiceClass(t);\n}\n", "/**\n * Concatenate multiple array buffers.\n * @param buffers The buffers to concatenate.\n */\nexport function concat(...buffers: ArrayBuffer[]): ArrayBuffer {\n  const result = new Uint8Array(buffers.reduce((acc, curr) => acc + curr.byteLength, 0));\n  let index = 0;\n  for (const b of buffers) {\n    result.set(new Uint8Array(b), index);\n    index += b.byteLength;\n  }\n  return result;\n}\n\n/**\n * Returns an hexadecimal representation of an array buffer.\n * @param bytes The array buffer.\n */\nexport function toHexString(bytes: ArrayBuffer): string {\n  return new Uint8Array(bytes).reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');\n}\n\n/**\n * Return an array buffer from its hexadecimal representation.\n * @param hexString The hexadecimal string.\n */\nexport function fromHexString(hexString: string): ArrayBuffer {\n  return new Uint8Array((hexString.match(/.{1,2}/g) ?? []).map(byte => parseInt(byte, 16)));\n}\n\n/**\n * A class that abstracts a pipe-like ArrayBuffer.\n */\nexport class PipeArrayBuffer {\n  /**\n   * The reading view. It's a sliding window as we read and write, pointing to the buffer.\n   * @private\n   */\n  private _view: Uint8Array;\n\n  /**\n   * The actual buffer containing the bytes.\n   * @private\n   */\n  private _buffer: ArrayBuffer;\n\n  /**\n   * Creates a new instance of a pipe\n   * @param buffer an optional buffer to start with\n   * @param length an optional amount of bytes to use for the length.\n   */\n  constructor(buffer?: ArrayBuffer, length = buffer?.byteLength || 0) {\n    this._buffer = bufFromBufLike(buffer || new ArrayBuffer(0));\n    this._view = new Uint8Array(this._buffer, 0, length);\n  }\n\n  get buffer(): ArrayBuffer {\n    // Return a copy of the buffer.\n    return bufFromBufLike(this._view.slice());\n  }\n\n  get byteLength(): number {\n    return this._view.byteLength;\n  }\n\n  /**\n   * Read `num` number of bytes from the front of the pipe.\n   * @param num The number of bytes to read.\n   */\n  public read(num: number): ArrayBuffer {\n    const result = this._view.subarray(0, num);\n    this._view = this._view.subarray(num);\n    return result.slice().buffer;\n  }\n\n  public readUint8(): number | undefined {\n    const result = this._view[0];\n    this._view = this._view.subarray(1);\n    return result;\n  }\n\n  /**\n   * Write a buffer to the end of the pipe.\n   * @param buf The bytes to write.\n   */\n  public write(buf: ArrayBuffer): void {\n    const b = new Uint8Array(buf);\n    const offset = this._view.byteLength;\n    if (this._view.byteOffset + this._view.byteLength + b.byteLength >= this._buffer.byteLength) {\n      // Alloc grow the view to include the new bytes.\n      this.alloc(b.byteLength);\n    } else {\n      // Update the view to include the new bytes.\n      this._view = new Uint8Array(\n        this._buffer,\n        this._view.byteOffset,\n        this._view.byteLength + b.byteLength,\n      );\n    }\n\n    this._view.set(b, offset);\n  }\n\n  /**\n   * Whether or not there is more data to read from the buffer\n   */\n  public get end(): boolean {\n    return this._view.byteLength === 0;\n  }\n\n  /**\n   * Allocate a fixed amount of memory in the buffer. This does not affect the view.\n   * @param amount A number of bytes to add to the buffer.\n   */\n  public alloc(amount: number) {\n    // Add a little bit of exponential growth.\n    const b = new ArrayBuffer(((this._buffer.byteLength + amount) * 1.2) | 0);\n    const v = new Uint8Array(b, 0, this._view.byteLength + amount);\n    v.set(this._view);\n    this._buffer = b;\n    this._view = v;\n  }\n}\n\n/**\n * Returns a true ArrayBuffer from a Uint8Array, as Uint8Array.buffer is unsafe.\n * @param {Uint8Array} arr Uint8Array to convert\n * @returns ArrayBuffer\n */\nexport function uint8ToBuf(arr: Uint8Array): ArrayBuffer {\n  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength).buffer;\n}\n\n/**\n * Returns a true ArrayBuffer from an ArrayBufferLike object.\n * @param bufLike a buffer-like object\n * @returns ArrayBuffer\n */\nexport function bufFromBufLike(\n  bufLike:\n    | ArrayBuffer\n    | Uint8Array\n    | DataView\n    | ArrayBufferView\n    | ArrayBufferLike\n    | [number]\n    | number[]\n    | { buffer: ArrayBuffer },\n): ArrayBuffer {\n  if (bufLike instanceof Uint8Array) {\n    return uint8ToBuf(bufLike);\n  }\n  if (bufLike instanceof ArrayBuffer) {\n    return bufLike;\n  }\n  if (Array.isArray(bufLike)) {\n    return uint8ToBuf(new Uint8Array(bufLike));\n  }\n  if ('buffer' in bufLike) {\n    return bufFromBufLike(bufLike.buffer);\n  }\n  return uint8ToBuf(new Uint8Array(bufLike));\n}\n", "/**\n * Hashes a string to a number. Algorithm can be found here:\n * https://caml.inria.fr/pub/papers/garrigue-polymorphic_variants-ml98.pdf\n * @param s - string to hash\n * @returns number representing hashed string\n */\nfunction idlHash(s: string): number {\n  const utf8encoder = new TextEncoder();\n  const array = utf8encoder.encode(s);\n\n  let h = 0;\n  for (const c of array) {\n    h = (h * 223 + c) % 2 ** 32;\n  }\n  return h;\n}\n\n/**\n *\n * @param label string\n * @returns number representing hashed label\n */\nexport function idlLabelToId(label: string): number {\n  if (/^_\\d+_$/.test(label) || /^_0x[0-9a-fA-F]+_$/.test(label)) {\n    const num = +label.slice(1, -1);\n    if (Number.isSafeInteger(num) && num >= 0 && num < 2 ** 32) {\n      return num;\n    }\n  }\n  return idlHash(label);\n}\n", "/* eslint-disable no-constant-condition */\n// Note: this file uses buffer-pipe, which on Node only, uses the Node Buffer\n//       implementation, which isn't compatible with the NPM buffer package\n//       which we use everywhere else. This means that we have to transform\n//       one into the other, hence why every function that returns a Buffer\n//       actually return `new Buffer(pipe.buffer)`.\n// TODO: The best solution would be to have our own buffer type around\n//       Uint8Array which is standard.\nimport { PipeArrayBuffer as Pipe } from './buffer';\n\nfunction eob(): never {\n  throw new Error('unexpected end of buffer');\n}\n\n/**\n *\n * @param pipe Pipe from buffer-pipe\n * @param num number\n * @returns Buffer\n */\nexport function safeRead(pipe: Pipe, num: number): ArrayBuffer {\n  if (pipe.byteLength < num) {\n    eob();\n  }\n  return pipe.read(num);\n}\n\n/**\n * @param pipe - PipeArrayBuffer simulating buffer-pipe api\n */\nexport function safeReadUint8(pipe: Pipe): number {\n  const byte = pipe.readUint8();\n  if (byte === undefined) {\n    eob();\n  }\n  return byte;\n}\n\n/**\n * Encode a positive number (or bigint) into a Buffer. The number will be floored to the\n * nearest integer.\n * @param value The number to encode.\n */\nexport function lebEncode(value: bigint | number): ArrayBuffer {\n  if (typeof value === 'number') {\n    value = BigInt(value);\n  }\n\n  if (value < BigInt(0)) {\n    throw new Error('Cannot leb encode negative values.');\n  }\n\n  const byteLength = (value === BigInt(0) ? 0 : Math.ceil(Math.log2(Number(value)))) + 1;\n  const pipe = new Pipe(new ArrayBuffer(byteLength), 0);\n  while (true) {\n    const i = Number(value & BigInt(0x7f));\n    value /= BigInt(0x80);\n    if (value === BigInt(0)) {\n      pipe.write(new Uint8Array([i]));\n      break;\n    } else {\n      pipe.write(new Uint8Array([i | 0x80]));\n    }\n  }\n\n  return pipe.buffer;\n}\n\n/**\n * Decode a leb encoded buffer into a bigint. The number will always be positive (does not\n * support signed leb encoding).\n * @param pipe A Buffer containing the leb encoded bits.\n */\nexport function lebDecode(pipe: Pipe): bigint {\n  let weight = BigInt(1);\n  let value = BigInt(0);\n  let byte;\n\n  do {\n    byte = safeReadUint8(pipe);\n    value += BigInt(byte & 0x7f).valueOf() * weight;\n    weight *= BigInt(128);\n  } while (byte >= 0x80);\n\n  return value;\n}\n\n/**\n * Encode a number (or bigint) into a Buffer, with support for negative numbers. The number\n * will be floored to the nearest integer.\n * @param value The number to encode.\n */\nexport function slebEncode(value: bigint | number): ArrayBuffer {\n  if (typeof value === 'number') {\n    value = BigInt(value);\n  }\n\n  const isNeg = value < BigInt(0);\n  if (isNeg) {\n    value = -value - BigInt(1);\n  }\n  const byteLength = (value === BigInt(0) ? 0 : Math.ceil(Math.log2(Number(value)))) + 1;\n  const pipe = new Pipe(new ArrayBuffer(byteLength), 0);\n  while (true) {\n    const i = getLowerBytes(value);\n    value /= BigInt(0x80);\n\n    // prettier-ignore\n    if (   ( isNeg && value === BigInt(0) && (i & 0x40) !== 0)\n          || (!isNeg && value === BigInt(0) && (i & 0x40) === 0)) {\n        pipe.write(new Uint8Array([i]));\n        break;\n      } else {\n        pipe.write(new Uint8Array([i | 0x80]));\n      }\n  }\n\n  function getLowerBytes(num: bigint): number {\n    const bytes = num % BigInt(0x80);\n    if (isNeg) {\n      // We swap the bits here again, and remove 1 to do two's complement.\n      return Number(BigInt(0x80) - bytes - BigInt(1));\n    } else {\n      return Number(bytes);\n    }\n  }\n  return pipe.buffer;\n}\n\n/**\n * Decode a leb encoded buffer into a bigint. The number is decoded with support for negative\n * signed-leb encoding.\n * @param pipe A Buffer containing the signed leb encoded bits.\n */\nexport function slebDecode(pipe: Pipe): bigint {\n  // Get the size of the buffer, then cut a buffer of that size.\n  const pipeView = new Uint8Array(pipe.buffer);\n  let len = 0;\n  for (; len < pipeView.byteLength; len++) {\n    if (pipeView[len] < 0x80) {\n      // If it's a positive number, we reuse lebDecode.\n      if ((pipeView[len] & 0x40) === 0) {\n        return lebDecode(pipe);\n      }\n      break;\n    }\n  }\n\n  const bytes = new Uint8Array(safeRead(pipe, len + 1));\n  let value = BigInt(0);\n  for (let i = bytes.byteLength - 1; i >= 0; i--) {\n    value = value * BigInt(0x80) + BigInt(0x80 - (bytes[i] & 0x7f) - 1);\n  }\n  return -value - BigInt(1);\n}\n\n/**\n *\n * @param value bigint or number\n * @param byteLength number\n * @returns Buffer\n */\nexport function writeUIntLE(value: bigint | number, byteLength: number): ArrayBuffer {\n  if (BigInt(value) < BigInt(0)) {\n    throw new Error('Cannot write negative values.');\n  }\n  return writeIntLE(value, byteLength);\n}\n\n/**\n *\n * @param value - bigint or number\n * @param byteLength - number\n * @returns ArrayBuffer\n */\nexport function writeIntLE(value: bigint | number, byteLength: number): ArrayBuffer {\n  value = BigInt(value);\n\n  const pipe = new Pipe(new ArrayBuffer(Math.min(1, byteLength)), 0);\n  let i = 0;\n  let mul = BigInt(256);\n  let sub = BigInt(0);\n  let byte = Number(value % mul);\n  pipe.write(new Uint8Array([byte]));\n  while (++i < byteLength) {\n    if (value < 0 && sub === BigInt(0) && byte !== 0) {\n      sub = BigInt(1);\n    }\n    byte = Number((value / mul - sub) % BigInt(256));\n    pipe.write(new Uint8Array([byte]));\n    mul *= BigInt(256);\n  }\n\n  return pipe.buffer;\n}\n\n/**\n *\n * @param pipe Pipe from buffer-pipe\n * @param byteLength number\n * @returns bigint\n */\nexport function readUIntLE(pipe: Pipe, byteLength: number): bigint {\n  let val = BigInt(safeReadUint8(pipe));\n  let mul = BigInt(1);\n  let i = 0;\n  while (++i < byteLength) {\n    mul *= BigInt(256);\n    const byte = BigInt(safeReadUint8(pipe));\n    val = val + mul * byte;\n  }\n  return val;\n}\n\n/**\n *\n * @param pipe Pipe from buffer-pipe\n * @param byteLength number\n * @returns bigint\n */\nexport function readIntLE(pipe: Pipe, byteLength: number): bigint {\n  let val = readUIntLE(pipe, byteLength);\n  const mul = BigInt(2) ** (BigInt(8) * BigInt(byteLength - 1) + BigInt(7));\n  if (val >= mul) {\n    val -= mul * BigInt(2);\n  }\n  return val;\n}\n", "/**\n * Equivalent to `Math.log2(n)` with support for `BigInt` values\n * @param n bigint or integer\n * @returns integer\n */\nexport function ilog2(n: bigint | number): number {\n  const nBig = BigInt(n);\n  if (n <= 0) {\n    throw new RangeError('Input must be positive');\n  }\n  return nBig.toString(2).length - 1;\n}\n\n/**\n * Equivalent to `2 ** n` with support for `BigInt` values\n * (necessary for browser preprocessors which replace the `**` operator with `Math.pow`)\n * @param n bigint or integer\n * @returns bigint\n */\nexport function iexp2(n: bigint | number): bigint {\n  const nBig = BigInt(n);\n  if (n < 0) {\n    throw new RangeError('Input must be non-negative');\n  }\n  return BigInt(1) << nBig;\n}\n", "import { lebEncode } from '@dfinity/candid';\nimport { Principal } from '@dfinity/principal';\nimport borc from 'borc';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { compare, concat, uint8ToBuf } from './utils/buffer';\n\nexport type RequestId = ArrayBuffer & { __requestId__: void };\n\n/**\n * sha256 hash the provided Buffer\n * @param data - input to hash function\n */\nexport function hash(data: ArrayBuffer): ArrayBuffer {\n  return uint8ToBuf(sha256.create().update(new Uint8Array(data)).digest());\n}\n\ninterface ToHashable {\n  toHash(): unknown;\n}\n\n/**\n *\n * @param value unknown value\n * @returns ArrayBuffer\n */\nexport function hashValue(value: unknown): ArrayBuffer {\n  if (value instanceof borc.Tagged) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return hashValue((value as any).value);\n  } else if (typeof value === 'string') {\n    return hashString(value);\n  } else if (typeof value === 'number') {\n    return hash(lebEncode(value));\n  } else if (value instanceof ArrayBuffer || ArrayBuffer.isView(value)) {\n    return hash(value as ArrayBuffer);\n  } else if (Array.isArray(value)) {\n    const vals = value.map(hashValue);\n    return hash(concat(...vals));\n  } else if (value && typeof value === 'object' && (value as Principal)._isPrincipal) {\n    return hash((value as Principal).toUint8Array());\n  } else if (\n    typeof value === 'object' &&\n    value !== null &&\n    typeof (value as ToHashable).toHash === 'function'\n  ) {\n    return hashValue((value as ToHashable).toHash());\n    // TODO This should be move to a specific async method as the webauthn flow required\n    // the flow to be synchronous to ensure Safari touch id works.\n    // } else if (value instanceof Promise) {\n    //   return value.then(x => hashValue(x));\n  } else if (typeof value === 'object') {\n    return hashOfMap(value as Record<string, unknown>);\n  } else if (typeof value === 'bigint') {\n    // Do this check much later than the other bigint check because this one is much less\n    // type-safe.\n    // So we want to try all the high-assurance type guards before this 'probable' one.\n    return hash(lebEncode(value));\n  }\n  throw Object.assign(new Error(`Attempt to hash a value of unsupported type: ${value}`), {\n    // include so logs/callers can understand the confusing value.\n    // (when stringified in error message, prototype info is lost)\n    value,\n  });\n}\n\nconst hashString = (value: string): ArrayBuffer => {\n  const encoded = new TextEncoder().encode(value);\n  return hash(encoded);\n};\n\n/**\n * Get the RequestId of the provided ic-ref request.\n * RequestId is the result of the representation-independent-hash function.\n * https://sdk.dfinity.org/docs/interface-spec/index.html#hash-of-map\n * @param request - ic-ref request to hash into RequestId\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function requestIdOf(request: Record<string, any>): RequestId {\n  return hashOfMap(request) as RequestId;\n}\n\n/**\n * Hash a map into an ArrayBuffer using the representation-independent-hash function.\n * https://sdk.dfinity.org/docs/interface-spec/index.html#hash-of-map\n * @param map - Any non-nested object\n * @returns ArrayBuffer\n */\nexport function hashOfMap(map: Record<string, unknown>): ArrayBuffer {\n  const hashed: Array<[ArrayBuffer, ArrayBuffer]> = Object.entries(map)\n    .filter(([, value]) => value !== undefined)\n    .map(([key, value]: [string, unknown]) => {\n      const hashedKey = hashString(key);\n      const hashedValue = hashValue(value);\n\n      return [hashedKey, hashedValue] as [ArrayBuffer, ArrayBuffer];\n    });\n\n  const traversed: Array<[ArrayBuffer, ArrayBuffer]> = hashed;\n\n  const sorted: Array<[ArrayBuffer, ArrayBuffer]> = traversed.sort(([k1], [k2]) => {\n    return compare(k1, k2);\n  });\n\n  const concatenated: ArrayBuffer = concat(...sorted.map(x => concat(...x)));\n  const result = hash(concatenated);\n  return result;\n}\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nexport type Hex = Uint8Array | string; // hex strings are accepted for simplicity\nexport type PrivKey = Hex | bigint; // bigints are accepted to ease learning curve\nexport type CHash = {\n  (message: Uint8Array | string): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create(opts?: { dkLen?: number }): any; // For shake\n};\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\n\nexport function isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\nexport function abytes(item: unknown): void {\n  if (!isBytes(item)) throw new Error('Uint8Array expected');\n}\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\nexport function numberToHexUnpadded(num: number | bigint): string {\n  const hex = num.toString(16);\n  return hex.length & 1 ? `0${hex}` : hex;\n}\n\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  // Big Endian\n  return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 } as const;\nfunction asciiToBase16(char: number): number | undefined {\n  if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;\n  if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);\n  if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);\n  return;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2;\n  }\n  return array;\n}\n\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\n  abytes(bytes);\n  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\n\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\n  return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n: number | bigint, len: number): Uint8Array {\n  return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n: number | bigint): Uint8Array {\n  return hexToBytes(numberToHexUnpadded(n));\n}\n\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\n  let res: Uint8Array;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes(hex);\n    } catch (e) {\n      throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n    }\n  } else if (isBytes(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(`${title} must be hex string or Uint8Array`);\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength)\n    throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n  return res;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a: Uint8Array, b: Uint8Array) {\n  if (a.length !== b.length) return false;\n  let diff = 0;\n  for (let i = 0; i < a.length; i++) diff |= a[i] ^ b[i];\n  return diff === 0;\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n// Bit operations\n\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n: bigint) {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\n\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n: bigint, pos: number) {\n  return (n >> BigInt(pos)) & _1n;\n}\n\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n: bigint, pos: number, value: boolean) {\n  return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n: number) => (_2n << BigInt(n - 1)) - _1n;\n\n// DRBG\n\nconst u8n = (data?: any) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr: any) => Uint8Array.from(arr); // another shortcut\ntype Pred<T> = (v: Uint8Array) => T | undefined;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg<T>(\n  hashLen: number,\n  qByteLen: number,\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\n): (seed: Uint8Array, predicate: Pred<T>) => T {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n()) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out: Uint8Array[] = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes(...out);\n  };\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\n\n// Validating curves and fields\n\nconst validatorFns = {\n  bigint: (val: any) => typeof val === 'bigint',\n  function: (val: any) => typeof val === 'function',\n  boolean: (val: any) => typeof val === 'boolean',\n  string: (val: any) => typeof val === 'string',\n  stringOrUint8Array: (val: any) => typeof val === 'string' || isBytes(val),\n  isSafeInteger: (val: any) => Number.isSafeInteger(val),\n  array: (val: any) => Array.isArray(val),\n  field: (val: any, object: any) => (object as any).Fp.isValid(val),\n  hash: (val: any) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n} as const;\ntype Validator = keyof typeof validatorFns;\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\n\nexport function validateObject<T extends Record<string, any>>(\n  object: T,\n  validators: ValMap<T>,\n  optValidators: ValMap<T> = {}\n) {\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function')\n      throw new Error(`Invalid validator \"${type}\", expected function`);\n\n    const val = object[fieldName as keyof typeof object];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error(\n        `Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`\n      );\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\n  return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport {\n  bitMask,\n  numberToBytesBE,\n  numberToBytesLE,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  validateObject,\n} from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  if (modulo <= _0n || power < _0n) throw new Error('Expected power/modulo > 0');\n  if (modulo === _1n) return _0n;\n  let res = _1n;\n  while (power > _0n) {\n    if (power & _1n) res = (res * num) % modulo;\n    num = (num * num) % modulo;\n    power >>= _1n;\n  }\n  return res;\n}\n\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n// Inverses number over modulo\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n  }\n  // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P: bigint) {\n  // Legendre constant: used to calculate Legendre symbol (a | p),\n  // which denotes the value of a^((p-1)/2) (mod p).\n  // (a | p) \u2261 1    if a is a square (mod p)\n  // (a | p) \u2261 -1   if a is not a square (mod p)\n  // (a | p) \u2261 0    if a \u2261 0 (mod p)\n  const legendreC = (P - _1n) / _2n;\n\n  let Q: bigint, S: number, Z: bigint;\n  // Step 1: By factoring out powers of 2 from p - 1,\n  // find q and s such that p - 1 = q*(2^s) with q odd\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n\n  // Step 2: Select a non-square z such that (z | p) \u2261 -1 and set c \u2261 zq\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);\n\n  // Fast-path\n  if (S === 1) {\n    const p1div4 = (P + _1n) / _4n;\n    return function tonelliFast<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Slow-path\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    // Step 0: Check that n is indeed a square: (n | p) should not be \u2261 -1\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\n    let r = S;\n    // TODO: will fail at Fp2/etc\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\n\n    while (!Fp.eql(b, Fp.ONE)) {\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n      // Find m such b^(2^m)==1\n      let m = 1;\n      for (let t2 = Fp.sqr(b); m < r; m++) {\n        if (Fp.eql(t2, Fp.ONE)) break;\n        t2 = Fp.sqr(t2); // t2 *= t2\n      }\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n      g = Fp.sqr(ge); // g = ge * ge\n      x = Fp.mul(x, ge); // x *= ge\n      b = Fp.mul(b, g); // b *= g\n      r = m;\n    }\n    return x;\n  };\n}\n\nexport function FpSqrt(P: bigint) {\n  // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n  // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n\n  // P \u2261 3 (mod 4)\n  // \u221An = n^((P+1)/4)\n  if (P % _4n === _3n) {\n    // Not all roots possible!\n    // const ORDER =\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    // const NUM = 72057594037927816n;\n    const p1div4 = (P + _1n) / _4n;\n    return function sqrt3mod4<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      // Throw if root**2 != n\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Atkin algorithm for q \u2261 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n  if (P % _8n === _5n) {\n    const c1 = (P - _5n) / _8n;\n    return function sqrt5mod8<T>(Fp: IField<T>, n: T) {\n      const n2 = Fp.mul(n, _2n);\n      const v = Fp.pow(n2, c1);\n      const nv = Fp.mul(n, v);\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // P \u2261 9 (mod 16)\n  if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n  }\n\n  // Other cases: Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint) => (mod(num, modulo) & _1n) === _1n;\n\n// Field is not always over prime: for example, Fp2 has ORDER(q)=p^m\nexport interface IField<T> {\n  ORDER: bigint;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  pow(lhs: T, power: bigint): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>) {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n\n// Generic field functions\n\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow<T>(f: IField<T>, num: T, power: bigint): T {\n  // Should have same speed as pow for bigints\n  // TODO: benchmark!\n  if (power < _0n) throw new Error('Expected power > 0');\n  if (power === _0n) return f.ONE;\n  if (power === _1n) return num;\n  let p = f.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = f.mul(p, d);\n    d = f.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch<T>(f: IField<T>, nums: T[]): T[] {\n  const tmp = new Array(nums.length);\n  // Walk from first to last, multiply them by each other MOD p\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = acc;\n    return f.mul(acc, num);\n  }, f.ONE);\n  // Invert last element\n  const inverted = f.inv(lastMultiplied);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = f.mul(acc, tmp[i]);\n    return f.mul(acc, num);\n  }, inverted);\n  return tmp;\n}\n\nexport function FpDiv<T>(f: IField<T>, lhs: T, rhs: T | bigint): T {\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(f: IField<T>) {\n  const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n  return (x: T): boolean => {\n    const p = f.pow(x, legendreConst);\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n  };\n}\n\n// CURVE.n lengths\nexport function nLength(n: bigint, nBitLength?: number) {\n  // Bit size, byte size of CURVE.n\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLen?: number,\n  isLE = false,\n  redef: Partial<IField<bigint>> = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('Field lengths over 2048 bytes are not supported');\n  const sqrtP = FpSqrt(ORDER);\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // TODO: do we really need constant cmov?\n    // We don't have const-time bigints anyway, so probably will be not very useful\n    cmov: (a, b, c) => (c ? b : a),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder: bigint): number {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder: bigint): number {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024)\n    throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n  const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport type { Group, GroupConstructor, AffinePoint } from './curve.js';\nimport { mod, IField } from './modular.js';\nimport type { CHash } from './utils.js';\nimport { bytesToNumberBE, abytes, concatBytes, utf8ToBytes, validateObject } from './utils.js';\n\n/**\n * * `DST` is a domain separation tag, defined in section 2.2.5\n * * `p` characteristic of F, where F is a finite field of characteristic p and order q = p^m\n * * `m` is extension degree (1 for prime fields)\n * * `k` is the target security target in bits (e.g. 128), from section 5.1\n * * `expand` is `xmd` (SHA2, SHA3, BLAKE) or `xof` (SHAKE, BLAKE-XOF)\n * * `hash` conforming to `utils.CHash` interface, with `outputLen` / `blockLen` props\n */\ntype UnicodeOrBytes = string | Uint8Array;\nexport type Opts = {\n  DST: UnicodeOrBytes;\n  p: bigint;\n  m: number;\n  k: number;\n  expand: 'xmd' | 'xof';\n  hash: CHash;\n};\n\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = bytesToNumberBE;\n\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value: number, length: number): Uint8Array {\n  if (value < 0 || value >= 1 << (8 * length)) {\n    throw new Error(`bad I2OSP call: value=${value} length=${length}`);\n  }\n  const res = Array.from({ length }).fill(0) as number[];\n  for (let i = length - 1; i >= 0; i--) {\n    res[i] = value & 0xff;\n    value >>>= 8;\n  }\n  return new Uint8Array(res);\n}\n\nfunction strxor(a: Uint8Array, b: Uint8Array): Uint8Array {\n  const arr = new Uint8Array(a.length);\n  for (let i = 0; i < a.length; i++) {\n    arr[i] = a[i] ^ b[i];\n  }\n  return arr;\n}\n\nfunction anum(item: unknown): void {\n  if (!Number.isSafeInteger(item)) throw new Error('number expected');\n}\n\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1\nexport function expand_message_xmd(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  H: CHash\n): Uint8Array {\n  abytes(msg);\n  abytes(DST);\n  anum(lenInBytes);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  if (DST.length > 255) DST = H(concatBytes(utf8ToBytes('H2C-OVERSIZE-DST-'), DST));\n  const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n  const ell = Math.ceil(lenInBytes / b_in_bytes);\n  if (ell > 255) throw new Error('Invalid xmd length');\n  const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\n  const Z_pad = i2osp(0, r_in_bytes);\n  const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n  const b = new Array<Uint8Array>(ell);\n  const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n  b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\n  for (let i = 1; i <= ell; i++) {\n    const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n    b[i] = H(concatBytes(...args));\n  }\n  const pseudo_random_bytes = concatBytes(...b);\n  return pseudo_random_bytes.slice(0, lenInBytes);\n}\n\n// Produces a uniformly random byte string using an extendable-output function (XOF) H.\n// 1. The collision resistance of H MUST be at least k bits.\n// 2. H MUST be an XOF that has been proved indifferentiable from\n//    a random oracle under a reasonable cryptographic assumption.\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2\nexport function expand_message_xof(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  k: number,\n  H: CHash\n): Uint8Array {\n  abytes(msg);\n  abytes(DST);\n  anum(lenInBytes);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n  if (DST.length > 255) {\n    const dkLen = Math.ceil((2 * k) / 8);\n    DST = H.create({ dkLen }).update(utf8ToBytes('H2C-OVERSIZE-DST-')).update(DST).digest();\n  }\n  if (lenInBytes > 65535 || DST.length > 255)\n    throw new Error('expand_message_xof: invalid lenInBytes');\n  return (\n    H.create({ dkLen: lenInBytes })\n      .update(msg)\n      .update(i2osp(lenInBytes, 2))\n      // 2. DST_prime = DST || I2OSP(len(DST), 1)\n      .update(DST)\n      .update(i2osp(DST.length, 1))\n      .digest()\n  );\n}\n\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\n * https://www.rfc-editor.org/rfc/rfc9380#section-5.2\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nexport function hash_to_field(msg: Uint8Array, count: number, options: Opts): bigint[][] {\n  validateObject(options, {\n    DST: 'stringOrUint8Array',\n    p: 'bigint',\n    m: 'isSafeInteger',\n    k: 'isSafeInteger',\n    hash: 'hash',\n  });\n  const { p, k, m, hash, expand, DST: _DST } = options;\n  abytes(msg);\n  anum(count);\n  const DST = typeof _DST === 'string' ? utf8ToBytes(_DST) : _DST;\n  const log2p = p.toString(2).length;\n  const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n  const len_in_bytes = count * m * L;\n  let prb; // pseudo_random_bytes\n  if (expand === 'xmd') {\n    prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n  } else if (expand === 'xof') {\n    prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n  } else if (expand === '_internal_pass') {\n    // for internal tests only\n    prb = msg;\n  } else {\n    throw new Error('expand must be \"xmd\" or \"xof\"');\n  }\n  const u = new Array(count);\n  for (let i = 0; i < count; i++) {\n    const e = new Array(m);\n    for (let j = 0; j < m; j++) {\n      const elm_offset = L * (j + i * m);\n      const tv = prb.subarray(elm_offset, elm_offset + L);\n      e[j] = mod(os2ip(tv), p);\n    }\n    u[i] = e;\n  }\n  return u;\n}\n\nexport function isogenyMap<T, F extends IField<T>>(field: F, map: [T[], T[], T[], T[]]) {\n  // Make same order as in spec\n  const COEFF = map.map((i) => Array.from(i).reverse());\n  return (x: T, y: T) => {\n    const [xNum, xDen, yNum, yDen] = COEFF.map((val) =>\n      val.reduce((acc, i) => field.add(field.mul(acc, x), i))\n    );\n    x = field.div(xNum, xDen); // xNum / xDen\n    y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n    return { x, y };\n  };\n}\n\nexport interface H2CPoint<T> extends Group<H2CPoint<T>> {\n  add(rhs: H2CPoint<T>): H2CPoint<T>;\n  toAffine(iz?: bigint): AffinePoint<T>;\n  clearCofactor(): H2CPoint<T>;\n  assertValidity(): void;\n}\n\nexport interface H2CPointConstructor<T> extends GroupConstructor<H2CPoint<T>> {\n  fromAffine(ap: AffinePoint<T>): H2CPoint<T>;\n}\n\nexport type MapToCurve<T> = (scalar: bigint[]) => AffinePoint<T>;\n\n// Separated from initialization opts, so users won't accidentally change per-curve parameters\n// (changing DST is ok!)\nexport type htfBasicOpts = { DST: UnicodeOrBytes };\n\nexport function createHasher<T>(\n  Point: H2CPointConstructor<T>,\n  mapToCurve: MapToCurve<T>,\n  def: Opts & { encodeDST?: UnicodeOrBytes }\n) {\n  if (typeof mapToCurve !== 'function') throw new Error('mapToCurve() must be defined');\n  return {\n    // Encodes byte string to elliptic curve.\n    // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n    hashToCurve(msg: Uint8Array, options?: htfBasicOpts) {\n      const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options } as Opts);\n      const u0 = Point.fromAffine(mapToCurve(u[0]));\n      const u1 = Point.fromAffine(mapToCurve(u[1]));\n      const P = u0.add(u1).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n\n    // Encodes byte string to elliptic curve.\n    // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n    encodeToCurve(msg: Uint8Array, options?: htfBasicOpts) {\n      const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options } as Opts);\n      const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n  };\n}\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { IField, validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { z?: never; t?: never };\n\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n}\n\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / \uD835\uDC4A) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number) {\n  const constTimeNegate = (condition: boolean, item: T): T => {\n    const neg = item.negate();\n    return condition ? neg : item;\n  };\n  const opts = (W: number) => {\n    const windows = Math.ceil(bits / W) + 1; // +1, because\n    const windowSize = 2 ** (W - 1); // -1 because we skip zero\n    return { windows, windowSize };\n  };\n  return {\n    constTimeNegate,\n    // non-const time multiplication ladder\n    unsafeLadder(elm: T, n: bigint) {\n      let p = c.ZERO;\n      let d: T = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    },\n\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(\uD835\uDC4A\u22121) * (Math.ceil(\uD835\uDC5B / \uD835\uDC4A) + 1), where:\n     * - \uD835\uDC4A is the window size\n     * - \uD835\uDC5B is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(elm: T, W: number): Group<T>[] {\n      const { windows, windowSize } = opts(W);\n      const points: T[] = [];\n      let p: T = elm;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // =1, because we skip zero\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    },\n\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\n      // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n      // But need to carefully remove other checks before wNAF. ORDER == bits here\n      const { windows, windowSize } = opts(W);\n\n      let p = c.ZERO;\n      let f = c.BASE;\n\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n      const maxNumber = 2 ** W;\n      const shiftBy = BigInt(W);\n\n      for (let window = 0; window < windows; window++) {\n        const offset = window * windowSize;\n        // Extract W bits.\n        let wbits = Number(n & mask);\n\n        // Shift number by W bits.\n        n >>= shiftBy;\n\n        // If the bits are bigger than max size, we'll split those.\n        // +224 => 256 - 32\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n\n        // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n        // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n        // there is negate now: it is possible that negated element from low value\n        // would be the same as high element, which will create carry into next window.\n        // It's not obvious how this can fail, but still worth investigating later.\n\n        // Check if we're onto Zero point.\n        // Add random point inside current window to f.\n        const offset1 = offset;\n        const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n        const cond1 = window % 2 !== 0;\n        const cond2 = wbits < 0;\n        if (wbits === 0) {\n          // The most important part for const-time getPublicKey\n          f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n        } else {\n          p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n        }\n      }\n      // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n      // Even if the variable is still unused, there are some checks which will\n      // throw an exception, so compiler needs to prove they won't happen, which is hard.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return { p, f };\n    },\n\n    wNAFCached(P: T, precomputesMap: Map<T, T[]>, n: bigint, transform: Mapper<T>): { p: T; f: T } {\n      // @ts-ignore\n      const W: number = P._WINDOW_SIZE || 1;\n      // Calculate precomputes on a first run, reuse them after\n      let comp = precomputesMap.get(P);\n      if (!comp) {\n        comp = this.precomputeWindow(P, W) as T[];\n        if (W !== 1) {\n          precomputesMap.set(P, transform(comp));\n        }\n      }\n      return this.wNAF(W, comp, n);\n    },\n  };\n}\n\n// Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n// Though generator can be different (Fp2 / Fp6 for BLS).\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\nexport function validateBasic<FP, T>(curve: BasicCurve<FP> & T) {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y\u00B2 = x\u00B3 + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { CHash, Hex, PrivKey, ensureBytes } from './utils.js';\nimport { Group, GroupConstructor, wNAF, BasicCurve, validateBasic, AffinePoint } from './curve.js';\n\nexport type { AffinePoint };\ntype HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\ntype EndomorphismOpts = {\n  beta: bigint;\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts; // Endomorphism options for Koblitz curves\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n};\n\ntype Entropy = Hex | boolean;\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\nexport type VerOpts = { lowS?: boolean; prehash?: boolean };\n\n/**\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance of nominative types in TypeScript and interfaces only check for shape, so it's hard to create unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * TODO: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n */\n\n// Instance for 3d XYZ points\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\n  readonly px: T;\n  readonly py: T;\n  readonly pz: T;\n  get x(): T;\n  get y(): T;\n  multiply(scalar: bigint): ProjPointType<T>;\n  toAffine(iz?: T): AffinePoint<T>;\n  isTorsionFree(): boolean;\n  clearCofactor(): ProjPointType<T>;\n  assertValidity(): void;\n  hasEvenY(): boolean;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\n  _setWindowSize(windowSize: number): void;\n}\n// Static methods for 3d XYZ points\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\n  new (x: T, y: T, z: T): ProjPointType<T>;\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\n  fromHex(hex: Hex): ProjPointType<T>;\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\n}\n\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  // Bytes\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n};\n\nfunction validatePointOpts<T>(curve: CurvePointsType<T>) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      a: 'field',\n      b: 'field',\n    },\n    {\n      allowedPrivateKeyLengths: 'array',\n      wrapPrivateKey: 'boolean',\n      isTorsionFree: 'function',\n      clearCofactor: 'function',\n      allowInfinityPoint: 'boolean',\n      fromBytes: 'function',\n      toBytes: 'function',\n    }\n  );\n  const { endo, Fp, a } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n    }\n    if (\n      typeof endo !== 'object' ||\n      typeof endo.beta !== 'bigint' ||\n      typeof endo.splitScalar !== 'function'\n    ) {\n      throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze({ ...opts } as const);\n}\n\nexport type CurvePointsRes<T> = {\n  CURVE: ReturnType<typeof validatePointOpts<T>>;\n  ProjectivePoint: ProjConstructor<T>;\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  weierstrassEquation: (x: T) => T;\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport const DER = {\n  // asn.1 DER encoding utils\n  Err: class DERErr extends Error {\n    constructor(m = '') {\n      super(m);\n    }\n  },\n  _parseInt(data: Uint8Array): { d: bigint; l: Uint8Array } {\n    const { Err: E } = DER;\n    if (data.length < 2 || data[0] !== 0x02) throw new E('Invalid signature integer tag');\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) throw new E('Invalid signature integer: wrong length');\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    if (res[0] & 0b10000000) throw new E('Invalid signature integer: negative');\n    if (res[0] === 0x00 && !(res[1] & 0b10000000))\n      throw new E('Invalid signature integer: unnecessary leading zero');\n    return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E } = DER;\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\n    ut.abytes(data);\n    let l = data.length;\n    if (l < 2 || data[0] != 0x30) throw new E('Invalid signature tag');\n    if (data[1] !== l - 2) throw new E('Invalid signature: incorrect length');\n    const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n    const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n    if (rBytesLeft.length) throw new E('Invalid signature: left bytes after parsing');\n    return { r, s };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n    const slice = (s: string): string => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n    const h = (num: number | bigint) => {\n      const hex = num.toString(16);\n      return hex.length & 1 ? `0${hex}` : hex;\n    };\n    const s = slice(h(sig.s));\n    const r = slice(h(sig.r));\n    const shl = s.length / 2;\n    const rhl = r.length / 2;\n    const sl = h(shl);\n    const rl = h(rhl);\n    return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\nexport function weierstrassPoints<T>(opts: CurvePointsType<T>): CurvePointsRes<T> {\n  const CURVE = validatePointOpts(opts);\n  const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n\n  const toBytes =\n    CURVE.toBytes ||\n    ((_c: ProjConstructor<T>, point: ProjPointType<T>, _isCompressed: boolean) => {\n      const a = point.toAffine();\n      return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n  const fromBytes =\n    CURVE.fromBytes ||\n    ((bytes: Uint8Array) => {\n      // const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n      return { x, y };\n    });\n\n  /**\n   * y\u00B2 = x\u00B3 + ax + b: Short weierstrass curve formula\n   * @returns y\u00B2\n   */\n  function weierstrassEquation(x: T): T {\n    const { a, b } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n    throw new Error('bad generator point: equation left != right');\n\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num: bigint): boolean {\n    return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n  }\n  function assertGE(num: bigint) {\n    if (!isWithinCurveOrder(num)) throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\n    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (ut.isBytes(key)) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('Invalid key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num: bigint;\n    try {\n      num =\n        typeof key === 'bigint'\n          ? key\n          : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n    }\n    if (wrapPrivateKey) num = mod.mod(num, n); // disabled by default, enabled for BLS\n    assertGE(num); // num in range [1..N-1]\n    return num;\n  }\n\n  const pointPrecomputes = new Map<Point, Point[]>();\n  function assertPrjPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) \u220B (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements ProjPointType<T> {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n\n    constructor(\n      readonly px: T,\n      readonly py: T,\n      readonly pz: T\n    ) {\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n    }\n\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = (i: T) => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.pz));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    _WINDOW_SIZE?: number;\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n\n    // A point on curve is valid if it conforms to equation.\n    assertValidity(): void {\n      if (this.is0()) {\n        // (0, 1, 0) aka ZERO is invalid in most contexts.\n        // In BLS, ZERO can be serialized, so we allow it.\n        // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n        if (CURVE.allowInfinityPoint && !Fp.is0(this.py)) return;\n        throw new Error('bad point: ZERO');\n      }\n      // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n      const { x, y } = this.toAffine();\n      // Check if x, y are valid field elements\n      if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n      const left = Fp.sqr(y); // y\u00B2\n      const right = weierstrassEquation(x); // x\u00B3 + ax + b\n      if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n      if (!this.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    }\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n\n    /**\n     * Compare one point to another.\n     */\n    equals(other: Point): boolean {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate(): Point {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    private is0() {\n      return this.equals(Point.ZERO);\n    }\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, (comp: Point[]) => {\n        const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n      });\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(n: bigint): Point {\n      const I = Point.ZERO;\n      if (n === _0n) return I;\n      assertGE(n); // Will throw on 0\n      if (n === _1n) return this;\n      const { endo } = CURVE;\n      if (!endo) return wnaf.unsafeLadder(this, n);\n\n      // Apply endomorphism\n      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n      let k1p = I;\n      let k2p = I;\n      let d: Point = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      assertGE(scalar);\n      let n = scalar;\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      const { endo } = CURVE;\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let { p: k1p, f: f1p } = this.wNAF(k1);\n        let { p: k2p, f: f2p } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const { p, f } = this.wNAF(n);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (\n        P: Point,\n        a: bigint // Select faster multiply() method\n      ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) \u220B (x=x/z, y=y/z)\n    toAffine(iz?: T): AffinePoint<T> {\n      const { px: x, py: y, pz: z } = this;\n      const is0 = this.is0();\n      // If invZ was 0, we return zero point. However we still want to execute\n      // all operations, so we replace invZ with a random number, 1.\n      if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n      const ax = Fp.mul(x, iz);\n      const ay = Fp.mul(y, iz);\n      const zz = Fp.mul(z, iz);\n      if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n      if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n      return { x: ax, y: ay };\n    }\n    isTorsionFree(): boolean {\n      const { h: cofactor, isTorsionFree } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor(): Point {\n      const { h: cofactor, clearCofactor } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(CURVE.h);\n    }\n\n    toRawBytes(isCompressed = true): Uint8Array {\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  const _bits = CURVE.nBitLength;\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE,\n    ProjectivePoint: Point as ProjConstructor<T>,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  };\n}\n\n// Instance\nexport interface SignatureType {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  assertValidity(): void;\n  addRecoveryBit(recovery: number): RecoveredSignatureType;\n  hasHighS(): boolean;\n  normalizeS(): SignatureType;\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\n  toCompactRawBytes(): Uint8Array;\n  toCompactHex(): string;\n  // DER-encoded\n  toDERRawBytes(isCompressed?: boolean): Uint8Array;\n  toDERHex(isCompressed?: boolean): string;\n}\nexport type RecoveredSignatureType = SignatureType & {\n  readonly recovery: number;\n};\n// Static methods\nexport type SignatureConstructor = {\n  new (r: bigint, s: bigint): SignatureType;\n  fromCompact(hex: Hex): SignatureType;\n  fromDER(hex: Hex): SignatureType;\n};\ntype SignatureLike = { r: bigint; s: bigint };\n\nexport type PubKey = Hex | ProjPointType<bigint>;\n\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      hash: 'hash',\n      hmac: 'function',\n      randomBytes: 'function',\n    },\n    {\n      bits2int: 'function',\n      bits2int_modN: 'function',\n      lowS: 'boolean',\n    }\n  );\n  return Object.freeze({ lowS: true, ...opts } as const);\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  ProjectivePoint: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n};\n\nexport function weierstrass(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const { Fp, n: CURVE_ORDER } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n\n  function isValidFieldElement(num: bigint): boolean {\n    return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n  }\n  function modN(a: bigint) {\n    return mod.mod(a, CURVE_ORDER);\n  }\n  function invN(a: bigint) {\n    return mod.invert(a, CURVE_ORDER);\n  }\n\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(_c, point, isCompressed: boolean): Uint8Array {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = ut.concatBytes;\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes: Uint8Array) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = ut.bytesToNumberBE(tail);\n        if (!isValidFieldElement(x)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y\u00B2 = x\u00B3 + ax + b\n        let y: bigint;\n        try {\n          y = Fp.sqrt(y2); // y = y\u00B2 ^ (p+1)/4\n        } catch (sqrtError) {\n          const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n          throw new Error('Point is not on curve' + suffix);\n        }\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return { x, y };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return { x, y };\n      } else {\n        throw new Error(\n          `Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`\n        );\n      }\n    },\n  });\n  const numToNByteStr = (num: bigint): string =>\n    ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b: Uint8Array, from: number, to: number) => ut.bytesToNumberBE(b.slice(from, to));\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements SignatureType {\n    constructor(\n      readonly r: bigint,\n      readonly s: bigint,\n      readonly recovery?: number\n    ) {\n      this.assertValidity();\n    }\n\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex: Hex) {\n      const l = CURVE.nByteLength;\n      hex = ensureBytes('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex: Hex) {\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n\n    assertValidity(): void {\n      // can use assertGE here\n      if (!isWithinCurveOrder(this.r)) throw new Error('r must be 0 < r < CURVE.n');\n      if (!isWithinCurveOrder(this.s)) throw new Error('s must be 0 < s < CURVE.n');\n    }\n\n    addRecoveryBit(recovery: number): RecoveredSignature {\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\n    }\n\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const { r, s, recovery: rec } = this;\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n\n    // DER-encoded\n    toDERRawBytes() {\n      return ut.hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return DER.hexFromSig({ r: this.r, s: this.s });\n    }\n\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return ut.hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\n    }\n  }\n  type RecoveredSignature = Signature & { recovery: number };\n\n  const utils = {\n    isValidPrivateKey(privateKey: PrivKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n\n    /**\n     * Produces cryptographically secure private key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    randomPrivateKey: (): Uint8Array => {\n      const length = mod.getMinHashLength(CURVE.n);\n      return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n    },\n\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    },\n  };\n\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean {\n    const arr = ut.isBytes(item);\n    const str = typeof item === 'string';\n    const len = (arr || str) && (item as Hex).length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    CURVE.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    CURVE.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    if (typeof num !== 'bigint') throw new Error('bigint expected');\n    if (!(_0n <= num && num < ORDER_MASK))\n      throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n  // Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { hash, randomBytes } = CURVE;\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null && ent !== false) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b \u2208 [1,q\u22121] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: CURVE.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: CURVE.lowS, prehash: false };\n\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G \u00D7 k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const C = CURVE;\n    const drbg = ut.createHmacDrbg<RecoveredSignature>(C.hash.outputLen, C.nByteLength, C.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1\u22C5G - U2\u22C5P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    const { lowS, prehash } = opts;\n\n    let _sig: Signature | undefined = undefined;\n    let P: ProjPointType<bigint>;\n    try {\n      if (typeof sg === 'string' || ut.isBytes(sg)) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n          _sig = Signature.fromCompact(sg);\n        }\n      } else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n        const { r, s } = sg;\n        _sig = new Signature(r, s);\n      } else {\n        throw new Error('PARSE');\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      if ((error as Error).message === 'PARSE')\n        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n      return false;\n    }\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const { r, s } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1\u22C5G + u2\u22C5P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils,\n  };\n}\n\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio<T>(Fp: mod.IField<T>, Z: T) {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU<T>(\n  Fp: mod.IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n) {\n  mod.validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n/**\n * BLS (Barreto-Lynn-Scott) family of pairing-friendly curves.\n * Implements BLS (Boneh-Lynn-Shacham) signatures.\n * Consists of two curves: G1 and G2:\n * - G1 is a subgroup of (x, y) E(Fq) over y\u00B2 = x\u00B3 + 4.\n * - G2 is a subgroup of ((x\u2081, x\u2082+i), (y\u2081, y\u2082+i)) E(Fq\u00B2) over y\u00B2 = x\u00B3 + 4(1 + i) where i is \u221A-1\n * - Gt, created by bilinear (ate) pairing e(G1, G2), consists of p-th roots of unity in\n *   Fq^k where k is embedding degree. Only degree 12 is currently supported, 24 is not.\n * Pairing is used to aggregate and verify signatures.\n * We are using Fp for private keys (shorter) and Fp\u2082 for signatures (longer).\n * Some projects may prefer to swap this relation, it is not supported for now.\n */\nimport { AffinePoint } from './curve.js';\nimport { IField, getMinHashLength, mapHashToField } from './modular.js';\nimport { Hex, PrivKey, CHash, bitLen, bitGet, ensureBytes } from './utils.js';\n// prettier-ignore\nimport {\n  MapToCurve, Opts as HTFOpts, H2CPointConstructor, htfBasicOpts,\n  createHasher\n} from './hash-to-curve.js';\nimport {\n  CurvePointsType,\n  ProjPointType as ProjPointType,\n  CurvePointsRes,\n  weierstrassPoints,\n} from './weierstrass.js';\n\ntype Fp = bigint; // Can be different field?\n\n// prettier-ignore\nconst _2n = BigInt(2), _3n = BigInt(3);\n\nexport type ShortSignatureCoder<Fp> = {\n  fromHex(hex: Hex): ProjPointType<Fp>;\n  toRawBytes(point: ProjPointType<Fp>): Uint8Array;\n  toHex(point: ProjPointType<Fp>): string;\n};\n\nexport type SignatureCoder<Fp2> = {\n  fromHex(hex: Hex): ProjPointType<Fp2>;\n  toRawBytes(point: ProjPointType<Fp2>): Uint8Array;\n  toHex(point: ProjPointType<Fp2>): string;\n};\n\nexport type CurveType<Fp, Fp2, Fp6, Fp12> = {\n  G1: Omit<CurvePointsType<Fp>, 'n'> & {\n    ShortSignature: SignatureCoder<Fp>;\n    mapToCurve: MapToCurve<Fp>;\n    htfDefaults: HTFOpts;\n  };\n  G2: Omit<CurvePointsType<Fp2>, 'n'> & {\n    Signature: SignatureCoder<Fp2>;\n    mapToCurve: MapToCurve<Fp2>;\n    htfDefaults: HTFOpts;\n  };\n  fields: {\n    Fp: IField<Fp>;\n    Fr: IField<bigint>;\n    Fp2: IField<Fp2> & {\n      reim: (num: Fp2) => { re: bigint; im: bigint };\n      multiplyByB: (num: Fp2) => Fp2;\n      frobeniusMap(num: Fp2, power: number): Fp2;\n    };\n    Fp6: IField<Fp6>;\n    Fp12: IField<Fp12> & {\n      frobeniusMap(num: Fp12, power: number): Fp12;\n      multiplyBy014(num: Fp12, o0: Fp2, o1: Fp2, o4: Fp2): Fp12;\n      conjugate(num: Fp12): Fp12;\n      finalExponentiate(num: Fp12): Fp12;\n    };\n  };\n  params: {\n    x: bigint;\n    r: bigint;\n  };\n  htfDefaults: HTFOpts;\n  hash: CHash; // Because we need outputLen for DRBG\n  randomBytes: (bytesLength?: number) => Uint8Array;\n};\n\nexport type CurveFn<Fp, Fp2, Fp6, Fp12> = {\n  getPublicKey: (privateKey: PrivKey) => Uint8Array;\n  getPublicKeyForShortSignatures: (privateKey: PrivKey) => Uint8Array;\n  sign: {\n    (message: Hex, privateKey: PrivKey, htfOpts?: htfBasicOpts): Uint8Array;\n    (message: ProjPointType<Fp2>, privateKey: PrivKey, htfOpts?: htfBasicOpts): ProjPointType<Fp2>;\n  };\n  signShortSignature: {\n    (message: Hex, privateKey: PrivKey, htfOpts?: htfBasicOpts): Uint8Array;\n    (message: ProjPointType<Fp>, privateKey: PrivKey, htfOpts?: htfBasicOpts): ProjPointType<Fp>;\n  };\n  verify: (\n    signature: Hex | ProjPointType<Fp2>,\n    message: Hex | ProjPointType<Fp2>,\n    publicKey: Hex | ProjPointType<Fp>,\n    htfOpts?: htfBasicOpts\n  ) => boolean;\n  verifyShortSignature: (\n    signature: Hex | ProjPointType<Fp>,\n    message: Hex | ProjPointType<Fp>,\n    publicKey: Hex | ProjPointType<Fp2>,\n    htfOpts?: htfBasicOpts\n  ) => boolean;\n  verifyBatch: (\n    signature: Hex | ProjPointType<Fp2>,\n    messages: (Hex | ProjPointType<Fp2>)[],\n    publicKeys: (Hex | ProjPointType<Fp>)[],\n    htfOpts?: htfBasicOpts\n  ) => boolean;\n  aggregatePublicKeys: {\n    (publicKeys: Hex[]): Uint8Array;\n    (publicKeys: ProjPointType<Fp>[]): ProjPointType<Fp>;\n  };\n  aggregateSignatures: {\n    (signatures: Hex[]): Uint8Array;\n    (signatures: ProjPointType<Fp2>[]): ProjPointType<Fp2>;\n  };\n  aggregateShortSignatures: {\n    (signatures: Hex[]): Uint8Array;\n    (signatures: ProjPointType<Fp>[]): ProjPointType<Fp>;\n  };\n  millerLoop: (ell: [Fp2, Fp2, Fp2][], g1: [Fp, Fp]) => Fp12;\n  pairing: (P: ProjPointType<Fp>, Q: ProjPointType<Fp2>, withFinalExponent?: boolean) => Fp12;\n  G1: CurvePointsRes<Fp> & ReturnType<typeof createHasher<Fp>>;\n  G2: CurvePointsRes<Fp2> & ReturnType<typeof createHasher<Fp2>>;\n  Signature: SignatureCoder<Fp2>;\n  ShortSignature: ShortSignatureCoder<Fp>;\n  params: {\n    x: bigint;\n    r: bigint;\n    G1b: bigint;\n    G2b: Fp2;\n  };\n  fields: {\n    Fp: IField<Fp>;\n    Fp2: IField<Fp2>;\n    Fp6: IField<Fp6>;\n    Fp12: IField<Fp12>;\n    Fr: IField<bigint>;\n  };\n  utils: {\n    randomPrivateKey: () => Uint8Array;\n    calcPairingPrecomputes: (p: AffinePoint<Fp2>) => [Fp2, Fp2, Fp2][];\n  };\n};\n\nexport function bls<Fp2, Fp6, Fp12>(\n  CURVE: CurveType<Fp, Fp2, Fp6, Fp12>\n): CurveFn<Fp, Fp2, Fp6, Fp12> {\n  // Fields are specific for curve, so for now we'll need to pass them with opts\n  const { Fp, Fr, Fp2, Fp6, Fp12 } = CURVE.fields;\n  const BLS_X_LEN = bitLen(CURVE.params.x);\n\n  // Pre-compute coefficients for sparse multiplication\n  // Point addition and point double calculations is reused for coefficients\n  function calcPairingPrecomputes(p: AffinePoint<Fp2>) {\n    const { x, y } = p;\n    // prettier-ignore\n    const Qx = x, Qy = y, Qz = Fp2.ONE;\n    // prettier-ignore\n    let Rx = Qx, Ry = Qy, Rz = Qz;\n    let ell_coeff: [Fp2, Fp2, Fp2][] = [];\n    for (let i = BLS_X_LEN - 2; i >= 0; i--) {\n      // Double\n      let t0 = Fp2.sqr(Ry); // Ry\u00B2\n      let t1 = Fp2.sqr(Rz); // Rz\u00B2\n      let t2 = Fp2.multiplyByB(Fp2.mul(t1, _3n)); // 3 * T1 * B\n      let t3 = Fp2.mul(t2, _3n); // 3 * T2\n      let t4 = Fp2.sub(Fp2.sub(Fp2.sqr(Fp2.add(Ry, Rz)), t1), t0); // (Ry + Rz)\u00B2 - T1 - T0\n      ell_coeff.push([\n        Fp2.sub(t2, t0), // T2 - T0\n        Fp2.mul(Fp2.sqr(Rx), _3n), // 3 * Rx\u00B2\n        Fp2.neg(t4), // -T4\n      ]);\n      Rx = Fp2.div(Fp2.mul(Fp2.mul(Fp2.sub(t0, t3), Rx), Ry), _2n); // ((T0 - T3) * Rx * Ry) / 2\n      Ry = Fp2.sub(Fp2.sqr(Fp2.div(Fp2.add(t0, t3), _2n)), Fp2.mul(Fp2.sqr(t2), _3n)); // ((T0 + T3) / 2)\u00B2 - 3 * T2\u00B2\n      Rz = Fp2.mul(t0, t4); // T0 * T4\n      if (bitGet(CURVE.params.x, i)) {\n        // Addition\n        let t0 = Fp2.sub(Ry, Fp2.mul(Qy, Rz)); // Ry - Qy * Rz\n        let t1 = Fp2.sub(Rx, Fp2.mul(Qx, Rz)); // Rx - Qx * Rz\n        ell_coeff.push([\n          Fp2.sub(Fp2.mul(t0, Qx), Fp2.mul(t1, Qy)), // T0 * Qx - T1 * Qy\n          Fp2.neg(t0), // -T0\n          t1, // T1\n        ]);\n        let t2 = Fp2.sqr(t1); // T1\u00B2\n        let t3 = Fp2.mul(t2, t1); // T2 * T1\n        let t4 = Fp2.mul(t2, Rx); // T2 * Rx\n        let t5 = Fp2.add(Fp2.sub(t3, Fp2.mul(t4, _2n)), Fp2.mul(Fp2.sqr(t0), Rz)); // T3 - 2 * T4 + T0\u00B2 * Rz\n        Rx = Fp2.mul(t1, t5); // T1 * T5\n        Ry = Fp2.sub(Fp2.mul(Fp2.sub(t4, t5), t0), Fp2.mul(t3, Ry)); // (T4 - T5) * T0 - T3 * Ry\n        Rz = Fp2.mul(Rz, t3); // Rz * T3\n      }\n    }\n    return ell_coeff;\n  }\n\n  function millerLoop(ell: [Fp2, Fp2, Fp2][], g1: [Fp, Fp]): Fp12 {\n    const { x } = CURVE.params;\n    const Px = g1[0];\n    const Py = g1[1];\n    let f12 = Fp12.ONE;\n    for (let j = 0, i = BLS_X_LEN - 2; i >= 0; i--, j++) {\n      const E = ell[j];\n      f12 = Fp12.multiplyBy014(f12, E[0], Fp2.mul(E[1], Px), Fp2.mul(E[2], Py));\n      if (bitGet(x, i)) {\n        j += 1;\n        const F = ell[j];\n        f12 = Fp12.multiplyBy014(f12, F[0], Fp2.mul(F[1], Px), Fp2.mul(F[2], Py));\n      }\n      if (i !== 0) f12 = Fp12.sqr(f12);\n    }\n    return Fp12.conjugate(f12);\n  }\n\n  const utils = {\n    randomPrivateKey: (): Uint8Array => {\n      const length = getMinHashLength(Fr.ORDER);\n      return mapHashToField(CURVE.randomBytes(length), Fr.ORDER);\n    },\n    calcPairingPrecomputes,\n  };\n\n  // Point on G1 curve: (x, y)\n  const G1_ = weierstrassPoints({ n: Fr.ORDER, ...CURVE.G1 });\n  const G1 = Object.assign(\n    G1_,\n    createHasher(G1_.ProjectivePoint, CURVE.G1.mapToCurve, {\n      ...CURVE.htfDefaults,\n      ...CURVE.G1.htfDefaults,\n    })\n  );\n\n  // Sparse multiplication against precomputed coefficients\n  // TODO: replace with weakmap?\n  type withPairingPrecomputes = { _PPRECOMPUTES: [Fp2, Fp2, Fp2][] | undefined };\n  function pairingPrecomputes(point: G2): [Fp2, Fp2, Fp2][] {\n    const p = point as G2 & withPairingPrecomputes;\n    if (p._PPRECOMPUTES) return p._PPRECOMPUTES;\n    p._PPRECOMPUTES = calcPairingPrecomputes(point.toAffine());\n    return p._PPRECOMPUTES;\n  }\n\n  // TODO: export\n  // function clearPairingPrecomputes(point: G2) {\n  //   const p = point as G2 & withPairingPrecomputes;\n  //   p._PPRECOMPUTES = undefined;\n  // }\n\n  // Point on G2 curve (complex numbers): (x\u2081, x\u2082+i), (y\u2081, y\u2082+i)\n  const G2_ = weierstrassPoints({ n: Fr.ORDER, ...CURVE.G2 });\n  const G2 = Object.assign(\n    G2_,\n    createHasher(G2_.ProjectivePoint as H2CPointConstructor<Fp2>, CURVE.G2.mapToCurve, {\n      ...CURVE.htfDefaults,\n      ...CURVE.G2.htfDefaults,\n    })\n  );\n\n  const { ShortSignature } = CURVE.G1;\n  const { Signature } = CURVE.G2;\n\n  // Calculates bilinear pairing\n  function pairing(Q: G1, P: G2, withFinalExponent: boolean = true): Fp12 {\n    if (Q.equals(G1.ProjectivePoint.ZERO) || P.equals(G2.ProjectivePoint.ZERO))\n      throw new Error('pairing is not available for ZERO point');\n    Q.assertValidity();\n    P.assertValidity();\n    // Performance: 9ms for millerLoop and ~14ms for exp.\n    const Qa = Q.toAffine();\n    const looped = millerLoop(pairingPrecomputes(P), [Qa.x, Qa.y]);\n    return withFinalExponent ? Fp12.finalExponentiate(looped) : looped;\n  }\n  type G1 = typeof G1.ProjectivePoint.BASE;\n  type G2 = typeof G2.ProjectivePoint.BASE;\n\n  type G1Hex = Hex | G1;\n  type G2Hex = Hex | G2;\n  function normP1(point: G1Hex): G1 {\n    return point instanceof G1.ProjectivePoint ? (point as G1) : G1.ProjectivePoint.fromHex(point);\n  }\n  function normP1Hash(point: G1Hex, htfOpts?: htfBasicOpts): G1 {\n    return point instanceof G1.ProjectivePoint\n      ? point\n      : (G1.hashToCurve(ensureBytes('point', point), htfOpts) as G1);\n  }\n  function normP2(point: G2Hex): G2 {\n    return point instanceof G2.ProjectivePoint ? point : Signature.fromHex(point);\n  }\n  function normP2Hash(point: G2Hex, htfOpts?: htfBasicOpts): G2 {\n    return point instanceof G2.ProjectivePoint\n      ? point\n      : (G2.hashToCurve(ensureBytes('point', point), htfOpts) as G2);\n  }\n\n  // Multiplies generator (G1) by private key.\n  // P = pk x G\n  function getPublicKey(privateKey: PrivKey): Uint8Array {\n    return G1.ProjectivePoint.fromPrivateKey(privateKey).toRawBytes(true);\n  }\n\n  // Multiplies generator (G2) by private key.\n  // P = pk x G\n  function getPublicKeyForShortSignatures(privateKey: PrivKey): Uint8Array {\n    return G2.ProjectivePoint.fromPrivateKey(privateKey).toRawBytes(true);\n  }\n\n  // Executes `hashToCurve` on the message and then multiplies the result by private key.\n  // S = pk x H(m)\n  function sign(message: Hex, privateKey: PrivKey, htfOpts?: htfBasicOpts): Uint8Array;\n  function sign(message: G2, privateKey: PrivKey, htfOpts?: htfBasicOpts): G2;\n  function sign(message: G2Hex, privateKey: PrivKey, htfOpts?: htfBasicOpts): Uint8Array | G2 {\n    const msgPoint = normP2Hash(message, htfOpts);\n    msgPoint.assertValidity();\n    const sigPoint = msgPoint.multiply(G1.normPrivateKeyToScalar(privateKey));\n    if (message instanceof G2.ProjectivePoint) return sigPoint;\n    return Signature.toRawBytes(sigPoint);\n  }\n\n  function signShortSignature(\n    message: Hex,\n    privateKey: PrivKey,\n    htfOpts?: htfBasicOpts\n  ): Uint8Array;\n  function signShortSignature(message: G1, privateKey: PrivKey, htfOpts?: htfBasicOpts): G1;\n  function signShortSignature(\n    message: G1Hex,\n    privateKey: PrivKey,\n    htfOpts?: htfBasicOpts\n  ): Uint8Array | G1 {\n    const msgPoint = normP1Hash(message, htfOpts);\n    msgPoint.assertValidity();\n    const sigPoint = msgPoint.multiply(G1.normPrivateKeyToScalar(privateKey));\n    if (message instanceof G1.ProjectivePoint) return sigPoint;\n    return ShortSignature.toRawBytes(sigPoint);\n  }\n\n  // Checks if pairing of public key & hash is equal to pairing of generator & signature.\n  // e(P, H(m)) == e(G, S)\n  function verify(\n    signature: G2Hex,\n    message: G2Hex,\n    publicKey: G1Hex,\n    htfOpts?: htfBasicOpts\n  ): boolean {\n    const P = normP1(publicKey);\n    const Hm = normP2Hash(message, htfOpts);\n    const G = G1.ProjectivePoint.BASE;\n    const S = normP2(signature);\n    // Instead of doing 2 exponentiations, we use property of billinear maps\n    // and do one exp after multiplying 2 points.\n    const ePHm = pairing(P.negate(), Hm, false);\n    const eGS = pairing(G, S, false);\n    const exp = Fp12.finalExponentiate(Fp12.mul(eGS, ePHm));\n    return Fp12.eql(exp, Fp12.ONE);\n  }\n\n  // Checks if pairing of public key & hash is equal to pairing of generator & signature.\n  // e(S, G) == e(H(m), P)\n  function verifyShortSignature(\n    signature: G1Hex,\n    message: G1Hex,\n    publicKey: G2Hex,\n    htfOpts?: htfBasicOpts\n  ): boolean {\n    const P = normP2(publicKey);\n    const Hm = normP1Hash(message, htfOpts);\n    const G = G2.ProjectivePoint.BASE;\n    const S = normP1(signature);\n    // Instead of doing 2 exponentiations, we use property of billinear maps\n    // and do one exp after multiplying 2 points.\n    const eHmP = pairing(Hm, P, false);\n    const eSG = pairing(S, G.negate(), false);\n    const exp = Fp12.finalExponentiate(Fp12.mul(eSG, eHmP));\n    return Fp12.eql(exp, Fp12.ONE);\n  }\n\n  // Adds a bunch of public key points together.\n  // pk1 + pk2 + pk3 = pkA\n  function aggregatePublicKeys(publicKeys: Hex[]): Uint8Array;\n  function aggregatePublicKeys(publicKeys: G1[]): G1;\n  function aggregatePublicKeys(publicKeys: G1Hex[]): Uint8Array | G1 {\n    if (!publicKeys.length) throw new Error('Expected non-empty array');\n    const agg = publicKeys.map(normP1).reduce((sum, p) => sum.add(p), G1.ProjectivePoint.ZERO);\n    const aggAffine = agg; //.toAffine();\n    if (publicKeys[0] instanceof G1.ProjectivePoint) {\n      aggAffine.assertValidity();\n      return aggAffine;\n    }\n    // toRawBytes ensures point validity\n    return aggAffine.toRawBytes(true);\n  }\n\n  // Adds a bunch of signature points together.\n  function aggregateSignatures(signatures: Hex[]): Uint8Array;\n  function aggregateSignatures(signatures: G2[]): G2;\n  function aggregateSignatures(signatures: G2Hex[]): Uint8Array | G2 {\n    if (!signatures.length) throw new Error('Expected non-empty array');\n    const agg = signatures.map(normP2).reduce((sum, s) => sum.add(s), G2.ProjectivePoint.ZERO);\n    const aggAffine = agg; //.toAffine();\n    if (signatures[0] instanceof G2.ProjectivePoint) {\n      aggAffine.assertValidity();\n      return aggAffine;\n    }\n    return Signature.toRawBytes(aggAffine);\n  }\n\n  // Adds a bunch of signature points together.\n  function aggregateShortSignatures(signatures: Hex[]): Uint8Array;\n  function aggregateShortSignatures(signatures: G1[]): G1;\n  function aggregateShortSignatures(signatures: G1Hex[]): Uint8Array | G1 {\n    if (!signatures.length) throw new Error('Expected non-empty array');\n    const agg = signatures.map(normP1).reduce((sum, s) => sum.add(s), G1.ProjectivePoint.ZERO);\n    const aggAffine = agg; //.toAffine();\n    if (signatures[0] instanceof G1.ProjectivePoint) {\n      aggAffine.assertValidity();\n      return aggAffine;\n    }\n    return ShortSignature.toRawBytes(aggAffine);\n  }\n\n  // https://ethresear.ch/t/fast-verification-of-multiple-bls-signatures/5407\n  // e(G, S) = e(G, SUM(n)(Si)) = MUL(n)(e(G, Si))\n  function verifyBatch(\n    signature: G2Hex,\n    messages: G2Hex[],\n    publicKeys: G1Hex[],\n    htfOpts?: htfBasicOpts\n  ): boolean {\n    // @ts-ignore\n    // console.log('verifyBatch', bytesToHex(signature as any), messages, publicKeys.map(bytesToHex));\n\n    if (!messages.length) throw new Error('Expected non-empty messages array');\n    if (publicKeys.length !== messages.length)\n      throw new Error('Pubkey count should equal msg count');\n    const sig = normP2(signature);\n    const nMessages = messages.map((i) => normP2Hash(i, htfOpts));\n    const nPublicKeys = publicKeys.map(normP1);\n    try {\n      const paired = [];\n      for (const message of new Set(nMessages)) {\n        const groupPublicKey = nMessages.reduce(\n          (groupPublicKey, subMessage, i) =>\n            subMessage === message ? groupPublicKey.add(nPublicKeys[i]) : groupPublicKey,\n          G1.ProjectivePoint.ZERO\n        );\n        // const msg = message instanceof PointG2 ? message : await PointG2.hashToCurve(message);\n        // Possible to batch pairing for same msg with different groupPublicKey here\n        paired.push(pairing(groupPublicKey, message, false));\n      }\n      paired.push(pairing(G1.ProjectivePoint.BASE.negate(), sig, false));\n      const product = paired.reduce((a, b) => Fp12.mul(a, b), Fp12.ONE);\n      const exp = Fp12.finalExponentiate(product);\n      return Fp12.eql(exp, Fp12.ONE);\n    } catch {\n      return false;\n    }\n  }\n\n  G1.ProjectivePoint.BASE._setWindowSize(4);\n\n  return {\n    getPublicKey,\n    getPublicKeyForShortSignatures,\n    sign,\n    signShortSignature,\n    verify,\n    verifyBatch,\n    verifyShortSignature,\n    aggregatePublicKeys,\n    aggregateSignatures,\n    aggregateShortSignatures,\n    millerLoop,\n    pairing,\n    G1,\n    G2,\n    Signature,\n    ShortSignature,\n    fields: {\n      Fr,\n      Fp,\n      Fp2,\n      Fp6,\n      Fp12,\n    },\n    params: {\n      x: CURVE.params.x,\n      r: CURVE.params.r,\n      G1b: CURVE.G1.b,\n      G2b: CURVE.G2.b,\n    },\n    utils,\n  };\n}\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// bls12-381 is pairing-friendly Barreto-Lynn-Scott elliptic curve construction allowing to:\n// - Construct zk-SNARKs at the 120-bit security\n// - Efficiently verify N aggregate signatures with 1 pairing and N ec additions:\n//   the Boneh-Lynn-Shacham signature scheme is orders of magnitude more efficient than Schnorr\n//\n// ### Summary\n// 1. BLS Relies on Bilinear Pairing (expensive)\n// 2. Private Keys: 32 bytes\n// 3. Public Keys: 48 bytes: 381 bit affine x coordinate, encoded into 48 big-endian bytes.\n// 4. Signatures: 96 bytes: two 381 bit integers (affine x coordinate), encoded into two 48 big-endian byte arrays.\n//     - The signature is a point on the G2 subgroup, which is defined over a finite field\n//     with elements twice as big as the G1 curve (G2 is over Fp2 rather than Fp. Fp2 is analogous to the complex numbers).\n// 5. The 12 stands for the Embedding degree.\n//\n// ### Formulas\n// - `P = pk x G` - public keys\n// - `S = pk x H(m)` - signing\n// - `e(P, H(m)) == e(G, S)` - verification using pairings\n// - `e(G, S) = e(G, SUM(n)(Si)) = MUL(n)(e(G, Si))` - signature aggregation\n//\n// ### Compatibility and notes\n// 1. It is compatible with Algorand, Chia, Dfinity, Ethereum, Filecoin, ZEC\n//    Filecoin uses little endian byte arrays for private keys - make sure to reverse byte order.\n// 2. Some projects use G2 for public keys and G1 for signatures. It's called \"short signature\"\n// 3. Curve security level is about 120 bits as per Barbulescu-Duquesne 2017\n//    https://hal.science/hal-01534101/file/main.pdf\n// 4. Compatible with specs:\n// [cfrg-pairing-friendly-curves-11](https://tools.ietf.org/html/draft-irtf-cfrg-pairing-friendly-curves-11),\n// [cfrg-bls-signature-05](https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-bls-signature-05),\n// [RFC 9380](https://www.rfc-editor.org/rfc/rfc9380).\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { bls, CurveFn } from './abstract/bls.js';\nimport * as mod from './abstract/modular.js';\nimport {\n  concatBytes as concatB,\n  ensureBytes,\n  numberToBytesBE,\n  bytesToNumberBE,\n  bitLen,\n  bitGet,\n  Hex,\n  bitMask,\n  bytesToHex,\n} from './abstract/utils.js';\n// Types\nimport {\n  ProjPointType,\n  ProjConstructor,\n  mapToCurveSimpleSWU,\n  AffinePoint,\n} from './abstract/weierstrass.js';\nimport { isogenyMap } from './abstract/hash-to-curve.js';\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n// prettier-ignore\nconst _8n = BigInt(8), _16n = BigInt(16);\n\n// CURVE FIELDS\n// Finite field over p.\nconst Fp_raw = BigInt(\n  '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab'\n);\nconst Fp = mod.Field(Fp_raw);\ntype Fp = bigint;\n// Finite field over r.\n// This particular field is not used anywhere in bls12-381, but it is still useful.\nconst Fr = mod.Field(BigInt('0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001'));\n\n// Fp\u2082 over complex plane\ntype BigintTuple = [bigint, bigint];\ntype Fp2 = { c0: bigint; c1: bigint };\nconst Fp2Add = ({ c0, c1 }: Fp2, { c0: r0, c1: r1 }: Fp2) => ({\n  c0: Fp.add(c0, r0),\n  c1: Fp.add(c1, r1),\n});\nconst Fp2Subtract = ({ c0, c1 }: Fp2, { c0: r0, c1: r1 }: Fp2) => ({\n  c0: Fp.sub(c0, r0),\n  c1: Fp.sub(c1, r1),\n});\nconst Fp2Multiply = ({ c0, c1 }: Fp2, rhs: Fp2) => {\n  if (typeof rhs === 'bigint') return { c0: Fp.mul(c0, rhs), c1: Fp.mul(c1, rhs) };\n  // (a+bi)(c+di) = (ac\u2212bd) + (ad+bc)i\n  const { c0: r0, c1: r1 } = rhs;\n  let t1 = Fp.mul(c0, r0); // c0 * o0\n  let t2 = Fp.mul(c1, r1); // c1 * o1\n  // (T1 - T2) + ((c0 + c1) * (r0 + r1) - (T1 + T2))*i\n  const o0 = Fp.sub(t1, t2);\n  const o1 = Fp.sub(Fp.mul(Fp.add(c0, c1), Fp.add(r0, r1)), Fp.add(t1, t2));\n  return { c0: o0, c1: o1 };\n};\nconst Fp2Square = ({ c0, c1 }: Fp2) => {\n  const a = Fp.add(c0, c1);\n  const b = Fp.sub(c0, c1);\n  const c = Fp.add(c0, c0);\n  return { c0: Fp.mul(a, b), c1: Fp.mul(c, c1) };\n};\ntype Fp2Utils = {\n  fromBigTuple: (tuple: BigintTuple | bigint[]) => Fp2;\n  reim: (num: Fp2) => { re: bigint; im: bigint };\n  mulByNonresidue: (num: Fp2) => Fp2;\n  multiplyByB: (num: Fp2) => Fp2;\n  frobeniusMap(num: Fp2, power: number): Fp2;\n};\n// G2 is the order-q subgroup of E2(Fp\u00B2) : y\u00B2 = x\u00B3+4(1+\u221A\u22121),\n// where Fp2 is Fp[\u221A\u22121]/(x2+1). #E2(Fp2 ) = h2q, where\n// G\u00B2 - 1\n// h2q\n// NOTE: ORDER was wrong!\nconst FP2_ORDER = Fp_raw * Fp_raw;\n\nconst Fp2: mod.IField<Fp2> & Fp2Utils = {\n  ORDER: FP2_ORDER,\n  BITS: bitLen(FP2_ORDER),\n  BYTES: Math.ceil(bitLen(FP2_ORDER) / 8),\n  MASK: bitMask(bitLen(FP2_ORDER)),\n  ZERO: { c0: Fp.ZERO, c1: Fp.ZERO },\n  ONE: { c0: Fp.ONE, c1: Fp.ZERO },\n  create: (num) => num,\n  isValid: ({ c0, c1 }) => typeof c0 === 'bigint' && typeof c1 === 'bigint',\n  is0: ({ c0, c1 }) => Fp.is0(c0) && Fp.is0(c1),\n  eql: ({ c0, c1 }: Fp2, { c0: r0, c1: r1 }: Fp2) => Fp.eql(c0, r0) && Fp.eql(c1, r1),\n  neg: ({ c0, c1 }) => ({ c0: Fp.neg(c0), c1: Fp.neg(c1) }),\n  pow: (num, power) => mod.FpPow(Fp2, num, power),\n  invertBatch: (nums) => mod.FpInvertBatch(Fp2, nums),\n  // Normalized\n  add: Fp2Add,\n  sub: Fp2Subtract,\n  mul: Fp2Multiply,\n  sqr: Fp2Square,\n  // NonNormalized stuff\n  addN: Fp2Add,\n  subN: Fp2Subtract,\n  mulN: Fp2Multiply,\n  sqrN: Fp2Square,\n  // Why inversion for bigint inside Fp instead of Fp2? it is even used in that context?\n  div: (lhs, rhs) => Fp2.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : Fp2.inv(rhs)),\n  inv: ({ c0: a, c1: b }) => {\n    // We wish to find the multiplicative inverse of a nonzero\n    // element a + bu in Fp2. We leverage an identity\n    //\n    // (a + bu)(a - bu) = a\u00B2 + b\u00B2\n    //\n    // which holds because u\u00B2 = -1. This can be rewritten as\n    //\n    // (a + bu)(a - bu)/(a\u00B2 + b\u00B2) = 1\n    //\n    // because a\u00B2 + b\u00B2 = 0 has no nonzero solutions for (a, b).\n    // This gives that (a - bu)/(a\u00B2 + b\u00B2) is the inverse\n    // of (a + bu). Importantly, this can be computing using\n    // only a single inversion in Fp.\n    const factor = Fp.inv(Fp.create(a * a + b * b));\n    return { c0: Fp.mul(factor, Fp.create(a)), c1: Fp.mul(factor, Fp.create(-b)) };\n  },\n  sqrt: (num) => {\n    if (Fp2.eql(num, Fp2.ZERO)) return Fp2.ZERO; // Algo doesn't handles this case\n    // TODO: Optimize this line. It's extremely slow.\n    // Speeding this up would boost aggregateSignatures.\n    // https://eprint.iacr.org/2012/685.pdf applicable?\n    // https://github.com/zkcrypto/bls12_381/blob/080eaa74ec0e394377caa1ba302c8c121df08b07/src/fp2.rs#L250\n    // https://github.com/supranational/blst/blob/aae0c7d70b799ac269ff5edf29d8191dbd357876/src/exp2.c#L1\n    // Inspired by https://github.com/dalek-cryptography/curve25519-dalek/blob/17698df9d4c834204f83a3574143abacb4fc81a5/src/field.rs#L99\n    const candidateSqrt = Fp2.pow(num, (Fp2.ORDER + _8n) / _16n);\n    const check = Fp2.div(Fp2.sqr(candidateSqrt), num); // candidateSqrt.square().div(this);\n    const R = FP2_ROOTS_OF_UNITY;\n    const divisor = [R[0], R[2], R[4], R[6]].find((r) => Fp2.eql(r, check));\n    if (!divisor) throw new Error('No root');\n    const index = R.indexOf(divisor);\n    const root = R[index / 2];\n    if (!root) throw new Error('Invalid root');\n    const x1 = Fp2.div(candidateSqrt, root);\n    const x2 = Fp2.neg(x1);\n    const { re: re1, im: im1 } = Fp2.reim(x1);\n    const { re: re2, im: im2 } = Fp2.reim(x2);\n    if (im1 > im2 || (im1 === im2 && re1 > re2)) return x1;\n    return x2;\n  },\n  // Same as sgn0_m_eq_2 in RFC 9380\n  isOdd: (x: Fp2) => {\n    const { re: x0, im: x1 } = Fp2.reim(x);\n    const sign_0 = x0 % _2n;\n    const zero_0 = x0 === _0n;\n    const sign_1 = x1 % _2n;\n    return BigInt(sign_0 || (zero_0 && sign_1)) == _1n;\n  },\n  // Bytes util\n  fromBytes(b: Uint8Array): Fp2 {\n    if (b.length !== Fp2.BYTES) throw new Error(`fromBytes wrong length=${b.length}`);\n    return { c0: Fp.fromBytes(b.subarray(0, Fp.BYTES)), c1: Fp.fromBytes(b.subarray(Fp.BYTES)) };\n  },\n  toBytes: ({ c0, c1 }) => concatB(Fp.toBytes(c0), Fp.toBytes(c1)),\n  cmov: ({ c0, c1 }, { c0: r0, c1: r1 }, c) => ({\n    c0: Fp.cmov(c0, r0, c),\n    c1: Fp.cmov(c1, r1, c),\n  }),\n  // Specific utils\n  // toString() {\n  //   return `Fp2(${this.c0} + ${this.c1}\u00D7i)`;\n  // }\n  reim: ({ c0, c1 }) => ({ re: c0, im: c1 }),\n  // multiply by u + 1\n  mulByNonresidue: ({ c0, c1 }) => ({ c0: Fp.sub(c0, c1), c1: Fp.add(c0, c1) }),\n  multiplyByB: ({ c0, c1 }) => {\n    let t0 = Fp.mul(c0, _4n); // 4 * c0\n    let t1 = Fp.mul(c1, _4n); // 4 * c1\n    // (T0-T1) + (T0+T1)*i\n    return { c0: Fp.sub(t0, t1), c1: Fp.add(t0, t1) };\n  },\n  fromBigTuple: (tuple: BigintTuple | bigint[]) => {\n    if (tuple.length !== 2) throw new Error('Invalid tuple');\n    const fps = tuple.map((n) => Fp.create(n)) as [Fp, Fp];\n    return { c0: fps[0], c1: fps[1] };\n  },\n  frobeniusMap: ({ c0, c1 }, power: number): Fp2 => ({\n    c0,\n    c1: Fp.mul(c1, FP2_FROBENIUS_COEFFICIENTS[power % 2]),\n  }),\n};\n// Finite extension field over irreducible polynominal.\n// Fp(u) / (u\u00B2 - \u03B2) where \u03B2 = -1\nconst FP2_FROBENIUS_COEFFICIENTS = [\n  BigInt('0x1'),\n  BigInt(\n    '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaaa'\n  ),\n].map((item) => Fp.create(item));\n\n// For Fp2 roots of unity.\nconst rv1 = BigInt(\n  '0x6af0e0437ff400b6831e36d6bd17ffe48395dabc2d3435e77f76e17009241c5ee67992f72ec05f4c81084fbede3cc09'\n);\n// const ev1 =\n//   BigInt('0x699be3b8c6870965e5bf892ad5d2cc7b0e85a117402dfd83b7f4a947e02d978498255a2aaec0ac627b5afbdf1bf1c90');\n// const ev2 =\n//   BigInt('0x8157cd83046453f5dd0972b6e3949e4288020b5b8a9cc99ca07e27089a2ce2436d965026adad3ef7baba37f2183e9b5');\n// const ev3 =\n//   BigInt('0xab1c2ffdd6c253ca155231eb3e71ba044fd562f6f72bc5bad5ec46a0b7a3b0247cf08ce6c6317f40edbc653a72dee17');\n// const ev4 =\n//   BigInt('0xaa404866706722864480885d68ad0ccac1967c7544b447873cc37e0181271e006df72162a3d3e0287bf597fbf7f8fc1');\n\n// Eighth roots of unity, used for computing square roots in Fp2.\n// To verify or re-calculate:\n// Array(8).fill(new Fp2([1n, 1n])).map((fp2, k) => fp2.pow(Fp2.ORDER * BigInt(k) / 8n))\nconst FP2_ROOTS_OF_UNITY = [\n  [_1n, _0n],\n  [rv1, -rv1],\n  [_0n, _1n],\n  [rv1, rv1],\n  [-_1n, _0n],\n  [-rv1, rv1],\n  [_0n, -_1n],\n  [-rv1, -rv1],\n].map((pair) => Fp2.fromBigTuple(pair));\n// eta values, used for computing sqrt(g(X1(t)))\n// const FP2_ETAs = [\n//   [ev1, ev2],\n//   [-ev2, ev1],\n//   [ev3, ev4],\n//   [-ev4, ev3],\n// ].map((pair) => Fp2.fromBigTuple(pair));\n\n// Finite extension field over irreducible polynominal.\n// Fp2(v) / (v\u00B3 - \u03BE) where \u03BE = u + 1\ntype BigintSix = [bigint, bigint, bigint, bigint, bigint, bigint];\ntype Fp6 = { c0: Fp2; c1: Fp2; c2: Fp2 };\nconst Fp6Add = ({ c0, c1, c2 }: Fp6, { c0: r0, c1: r1, c2: r2 }: Fp6) => ({\n  c0: Fp2.add(c0, r0),\n  c1: Fp2.add(c1, r1),\n  c2: Fp2.add(c2, r2),\n});\nconst Fp6Subtract = ({ c0, c1, c2 }: Fp6, { c0: r0, c1: r1, c2: r2 }: Fp6) => ({\n  c0: Fp2.sub(c0, r0),\n  c1: Fp2.sub(c1, r1),\n  c2: Fp2.sub(c2, r2),\n});\nconst Fp6Multiply = ({ c0, c1, c2 }: Fp6, rhs: Fp6 | bigint) => {\n  if (typeof rhs === 'bigint') {\n    return {\n      c0: Fp2.mul(c0, rhs),\n      c1: Fp2.mul(c1, rhs),\n      c2: Fp2.mul(c2, rhs),\n    };\n  }\n  const { c0: r0, c1: r1, c2: r2 } = rhs;\n  const t0 = Fp2.mul(c0, r0); // c0 * o0\n  const t1 = Fp2.mul(c1, r1); // c1 * o1\n  const t2 = Fp2.mul(c2, r2); // c2 * o2\n  return {\n    // t0 + (c1 + c2) * (r1 * r2) - (T1 + T2) * (u + 1)\n    c0: Fp2.add(\n      t0,\n      Fp2.mulByNonresidue(Fp2.sub(Fp2.mul(Fp2.add(c1, c2), Fp2.add(r1, r2)), Fp2.add(t1, t2)))\n    ),\n    // (c0 + c1) * (r0 + r1) - (T0 + T1) + T2 * (u + 1)\n    c1: Fp2.add(\n      Fp2.sub(Fp2.mul(Fp2.add(c0, c1), Fp2.add(r0, r1)), Fp2.add(t0, t1)),\n      Fp2.mulByNonresidue(t2)\n    ),\n    // T1 + (c0 + c2) * (r0 + r2) - T0 + T2\n    c2: Fp2.sub(Fp2.add(t1, Fp2.mul(Fp2.add(c0, c2), Fp2.add(r0, r2))), Fp2.add(t0, t2)),\n  };\n};\nconst Fp6Square = ({ c0, c1, c2 }: Fp6) => {\n  let t0 = Fp2.sqr(c0); // c0\u00B2\n  let t1 = Fp2.mul(Fp2.mul(c0, c1), _2n); // 2 * c0 * c1\n  let t3 = Fp2.mul(Fp2.mul(c1, c2), _2n); // 2 * c1 * c2\n  let t4 = Fp2.sqr(c2); // c2\u00B2\n  return {\n    c0: Fp2.add(Fp2.mulByNonresidue(t3), t0), // T3 * (u + 1) + T0\n    c1: Fp2.add(Fp2.mulByNonresidue(t4), t1), // T4 * (u + 1) + T1\n    // T1 + (c0 - c1 + c2)\u00B2 + T3 - T0 - T4\n    c2: Fp2.sub(Fp2.sub(Fp2.add(Fp2.add(t1, Fp2.sqr(Fp2.add(Fp2.sub(c0, c1), c2))), t3), t0), t4),\n  };\n};\ntype Fp6Utils = {\n  fromBigSix: (tuple: BigintSix) => Fp6;\n  mulByNonresidue: (num: Fp6) => Fp6;\n  frobeniusMap(num: Fp6, power: number): Fp6;\n  multiplyBy1(num: Fp6, b1: Fp2): Fp6;\n  multiplyBy01(num: Fp6, b0: Fp2, b1: Fp2): Fp6;\n  multiplyByFp2(lhs: Fp6, rhs: Fp2): Fp6;\n};\n\nconst Fp6: mod.IField<Fp6> & Fp6Utils = {\n  ORDER: Fp2.ORDER, // TODO: unused, but need to verify\n  BITS: 3 * Fp2.BITS,\n  BYTES: 3 * Fp2.BYTES,\n  MASK: bitMask(3 * Fp2.BITS),\n  ZERO: { c0: Fp2.ZERO, c1: Fp2.ZERO, c2: Fp2.ZERO },\n  ONE: { c0: Fp2.ONE, c1: Fp2.ZERO, c2: Fp2.ZERO },\n  create: (num) => num,\n  isValid: ({ c0, c1, c2 }) => Fp2.isValid(c0) && Fp2.isValid(c1) && Fp2.isValid(c2),\n  is0: ({ c0, c1, c2 }) => Fp2.is0(c0) && Fp2.is0(c1) && Fp2.is0(c2),\n  neg: ({ c0, c1, c2 }) => ({ c0: Fp2.neg(c0), c1: Fp2.neg(c1), c2: Fp2.neg(c2) }),\n  eql: ({ c0, c1, c2 }, { c0: r0, c1: r1, c2: r2 }) =>\n    Fp2.eql(c0, r0) && Fp2.eql(c1, r1) && Fp2.eql(c2, r2),\n  sqrt: () => {\n    throw new Error('Not implemented');\n  },\n  // Do we need division by bigint at all? Should be done via order:\n  div: (lhs, rhs) => Fp6.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : Fp6.inv(rhs)),\n  pow: (num, power) => mod.FpPow(Fp6, num, power),\n  invertBatch: (nums) => mod.FpInvertBatch(Fp6, nums),\n  // Normalized\n  add: Fp6Add,\n  sub: Fp6Subtract,\n  mul: Fp6Multiply,\n  sqr: Fp6Square,\n  // NonNormalized stuff\n  addN: Fp6Add,\n  subN: Fp6Subtract,\n  mulN: Fp6Multiply,\n  sqrN: Fp6Square,\n\n  inv: ({ c0, c1, c2 }) => {\n    let t0 = Fp2.sub(Fp2.sqr(c0), Fp2.mulByNonresidue(Fp2.mul(c2, c1))); // c0\u00B2 - c2 * c1 * (u + 1)\n    let t1 = Fp2.sub(Fp2.mulByNonresidue(Fp2.sqr(c2)), Fp2.mul(c0, c1)); // c2\u00B2 * (u + 1) - c0 * c1\n    let t2 = Fp2.sub(Fp2.sqr(c1), Fp2.mul(c0, c2)); // c1\u00B2 - c0 * c2\n    // 1/(((c2 * T1 + c1 * T2) * v) + c0 * T0)\n    let t4 = Fp2.inv(\n      Fp2.add(Fp2.mulByNonresidue(Fp2.add(Fp2.mul(c2, t1), Fp2.mul(c1, t2))), Fp2.mul(c0, t0))\n    );\n    return { c0: Fp2.mul(t4, t0), c1: Fp2.mul(t4, t1), c2: Fp2.mul(t4, t2) };\n  },\n  // Bytes utils\n  fromBytes: (b: Uint8Array): Fp6 => {\n    if (b.length !== Fp6.BYTES) throw new Error(`fromBytes wrong length=${b.length}`);\n    return {\n      c0: Fp2.fromBytes(b.subarray(0, Fp2.BYTES)),\n      c1: Fp2.fromBytes(b.subarray(Fp2.BYTES, 2 * Fp2.BYTES)),\n      c2: Fp2.fromBytes(b.subarray(2 * Fp2.BYTES)),\n    };\n  },\n  toBytes: ({ c0, c1, c2 }): Uint8Array =>\n    concatB(Fp2.toBytes(c0), Fp2.toBytes(c1), Fp2.toBytes(c2)),\n  cmov: ({ c0, c1, c2 }: Fp6, { c0: r0, c1: r1, c2: r2 }: Fp6, c) => ({\n    c0: Fp2.cmov(c0, r0, c),\n    c1: Fp2.cmov(c1, r1, c),\n    c2: Fp2.cmov(c2, r2, c),\n  }),\n  // Utils\n  //   fromTriple(triple: [Fp2, Fp2, Fp2]) {\n  //     return new Fp6(...triple);\n  //   }\n  //   toString() {\n  //     return `Fp6(${this.c0} + ${this.c1} * v, ${this.c2} * v^2)`;\n  //   }\n  fromBigSix: (t: BigintSix): Fp6 => {\n    if (!Array.isArray(t) || t.length !== 6) throw new Error('Invalid Fp6 usage');\n    return {\n      c0: Fp2.fromBigTuple(t.slice(0, 2)),\n      c1: Fp2.fromBigTuple(t.slice(2, 4)),\n      c2: Fp2.fromBigTuple(t.slice(4, 6)),\n    };\n  },\n  frobeniusMap: ({ c0, c1, c2 }, power: number) => ({\n    c0: Fp2.frobeniusMap(c0, power),\n    c1: Fp2.mul(Fp2.frobeniusMap(c1, power), FP6_FROBENIUS_COEFFICIENTS_1[power % 6]),\n    c2: Fp2.mul(Fp2.frobeniusMap(c2, power), FP6_FROBENIUS_COEFFICIENTS_2[power % 6]),\n  }),\n  mulByNonresidue: ({ c0, c1, c2 }) => ({ c0: Fp2.mulByNonresidue(c2), c1: c0, c2: c1 }),\n\n  // Sparse multiplication\n  multiplyBy1: ({ c0, c1, c2 }, b1: Fp2): Fp6 => ({\n    c0: Fp2.mulByNonresidue(Fp2.mul(c2, b1)),\n    c1: Fp2.mul(c0, b1),\n    c2: Fp2.mul(c1, b1),\n  }),\n  // Sparse multiplication\n  multiplyBy01({ c0, c1, c2 }, b0: Fp2, b1: Fp2): Fp6 {\n    let t0 = Fp2.mul(c0, b0); // c0 * b0\n    let t1 = Fp2.mul(c1, b1); // c1 * b1\n    return {\n      // ((c1 + c2) * b1 - T1) * (u + 1) + T0\n      c0: Fp2.add(Fp2.mulByNonresidue(Fp2.sub(Fp2.mul(Fp2.add(c1, c2), b1), t1)), t0),\n      // (b0 + b1) * (c0 + c1) - T0 - T1\n      c1: Fp2.sub(Fp2.sub(Fp2.mul(Fp2.add(b0, b1), Fp2.add(c0, c1)), t0), t1),\n      // (c0 + c2) * b0 - T0 + T1\n      c2: Fp2.add(Fp2.sub(Fp2.mul(Fp2.add(c0, c2), b0), t0), t1),\n    };\n  },\n\n  multiplyByFp2: ({ c0, c1, c2 }, rhs: Fp2): Fp6 => ({\n    c0: Fp2.mul(c0, rhs),\n    c1: Fp2.mul(c1, rhs),\n    c2: Fp2.mul(c2, rhs),\n  }),\n};\n\nconst FP6_FROBENIUS_COEFFICIENTS_1 = [\n  [BigInt('0x1'), BigInt('0x0')],\n  [\n    BigInt('0x0'),\n    BigInt(\n      '0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaac'\n    ),\n  ],\n  [\n    BigInt(\n      '0x00000000000000005f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffe'\n    ),\n    BigInt('0x0'),\n  ],\n  [BigInt('0x0'), BigInt('0x1')],\n  [\n    BigInt(\n      '0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaac'\n    ),\n    BigInt('0x0'),\n  ],\n  [\n    BigInt('0x0'),\n    BigInt(\n      '0x00000000000000005f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffe'\n    ),\n  ],\n].map((pair) => Fp2.fromBigTuple(pair));\nconst FP6_FROBENIUS_COEFFICIENTS_2 = [\n  [BigInt('0x1'), BigInt('0x0')],\n  [\n    BigInt(\n      '0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaad'\n    ),\n    BigInt('0x0'),\n  ],\n  [\n    BigInt(\n      '0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaac'\n    ),\n    BigInt('0x0'),\n  ],\n  [\n    BigInt(\n      '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaaa'\n    ),\n    BigInt('0x0'),\n  ],\n  [\n    BigInt(\n      '0x00000000000000005f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffe'\n    ),\n    BigInt('0x0'),\n  ],\n  [\n    BigInt(\n      '0x00000000000000005f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffeffff'\n    ),\n    BigInt('0x0'),\n  ],\n].map((pair) => Fp2.fromBigTuple(pair));\n\n// Finite extension field over irreducible polynominal.\n// Fp\u2081\u2082 = Fp\u2086\u00B2 => Fp\u2082\u00B3\n// Fp\u2086(w) / (w\u00B2 - \u03B3) where \u03B3 = v\ntype Fp12 = { c0: Fp6; c1: Fp6 };\n// The BLS parameter x for BLS12-381\nconst BLS_X = BigInt('0xd201000000010000');\nconst BLS_X_LEN = bitLen(BLS_X);\n\n// prettier-ignore\ntype BigintTwelve = [\n    bigint, bigint, bigint, bigint, bigint, bigint,\n    bigint, bigint, bigint, bigint, bigint, bigint\n  ];\nconst Fp12Add = ({ c0, c1 }: Fp12, { c0: r0, c1: r1 }: Fp12) => ({\n  c0: Fp6.add(c0, r0),\n  c1: Fp6.add(c1, r1),\n});\nconst Fp12Subtract = ({ c0, c1 }: Fp12, { c0: r0, c1: r1 }: Fp12) => ({\n  c0: Fp6.sub(c0, r0),\n  c1: Fp6.sub(c1, r1),\n});\nconst Fp12Multiply = ({ c0, c1 }: Fp12, rhs: Fp12 | bigint) => {\n  if (typeof rhs === 'bigint') return { c0: Fp6.mul(c0, rhs), c1: Fp6.mul(c1, rhs) };\n  let { c0: r0, c1: r1 } = rhs;\n  let t1 = Fp6.mul(c0, r0); // c0 * r0\n  let t2 = Fp6.mul(c1, r1); // c1 * r1\n  return {\n    c0: Fp6.add(t1, Fp6.mulByNonresidue(t2)), // T1 + T2 * v\n    // (c0 + c1) * (r0 + r1) - (T1 + T2)\n    c1: Fp6.sub(Fp6.mul(Fp6.add(c0, c1), Fp6.add(r0, r1)), Fp6.add(t1, t2)),\n  };\n};\nconst Fp12Square = ({ c0, c1 }: Fp12) => {\n  let ab = Fp6.mul(c0, c1); // c0 * c1\n  return {\n    // (c1 * v + c0) * (c0 + c1) - AB - AB * v\n    c0: Fp6.sub(\n      Fp6.sub(Fp6.mul(Fp6.add(Fp6.mulByNonresidue(c1), c0), Fp6.add(c0, c1)), ab),\n      Fp6.mulByNonresidue(ab)\n    ),\n    c1: Fp6.add(ab, ab),\n  }; // AB + AB\n};\nfunction Fp4Square(a: Fp2, b: Fp2): { first: Fp2; second: Fp2 } {\n  const a2 = Fp2.sqr(a);\n  const b2 = Fp2.sqr(b);\n  return {\n    first: Fp2.add(Fp2.mulByNonresidue(b2), a2), // b\u00B2 * Nonresidue + a\u00B2\n    second: Fp2.sub(Fp2.sub(Fp2.sqr(Fp2.add(a, b)), a2), b2), // (a + b)\u00B2 - a\u00B2 - b\u00B2\n  };\n}\ntype Fp12Utils = {\n  fromBigTwelve: (t: BigintTwelve) => Fp12;\n  frobeniusMap(num: Fp12, power: number): Fp12;\n  multiplyBy014(num: Fp12, o0: Fp2, o1: Fp2, o4: Fp2): Fp12;\n  multiplyByFp2(lhs: Fp12, rhs: Fp2): Fp12;\n  conjugate(num: Fp12): Fp12;\n  finalExponentiate(num: Fp12): Fp12;\n  _cyclotomicSquare(num: Fp12): Fp12;\n  _cyclotomicExp(num: Fp12, n: bigint): Fp12;\n};\n\nconst Fp12: mod.IField<Fp12> & Fp12Utils = {\n  ORDER: Fp2.ORDER, // TODO: unused, but need to verify\n  BITS: 2 * Fp2.BITS,\n  BYTES: 2 * Fp2.BYTES,\n  MASK: bitMask(2 * Fp2.BITS),\n  ZERO: { c0: Fp6.ZERO, c1: Fp6.ZERO },\n  ONE: { c0: Fp6.ONE, c1: Fp6.ZERO },\n  create: (num) => num,\n  isValid: ({ c0, c1 }) => Fp6.isValid(c0) && Fp6.isValid(c1),\n  is0: ({ c0, c1 }) => Fp6.is0(c0) && Fp6.is0(c1),\n  neg: ({ c0, c1 }) => ({ c0: Fp6.neg(c0), c1: Fp6.neg(c1) }),\n  eql: ({ c0, c1 }, { c0: r0, c1: r1 }) => Fp6.eql(c0, r0) && Fp6.eql(c1, r1),\n  sqrt: () => {\n    throw new Error('Not implemented');\n  },\n  inv: ({ c0, c1 }) => {\n    let t = Fp6.inv(Fp6.sub(Fp6.sqr(c0), Fp6.mulByNonresidue(Fp6.sqr(c1)))); // 1 / (c0\u00B2 - c1\u00B2 * v)\n    return { c0: Fp6.mul(c0, t), c1: Fp6.neg(Fp6.mul(c1, t)) }; // ((C0 * T) * T) + (-C1 * T) * w\n  },\n  div: (lhs, rhs) =>\n    Fp12.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : Fp12.inv(rhs)),\n  pow: (num, power) => mod.FpPow(Fp12, num, power),\n  invertBatch: (nums) => mod.FpInvertBatch(Fp12, nums),\n  // Normalized\n  add: Fp12Add,\n  sub: Fp12Subtract,\n  mul: Fp12Multiply,\n  sqr: Fp12Square,\n  // NonNormalized stuff\n  addN: Fp12Add,\n  subN: Fp12Subtract,\n  mulN: Fp12Multiply,\n  sqrN: Fp12Square,\n\n  // Bytes utils\n  fromBytes: (b: Uint8Array): Fp12 => {\n    if (b.length !== Fp12.BYTES) throw new Error(`fromBytes wrong length=${b.length}`);\n    return {\n      c0: Fp6.fromBytes(b.subarray(0, Fp6.BYTES)),\n      c1: Fp6.fromBytes(b.subarray(Fp6.BYTES)),\n    };\n  },\n  toBytes: ({ c0, c1 }): Uint8Array => concatB(Fp6.toBytes(c0), Fp6.toBytes(c1)),\n  cmov: ({ c0, c1 }, { c0: r0, c1: r1 }, c) => ({\n    c0: Fp6.cmov(c0, r0, c),\n    c1: Fp6.cmov(c1, r1, c),\n  }),\n  // Utils\n  // toString() {\n  //   return `Fp12(${this.c0} + ${this.c1} * w)`;\n  // },\n  // fromTuple(c: [Fp6, Fp6]) {\n  //   return new Fp12(...c);\n  // }\n  fromBigTwelve: (t: BigintTwelve): Fp12 => ({\n    c0: Fp6.fromBigSix(t.slice(0, 6) as BigintSix),\n    c1: Fp6.fromBigSix(t.slice(6, 12) as BigintSix),\n  }),\n  // Raises to q**i -th power\n  frobeniusMap(lhs, power: number) {\n    const r0 = Fp6.frobeniusMap(lhs.c0, power);\n    const { c0, c1, c2 } = Fp6.frobeniusMap(lhs.c1, power);\n    const coeff = FP12_FROBENIUS_COEFFICIENTS[power % 12];\n    return {\n      c0: r0,\n      c1: Fp6.create({\n        c0: Fp2.mul(c0, coeff),\n        c1: Fp2.mul(c1, coeff),\n        c2: Fp2.mul(c2, coeff),\n      }),\n    };\n  },\n  // Sparse multiplication\n  multiplyBy014: ({ c0, c1 }, o0: Fp2, o1: Fp2, o4: Fp2) => {\n    let t0 = Fp6.multiplyBy01(c0, o0, o1);\n    let t1 = Fp6.multiplyBy1(c1, o4);\n    return {\n      c0: Fp6.add(Fp6.mulByNonresidue(t1), t0), // T1 * v + T0\n      // (c1 + c0) * [o0, o1+o4] - T0 - T1\n      c1: Fp6.sub(Fp6.sub(Fp6.multiplyBy01(Fp6.add(c1, c0), o0, Fp2.add(o1, o4)), t0), t1),\n    };\n  },\n  multiplyByFp2: ({ c0, c1 }, rhs: Fp2): Fp12 => ({\n    c0: Fp6.multiplyByFp2(c0, rhs),\n    c1: Fp6.multiplyByFp2(c1, rhs),\n  }),\n  conjugate: ({ c0, c1 }): Fp12 => ({ c0, c1: Fp6.neg(c1) }),\n\n  // A cyclotomic group is a subgroup of Fp^n defined by\n  //   G\u03A6\u2099(p) = {\u03B1 \u2208 Fp\u207F : \u03B1^\u03A6\u2099(p) = 1}\n  // The result of any pairing is in a cyclotomic subgroup\n  // https://eprint.iacr.org/2009/565.pdf\n  _cyclotomicSquare: ({ c0, c1 }): Fp12 => {\n    const { c0: c0c0, c1: c0c1, c2: c0c2 } = c0;\n    const { c0: c1c0, c1: c1c1, c2: c1c2 } = c1;\n    const { first: t3, second: t4 } = Fp4Square(c0c0, c1c1);\n    const { first: t5, second: t6 } = Fp4Square(c1c0, c0c2);\n    const { first: t7, second: t8 } = Fp4Square(c0c1, c1c2);\n    let t9 = Fp2.mulByNonresidue(t8); // T8 * (u + 1)\n    return {\n      c0: Fp6.create({\n        c0: Fp2.add(Fp2.mul(Fp2.sub(t3, c0c0), _2n), t3), // 2 * (T3 - c0c0)  + T3\n        c1: Fp2.add(Fp2.mul(Fp2.sub(t5, c0c1), _2n), t5), // 2 * (T5 - c0c1)  + T5\n        c2: Fp2.add(Fp2.mul(Fp2.sub(t7, c0c2), _2n), t7),\n      }), // 2 * (T7 - c0c2)  + T7\n      c1: Fp6.create({\n        c0: Fp2.add(Fp2.mul(Fp2.add(t9, c1c0), _2n), t9), // 2 * (T9 + c1c0) + T9\n        c1: Fp2.add(Fp2.mul(Fp2.add(t4, c1c1), _2n), t4), // 2 * (T4 + c1c1) + T4\n        c2: Fp2.add(Fp2.mul(Fp2.add(t6, c1c2), _2n), t6),\n      }),\n    }; // 2 * (T6 + c1c2) + T6\n  },\n  _cyclotomicExp(num, n) {\n    let z = Fp12.ONE;\n    for (let i = BLS_X_LEN - 1; i >= 0; i--) {\n      z = Fp12._cyclotomicSquare(z);\n      if (bitGet(n, i)) z = Fp12.mul(z, num);\n    }\n    return z;\n  },\n  // https://eprint.iacr.org/2010/354.pdf\n  // https://eprint.iacr.org/2009/565.pdf\n  finalExponentiate: (num) => {\n    const x = BLS_X;\n    // this^(q\u2076) / this\n    const t0 = Fp12.div(Fp12.frobeniusMap(num, 6), num);\n    // t0^(q\u00B2) * t0\n    const t1 = Fp12.mul(Fp12.frobeniusMap(t0, 2), t0);\n    const t2 = Fp12.conjugate(Fp12._cyclotomicExp(t1, x));\n    const t3 = Fp12.mul(Fp12.conjugate(Fp12._cyclotomicSquare(t1)), t2);\n    const t4 = Fp12.conjugate(Fp12._cyclotomicExp(t3, x));\n    const t5 = Fp12.conjugate(Fp12._cyclotomicExp(t4, x));\n    const t6 = Fp12.mul(Fp12.conjugate(Fp12._cyclotomicExp(t5, x)), Fp12._cyclotomicSquare(t2));\n    const t7 = Fp12.conjugate(Fp12._cyclotomicExp(t6, x));\n    const t2_t5_pow_q2 = Fp12.frobeniusMap(Fp12.mul(t2, t5), 2);\n    const t4_t1_pow_q3 = Fp12.frobeniusMap(Fp12.mul(t4, t1), 3);\n    const t6_t1c_pow_q1 = Fp12.frobeniusMap(Fp12.mul(t6, Fp12.conjugate(t1)), 1);\n    const t7_t3c_t1 = Fp12.mul(Fp12.mul(t7, Fp12.conjugate(t3)), t1);\n    // (t2 * t5)^(q\u00B2) * (t4 * t1)^(q\u00B3) * (t6 * t1.conj)^(q^1) * t7 * t3.conj * t1\n    return Fp12.mul(Fp12.mul(Fp12.mul(t2_t5_pow_q2, t4_t1_pow_q3), t6_t1c_pow_q1), t7_t3c_t1);\n  },\n};\nconst FP12_FROBENIUS_COEFFICIENTS = [\n  [BigInt('0x1'), BigInt('0x0')],\n  [\n    BigInt(\n      '0x1904d3bf02bb0667c231beb4202c0d1f0fd603fd3cbd5f4f7b2443d784bab9c4f67ea53d63e7813d8d0775ed92235fb8'\n    ),\n    BigInt(\n      '0x00fc3e2b36c4e03288e9e902231f9fb854a14787b6c7b36fec0c8ec971f63c5f282d5ac14d6c7ec22cf78a126ddc4af3'\n    ),\n  ],\n  [\n    BigInt(\n      '0x00000000000000005f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffeffff'\n    ),\n    BigInt('0x0'),\n  ],\n  [\n    BigInt(\n      '0x135203e60180a68ee2e9c448d77a2cd91c3dedd930b1cf60ef396489f61eb45e304466cf3e67fa0af1ee7b04121bdea2'\n    ),\n    BigInt(\n      '0x06af0e0437ff400b6831e36d6bd17ffe48395dabc2d3435e77f76e17009241c5ee67992f72ec05f4c81084fbede3cc09'\n    ),\n  ],\n  [\n    BigInt(\n      '0x00000000000000005f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffe'\n    ),\n    BigInt('0x0'),\n  ],\n  [\n    BigInt(\n      '0x144e4211384586c16bd3ad4afa99cc9170df3560e77982d0db45f3536814f0bd5871c1908bd478cd1ee605167ff82995'\n    ),\n    BigInt(\n      '0x05b2cfd9013a5fd8df47fa6b48b1e045f39816240c0b8fee8beadf4d8e9c0566c63a3e6e257f87329b18fae980078116'\n    ),\n  ],\n  [\n    BigInt(\n      '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaaa'\n    ),\n    BigInt('0x0'),\n  ],\n  [\n    BigInt(\n      '0x00fc3e2b36c4e03288e9e902231f9fb854a14787b6c7b36fec0c8ec971f63c5f282d5ac14d6c7ec22cf78a126ddc4af3'\n    ),\n    BigInt(\n      '0x1904d3bf02bb0667c231beb4202c0d1f0fd603fd3cbd5f4f7b2443d784bab9c4f67ea53d63e7813d8d0775ed92235fb8'\n    ),\n  ],\n  [\n    BigInt(\n      '0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaac'\n    ),\n    BigInt('0x0'),\n  ],\n  [\n    BigInt(\n      '0x06af0e0437ff400b6831e36d6bd17ffe48395dabc2d3435e77f76e17009241c5ee67992f72ec05f4c81084fbede3cc09'\n    ),\n    BigInt(\n      '0x135203e60180a68ee2e9c448d77a2cd91c3dedd930b1cf60ef396489f61eb45e304466cf3e67fa0af1ee7b04121bdea2'\n    ),\n  ],\n  [\n    BigInt(\n      '0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaad'\n    ),\n    BigInt('0x0'),\n  ],\n  [\n    BigInt(\n      '0x05b2cfd9013a5fd8df47fa6b48b1e045f39816240c0b8fee8beadf4d8e9c0566c63a3e6e257f87329b18fae980078116'\n    ),\n    BigInt(\n      '0x144e4211384586c16bd3ad4afa99cc9170df3560e77982d0db45f3536814f0bd5871c1908bd478cd1ee605167ff82995'\n    ),\n  ],\n].map((n) => Fp2.fromBigTuple(n));\n// END OF CURVE FIELDS\n\n// HashToCurve\n\n// 3-isogeny map from E' to E https://www.rfc-editor.org/rfc/rfc9380#appendix-E.3\nconst isogenyMapG2 = isogenyMap(\n  Fp2,\n  [\n    // xNum\n    [\n      [\n        '0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6',\n        '0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97d6',\n      ],\n      [\n        '0x0',\n        '0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71a',\n      ],\n      [\n        '0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71e',\n        '0x8ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38d',\n      ],\n      [\n        '0x171d6541fa38ccfaed6dea691f5fb614cb14b4e7f4e810aa22d6108f142b85757098e38d0f671c7188e2aaaaaaaa5ed1',\n        '0x0',\n      ],\n    ],\n    // xDen\n    [\n      [\n        '0x0',\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa63',\n      ],\n      [\n        '0xc',\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa9f',\n      ],\n      ['0x1', '0x0'], // LAST 1\n    ],\n    // yNum\n    [\n      [\n        '0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706',\n        '0x1530477c7ab4113b59a4c18b076d11930f7da5d4a07f649bf54439d87d27e500fc8c25ebf8c92f6812cfc71c71c6d706',\n      ],\n      [\n        '0x0',\n        '0x5c759507e8e333ebb5b7a9a47d7ed8532c52d39fd3a042a88b58423c50ae15d5c2638e343d9c71c6238aaaaaaaa97be',\n      ],\n      [\n        '0x11560bf17baa99bc32126fced787c88f984f87adf7ae0c7f9a208c6b4f20a4181472aaa9cb8d555526a9ffffffffc71c',\n        '0x8ab05f8bdd54cde190937e76bc3e447cc27c3d6fbd7063fcd104635a790520c0a395554e5c6aaaa9354ffffffffe38f',\n      ],\n      [\n        '0x124c9ad43b6cf79bfbf7043de3811ad0761b0f37a1e26286b0e977c69aa274524e79097a56dc4bd9e1b371c71c718b10',\n        '0x0',\n      ],\n    ],\n    // yDen\n    [\n      [\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fb',\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa8fb',\n      ],\n      [\n        '0x0',\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffa9d3',\n      ],\n      [\n        '0x12',\n        '0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaa99',\n      ],\n      ['0x1', '0x0'], // LAST 1\n    ],\n  ].map((i) => i.map((pair) => Fp2.fromBigTuple(pair.map(BigInt)))) as [Fp2[], Fp2[], Fp2[], Fp2[]]\n);\n// 11-isogeny map from E' to E\nconst isogenyMapG1 = isogenyMap(\n  Fp,\n  [\n    // xNum\n    [\n      '0x11a05f2b1e833340b809101dd99815856b303e88a2d7005ff2627b56cdb4e2c85610c2d5f2e62d6eaeac1662734649b7',\n      '0x17294ed3e943ab2f0588bab22147a81c7c17e75b2f6a8417f565e33c70d1e86b4838f2a6f318c356e834eef1b3cb83bb',\n      '0xd54005db97678ec1d1048c5d10a9a1bce032473295983e56878e501ec68e25c958c3e3d2a09729fe0179f9dac9edcb0',\n      '0x1778e7166fcc6db74e0609d307e55412d7f5e4656a8dbf25f1b33289f1b330835336e25ce3107193c5b388641d9b6861',\n      '0xe99726a3199f4436642b4b3e4118e5499db995a1257fb3f086eeb65982fac18985a286f301e77c451154ce9ac8895d9',\n      '0x1630c3250d7313ff01d1201bf7a74ab5db3cb17dd952799b9ed3ab9097e68f90a0870d2dcae73d19cd13c1c66f652983',\n      '0xd6ed6553fe44d296a3726c38ae652bfb11586264f0f8ce19008e218f9c86b2a8da25128c1052ecaddd7f225a139ed84',\n      '0x17b81e7701abdbe2e8743884d1117e53356de5ab275b4db1a682c62ef0f2753339b7c8f8c8f475af9ccb5618e3f0c88e',\n      '0x80d3cf1f9a78fc47b90b33563be990dc43b756ce79f5574a2c596c928c5d1de4fa295f296b74e956d71986a8497e317',\n      '0x169b1f8e1bcfa7c42e0c37515d138f22dd2ecb803a0c5c99676314baf4bb1b7fa3190b2edc0327797f241067be390c9e',\n      '0x10321da079ce07e272d8ec09d2565b0dfa7dccdde6787f96d50af36003b14866f69b771f8c285decca67df3f1605fb7b',\n      '0x6e08c248e260e70bd1e962381edee3d31d79d7e22c837bc23c0bf1bc24c6b68c24b1b80b64d391fa9c8ba2e8ba2d229',\n    ],\n    // xDen\n    [\n      '0x8ca8d548cff19ae18b2e62f4bd3fa6f01d5ef4ba35b48ba9c9588617fc8ac62b558d681be343df8993cf9fa40d21b1c',\n      '0x12561a5deb559c4348b4711298e536367041e8ca0cf0800c0126c2588c48bf5713daa8846cb026e9e5c8276ec82b3bff',\n      '0xb2962fe57a3225e8137e629bff2991f6f89416f5a718cd1fca64e00b11aceacd6a3d0967c94fedcfcc239ba5cb83e19',\n      '0x3425581a58ae2fec83aafef7c40eb545b08243f16b1655154cca8abc28d6fd04976d5243eecf5c4130de8938dc62cd8',\n      '0x13a8e162022914a80a6f1d5f43e7a07dffdfc759a12062bb8d6b44e833b306da9bd29ba81f35781d539d395b3532a21e',\n      '0xe7355f8e4e667b955390f7f0506c6e9395735e9ce9cad4d0a43bcef24b8982f7400d24bc4228f11c02df9a29f6304a5',\n      '0x772caacf16936190f3e0c63e0596721570f5799af53a1894e2e073062aede9cea73b3538f0de06cec2574496ee84a3a',\n      '0x14a7ac2a9d64a8b230b3f5b074cf01996e7f63c21bca68a81996e1cdf9822c580fa5b9489d11e2d311f7d99bbdcc5a5e',\n      '0xa10ecf6ada54f825e920b3dafc7a3cce07f8d1d7161366b74100da67f39883503826692abba43704776ec3a79a1d641',\n      '0x95fc13ab9e92ad4476d6e3eb3a56680f682b4ee96f7d03776df533978f31c1593174e4b4b7865002d6384d168ecdd0a',\n      '0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n      '0x90d97c81ba24ee0259d1f094980dcfa11ad138e48a869522b52af6c956543d3cd0c7aee9b3ba3c2be9845719707bb33',\n      '0x134996a104ee5811d51036d776fb46831223e96c254f383d0f906343eb67ad34d6c56711962fa8bfe097e75a2e41c696',\n      '0xcc786baa966e66f4a384c86a3b49942552e2d658a31ce2c344be4b91400da7d26d521628b00523b8dfe240c72de1f6',\n      '0x1f86376e8981c217898751ad8746757d42aa7b90eeb791c09e4a3ec03251cf9de405aba9ec61deca6355c77b0e5f4cb',\n      '0x8cc03fdefe0ff135caf4fe2a21529c4195536fbe3ce50b879833fd221351adc2ee7f8dc099040a841b6daecf2e8fedb',\n      '0x16603fca40634b6a2211e11db8f0a6a074a7d0d4afadb7bd76505c3d3ad5544e203f6326c95a807299b23ab13633a5f0',\n      '0x4ab0b9bcfac1bbcb2c977d027796b3ce75bb8ca2be184cb5231413c4d634f3747a87ac2460f415ec961f8855fe9d6f2',\n      '0x987c8d5333ab86fde9926bd2ca6c674170a05bfe3bdd81ffd038da6c26c842642f64550fedfe935a15e4ca31870fb29',\n      '0x9fc4018bd96684be88c9e221e4da1bb8f3abd16679dc26c1e8b6e6a1f20cabe69d65201c78607a360370e577bdba587',\n      '0xe1bba7a1186bdb5223abde7ada14a23c42a0ca7915af6fe06985e7ed1e4d43b9b3f7055dd4eba6f2bafaaebca731c30',\n      '0x19713e47937cd1be0dfd0b8f1d43fb93cd2fcbcb6caf493fd1183e416389e61031bf3a5cce3fbafce813711ad011c132',\n      '0x18b46a908f36f6deb918c143fed2edcc523559b8aaf0c2462e6bfe7f911f643249d9cdf41b44d606ce07c8a4d0074d8e',\n      '0xb182cac101b9399d155096004f53f447aa7b12a3426b08ec02710e807b4633f06c851c1919211f20d4c04f00b971ef8',\n      '0x245a394ad1eca9b72fc00ae7be315dc757b3b080d4c158013e6632d3c40659cc6cf90ad1c232a6442d9d3f5db980133',\n      '0x5c129645e44cf1102a159f748c4a3fc5e673d81d7e86568d9ab0f5d396a7ce46ba1049b6579afb7866b1e715475224b',\n      '0x15e6be4e990f03ce4ea50b3b42df2eb5cb181d8f84965a3957add4fa95af01b2b665027efec01c7704b456be69c8b604',\n    ],\n    // yDen\n    [\n      '0x16112c4c3a9c98b252181140fad0eae9601a6de578980be6eec3232b5be72e7a07f3688ef60c206d01479253b03663c1',\n      '0x1962d75c2381201e1a0cbd6c43c348b885c84ff731c4d59ca4a10356f453e01f78a4260763529e3532f6102c2e49a03d',\n      '0x58df3306640da276faaae7d6e8eb15778c4855551ae7f310c35a5dd279cd2eca6757cd636f96f891e2538b53dbf67f2',\n      '0x16b7d288798e5395f20d23bf89edb4d1d115c5dbddbcd30e123da489e726af41727364f2c28297ada8d26d98445f5416',\n      '0xbe0e079545f43e4b00cc912f8228ddcc6d19c9f0f69bbb0542eda0fc9dec916a20b15dc0fd2ededda39142311a5001d',\n      '0x8d9e5297186db2d9fb266eaac783182b70152c65550d881c5ecd87b6f0f5a6449f38db9dfa9cce202c6477faaf9b7ac',\n      '0x166007c08a99db2fc3ba8734ace9824b5eecfdfa8d0cf8ef5dd365bc400a0051d5fa9c01a58b1fb93d1a1399126a775c',\n      '0x16a3ef08be3ea7ea03bcddfabba6ff6ee5a4375efa1f4fd7feb34fd206357132b920f5b00801dee460ee415a15812ed9',\n      '0x1866c8ed336c61231a1be54fd1d74cc4f9fb0ce4c6af5920abc5750c4bf39b4852cfe2f7bb9248836b233d9d55535d4a',\n      '0x167a55cda70a6e1cea820597d94a84903216f763e13d87bb5308592e7ea7d4fbc7385ea3d529b35e346ef48bb8913f55',\n      '0x4d2f259eea405bd48f010a01ad2911d9c6dd039bb61a6290e591b36e636a5c871a5c29f4f83060400f8b49cba8f6aa8',\n      '0xaccbb67481d033ff5852c1e48c50c477f94ff8aefce42d28c0f9a88cea7913516f968986f7ebbea9684b529e2561092',\n      '0xad6b9514c767fe3c3613144b45f1496543346d98adf02267d5ceef9a00d9b8693000763e3b90ac11e99b138573345cc',\n      '0x2660400eb2e4f3b628bdd0d53cd76f2bf565b94e72927c1cb748df27942480e420517bd8714cc80d1fadc1326ed06f7',\n      '0xe0fa1d816ddc03e6b24255e0d7819c171c40f65e273b853324efcd6356caa205ca2f570f13497804415473a1d634b8f',\n      '0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n  ].map((i) => i.map((j) => BigInt(j))) as [Fp[], Fp[], Fp[], Fp[]]\n);\n\n// SWU Map - Fp2 to G2': y\u00B2 = x\u00B3 + 240i * x + 1012 + 1012i\nconst G2_SWU = mapToCurveSimpleSWU(Fp2, {\n  A: Fp2.create({ c0: Fp.create(_0n), c1: Fp.create(BigInt(240)) }), // A' = 240 * I\n  B: Fp2.create({ c0: Fp.create(BigInt(1012)), c1: Fp.create(BigInt(1012)) }), // B' = 1012 * (1 + I)\n  Z: Fp2.create({ c0: Fp.create(BigInt(-2)), c1: Fp.create(BigInt(-1)) }), // Z: -(2 + I)\n});\n// Optimized SWU Map - Fp to G1\nconst G1_SWU = mapToCurveSimpleSWU(Fp, {\n  A: Fp.create(\n    BigInt(\n      '0x144698a3b8e9433d693a02c96d4982b0ea985383ee66a8d8e8981aefd881ac98936f8da0e0f97f5cf428082d584c1d'\n    )\n  ),\n  B: Fp.create(\n    BigInt(\n      '0x12e2908d11688030018b12e8753eee3b2016c1f0f24f4070a0b9c14fcef35ef55a23215a316ceaa5d1cc48e98e172be0'\n    )\n  ),\n  Z: Fp.create(BigInt(11)),\n});\n\n// Endomorphisms (for fast cofactor clearing)\n// \u03A8(P) endomorphism\nconst ut_root = Fp6.create({ c0: Fp2.ZERO, c1: Fp2.ONE, c2: Fp2.ZERO });\nconst wsq = Fp12.create({ c0: ut_root, c1: Fp6.ZERO });\nconst wcu = Fp12.create({ c0: Fp6.ZERO, c1: ut_root });\nconst [wsq_inv, wcu_inv] = Fp12.invertBatch([wsq, wcu]);\nfunction psi(x: Fp2, y: Fp2): [Fp2, Fp2] {\n  // Untwist Fp2->Fp12 && frobenius(1) && twist back\n  const x2 = Fp12.mul(Fp12.frobeniusMap(Fp12.multiplyByFp2(wsq_inv, x), 1), wsq).c0.c0;\n  const y2 = Fp12.mul(Fp12.frobeniusMap(Fp12.multiplyByFp2(wcu_inv, y), 1), wcu).c0.c0;\n  return [x2, y2];\n}\n// \u03A8 endomorphism\nfunction G2psi(c: ProjConstructor<Fp2>, P: ProjPointType<Fp2>) {\n  const affine = P.toAffine();\n  const p = psi(affine.x, affine.y);\n  return new c(p[0], p[1], Fp2.ONE);\n}\n// \u03A8\u00B2(P) endomorphism\n// 1 / F2(2)^((p-1)/3) in GF(p\u00B2)\nconst PSI2_C1 = BigInt(\n  '0x1a0111ea397fe699ec02408663d4de85aa0d857d89759ad4897d29650fb85f9b409427eb4f49fffd8bfd00000000aaac'\n);\n\nfunction psi2(x: Fp2, y: Fp2): [Fp2, Fp2] {\n  return [Fp2.mul(x, PSI2_C1), Fp2.neg(y)];\n}\nfunction G2psi2(c: ProjConstructor<Fp2>, P: ProjPointType<Fp2>) {\n  const affine = P.toAffine();\n  const p = psi2(affine.x, affine.y);\n  return new c(p[0], p[1], Fp2.ONE);\n}\n\n// Default hash_to_field options are for hash to G2.\n//\n// Parameter definitions are in section 5.3 of the spec unless otherwise noted.\n// Parameter values come from section 8.8.2 of the spec.\n// https://www.rfc-editor.org/rfc/rfc9380#section-8.8.2\n//\n// Base field F is GF(p^m)\n// p = 0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab\n// m = 2 (or 1 for G1 see section 8.8.1)\n// k = 128\nconst htfDefaults = Object.freeze({\n  // DST: a domain separation tag\n  // defined in section 2.2.5\n  // Use utils.getDSTLabel(), utils.setDSTLabel(value)\n  DST: 'BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_NUL_',\n  encodeDST: 'BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_NUL_',\n  // p: the characteristic of F\n  //    where F is a finite field of characteristic p and order q = p^m\n  p: Fp.ORDER,\n  // m: the extension degree of F, m >= 1\n  //     where F is a finite field of characteristic p and order q = p^m\n  m: 2,\n  // k: the target security level for the suite in bits\n  // defined in section 5.1\n  k: 128,\n  // option to use a message that has already been processed by\n  // expand_message_xmd\n  expand: 'xmd',\n  // Hash functions for: expand_message_xmd is appropriate for use with a\n  // wide range of hash functions, including SHA-2, SHA-3, BLAKE2, and others.\n  // BBS+ uses blake2: https://github.com/hyperledger/aries-framework-go/issues/2247\n  hash: sha256,\n} as const);\n\n// Encoding utils\n// Point on G1 curve: (x, y)\n\n// Compressed point of infinity\nconst COMPRESSED_ZERO = setMask(Fp.toBytes(_0n), { infinity: true, compressed: true }); // set compressed & point-at-infinity bits\n\nfunction parseMask(bytes: Uint8Array) {\n  // Copy, so we can remove mask data. It will be removed also later, when Fp.create will call modulo.\n  bytes = bytes.slice();\n  const mask = bytes[0] & 0b1110_0000;\n  const compressed = !!((mask >> 7) & 1); // compression bit (0b1000_0000)\n  const infinity = !!((mask >> 6) & 1); // point at infinity bit (0b0100_0000)\n  const sort = !!((mask >> 5) & 1); // sort bit (0b0010_0000)\n  bytes[0] &= 0b0001_1111; // clear mask (zero first 3 bits)\n  return { compressed, infinity, sort, value: bytes };\n}\n\nfunction setMask(\n  bytes: Uint8Array,\n  mask: { compressed?: boolean; infinity?: boolean; sort?: boolean }\n) {\n  if (bytes[0] & 0b1110_0000) throw new Error('setMask: non-empty mask');\n  if (mask.compressed) bytes[0] |= 0b1000_0000;\n  if (mask.infinity) bytes[0] |= 0b0100_0000;\n  if (mask.sort) bytes[0] |= 0b0010_0000;\n  return bytes;\n}\n\nfunction signatureG1ToRawBytes(point: ProjPointType<Fp>) {\n  point.assertValidity();\n  const isZero = point.equals(bls12_381.G1.ProjectivePoint.ZERO);\n  const { x, y } = point.toAffine();\n  if (isZero) return COMPRESSED_ZERO.slice();\n  const P = Fp.ORDER;\n  const sort = Boolean((y * _2n) / P);\n  return setMask(numberToBytesBE(x, Fp.BYTES), { compressed: true, sort });\n}\n\nfunction signatureG2ToRawBytes(point: ProjPointType<Fp2>) {\n  // NOTE: by some reasons it was missed in bls12-381, looks like bug\n  point.assertValidity();\n  const len = Fp.BYTES;\n  if (point.equals(bls12_381.G2.ProjectivePoint.ZERO))\n    return concatB(COMPRESSED_ZERO, numberToBytesBE(_0n, len));\n  const { x, y } = point.toAffine();\n  const { re: x0, im: x1 } = Fp2.reim(x);\n  const { re: y0, im: y1 } = Fp2.reim(y);\n  const tmp = y1 > _0n ? y1 * _2n : y0 * _2n;\n  const sort = Boolean((tmp / Fp.ORDER) & _1n);\n  const z2 = x0;\n  return concatB(\n    setMask(numberToBytesBE(x1, len), { sort, compressed: true }),\n    numberToBytesBE(z2, len)\n  );\n}\n\n// To verify curve parameters, see pairing-friendly-curves spec:\n// https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-pairing-friendly-curves-11\n// Basic math is done over finite fields over p.\n// More complicated math is done over polynominal extension fields.\n// To simplify calculations in Fp12, we construct extension tower:\n// Fp\u2081\u2082 = Fp\u2086\u00B2 => Fp\u2082\u00B3\n// Fp(u) / (u\u00B2 - \u03B2) where \u03B2 = -1\n// Fp\u2082(v) / (v\u00B3 - \u03BE) where \u03BE = u + 1\n// Fp\u2086(w) / (w\u00B2 - \u03B3) where \u03B3 = v\n// Here goes constants && point encoding format\nexport const bls12_381: CurveFn<Fp, Fp2, Fp6, Fp12> = bls({\n  // Fields\n  fields: {\n    Fp,\n    Fp2,\n    Fp6,\n    Fp12,\n    Fr,\n  },\n  // G1 is the order-q subgroup of E1(Fp) : y\u00B2 = x\u00B3 + 4, #E1(Fp) = h1q, where\n  // characteristic; z + (z\u2074 - z\u00B2 + 1)(z - 1)\u00B2/3\n  G1: {\n    Fp,\n    // cofactor; (z - 1)\u00B2/3\n    h: BigInt('0x396c8c005555e1568c00aaab0000aaab'),\n    // generator's coordinates\n    // x = 3685416753713387016781088315183077757961620795782546409894578378688607592378376318836054947676345821548104185464507\n    // y = 1339506544944476473020471379941921221584933875938349620426543736416511423956333506472724655353366534992391756441569\n    Gx: BigInt(\n      '0x17f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb'\n    ),\n    Gy: BigInt(\n      '0x08b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e1'\n    ),\n    a: Fp.ZERO,\n    b: _4n,\n    htfDefaults: { ...htfDefaults, m: 1, DST: 'BLS_SIG_BLS12381G1_XMD:SHA-256_SSWU_RO_NUL_' },\n    wrapPrivateKey: true,\n    allowInfinityPoint: true,\n    // Checks is the point resides in prime-order subgroup.\n    // point.isTorsionFree() should return true for valid points\n    // It returns false for shitty points.\n    // https://eprint.iacr.org/2021/1130.pdf\n    isTorsionFree: (c, point): boolean => {\n      // \u03C6 endomorphism\n      const cubicRootOfUnityModP = BigInt(\n        '0x5f19672fdf76ce51ba69c6076a0f77eaddb3a93be6f89688de17d813620a00022e01fffffffefffe'\n      );\n      const phi = new c(Fp.mul(point.px, cubicRootOfUnityModP), point.py, point.pz);\n\n      // todo: unroll\n      const xP = point.multiplyUnsafe(bls12_381.params.x).negate(); // [x]P\n      const u2P = xP.multiplyUnsafe(bls12_381.params.x); // [u2]P\n      return u2P.equals(phi);\n\n      // https://eprint.iacr.org/2019/814.pdf\n      // (z\u00B2 \u2212 1)/3\n      // const c1 = BigInt('0x396c8c005555e1560000000055555555');\n      // const P = this;\n      // const S = P.sigma();\n      // const Q = S.double();\n      // const S2 = S.sigma();\n      // // [(z\u00B2 \u2212 1)/3](2\u03C3(P) \u2212 P \u2212 \u03C3\u00B2(P)) \u2212 \u03C3\u00B2(P) = O\n      // const left = Q.subtract(P).subtract(S2).multiplyUnsafe(c1);\n      // const C = left.subtract(S2);\n      // return C.isZero();\n    },\n    // Clear cofactor of G1\n    // https://eprint.iacr.org/2019/403\n    clearCofactor: (_c, point) => {\n      // return this.multiplyUnsafe(CURVE.h);\n      return point.multiplyUnsafe(bls12_381.params.x).add(point); // x*P + P\n    },\n    mapToCurve: (scalars: bigint[]) => {\n      const { x, y } = G1_SWU(Fp.create(scalars[0]));\n      return isogenyMapG1(x, y);\n    },\n    fromBytes: (bytes: Uint8Array): AffinePoint<Fp> => {\n      const { compressed, infinity, sort, value } = parseMask(bytes);\n      if (value.length === 48 && compressed) {\n        // TODO: Fp.bytes\n        const P = Fp.ORDER;\n        const compressedValue = bytesToNumberBE(value);\n        // Zero\n        const x = Fp.create(compressedValue & Fp.MASK);\n        if (infinity) {\n          if (x !== _0n) throw new Error('G1: non-empty compressed point at infinity');\n          return { x: _0n, y: _0n };\n        }\n        const right = Fp.add(Fp.pow(x, _3n), Fp.create(bls12_381.params.G1b)); // y\u00B2 = x\u00B3 + b\n        let y = Fp.sqrt(right);\n        if (!y) throw new Error('Invalid compressed G1 point');\n        if ((y * _2n) / P !== BigInt(sort)) y = Fp.neg(y);\n        return { x: Fp.create(x), y: Fp.create(y) };\n      } else if (value.length === 96 && !compressed) {\n        // Check if the infinity flag is set\n        const x = bytesToNumberBE(value.subarray(0, Fp.BYTES));\n        const y = bytesToNumberBE(value.subarray(Fp.BYTES));\n        if (infinity) {\n          if (x !== _0n || y !== _0n) throw new Error('G1: non-empty point at infinity');\n          return bls12_381.G1.ProjectivePoint.ZERO.toAffine();\n        }\n        return { x: Fp.create(x), y: Fp.create(y) };\n      } else {\n        throw new Error('Invalid point G1, expected 48/96 bytes');\n      }\n    },\n    toBytes: (c, point, isCompressed) => {\n      const isZero = point.equals(c.ZERO);\n      const { x, y } = point.toAffine();\n      if (isCompressed) {\n        if (isZero) return COMPRESSED_ZERO.slice();\n        const P = Fp.ORDER;\n        const sort = Boolean((y * _2n) / P);\n        return setMask(numberToBytesBE(x, Fp.BYTES), { compressed: true, sort });\n      } else {\n        if (isZero) {\n          // 2x PUBLIC_KEY_LENGTH\n          const x = concatB(new Uint8Array([0x40]), new Uint8Array(2 * Fp.BYTES - 1));\n          return x;\n        } else {\n          return concatB(numberToBytesBE(x, Fp.BYTES), numberToBytesBE(y, Fp.BYTES));\n        }\n      }\n    },\n    ShortSignature: {\n      fromHex(hex: Hex): ProjPointType<Fp> {\n        const { infinity, sort, value } = parseMask(ensureBytes('signatureHex', hex, 48));\n        const P = Fp.ORDER;\n        const compressedValue = bytesToNumberBE(value);\n        // Zero\n        if (infinity) return bls12_381.G1.ProjectivePoint.ZERO;\n        const x = Fp.create(compressedValue & Fp.MASK);\n        const right = Fp.add(Fp.pow(x, _3n), Fp.create(bls12_381.params.G1b)); // y\u00B2 = x\u00B3 + b\n        let y = Fp.sqrt(right);\n        if (!y) throw new Error('Invalid compressed G1 point');\n        const aflag = BigInt(sort);\n        if ((y * _2n) / P !== aflag) y = Fp.neg(y);\n        const point = bls12_381.G1.ProjectivePoint.fromAffine({ x, y });\n        point.assertValidity();\n        return point;\n      },\n      toRawBytes(point: ProjPointType<Fp>) {\n        return signatureG1ToRawBytes(point);\n      },\n      toHex(point: ProjPointType<Fp>) {\n        return bytesToHex(signatureG1ToRawBytes(point));\n      },\n    },\n  },\n  // G2 is the order-q subgroup of E2(Fp\u00B2) : y\u00B2 = x\u00B3+4(1+\u221A\u22121),\n  // where Fp2 is Fp[\u221A\u22121]/(x2+1). #E2(Fp2 ) = h2q, where\n  // G\u00B2 - 1\n  // h2q\n  G2: {\n    Fp: Fp2,\n    // cofactor\n    h: BigInt(\n      '0x5d543a95414e7f1091d50792876a202cd91de4547085abaa68a205b2e5a7ddfa628f1cb4d9e82ef21537e293a6691ae1616ec6e786f0c70cf1c38e31c7238e5'\n    ),\n    Gx: Fp2.fromBigTuple([\n      BigInt(\n        '0x024aa2b2f08f0a91260805272dc51051c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb8'\n      ),\n      BigInt(\n        '0x13e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e'\n      ),\n    ]),\n    // y =\n    // 927553665492332455747201965776037880757740193453592970025027978793976877002675564980949289727957565575433344219582,\n    // 1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905\n    Gy: Fp2.fromBigTuple([\n      BigInt(\n        '0x0ce5d527727d6e118cc9cdc6da2e351aadfd9baa8cbdd3a76d429a695160d12c923ac9cc3baca289e193548608b82801'\n      ),\n      BigInt(\n        '0x0606c4a02ea734cc32acd2b02bc28b99cb3e287e85a763af267492ab572e99ab3f370d275cec1da1aaa9075ff05f79be'\n      ),\n    ]),\n    a: Fp2.ZERO,\n    b: Fp2.fromBigTuple([_4n, _4n]),\n    hEff: BigInt(\n      '0xbc69f08f2ee75b3584c6a0ea91b352888e2a8e9145ad7689986ff031508ffe1329c2f178731db956d82bf015d1212b02ec0ec69d7477c1ae954cbc06689f6a359894c0adebbf6b4e8020005aaa95551'\n    ),\n    htfDefaults: { ...htfDefaults },\n    wrapPrivateKey: true,\n    allowInfinityPoint: true,\n    mapToCurve: (scalars: bigint[]) => {\n      const { x, y } = G2_SWU(Fp2.fromBigTuple(scalars));\n      return isogenyMapG2(x, y);\n    },\n    // Checks is the point resides in prime-order subgroup.\n    // point.isTorsionFree() should return true for valid points\n    // It returns false for shitty points.\n    // https://eprint.iacr.org/2021/1130.pdf\n    isTorsionFree: (c, P): boolean => {\n      return P.multiplyUnsafe(bls12_381.params.x).negate().equals(G2psi(c, P)); // \u03C8(P) == [u](P)\n      // Older version: https://eprint.iacr.org/2019/814.pdf\n      // \u03A8\u00B2(P) => \u03A8\u00B3(P) => [z]\u03A8\u00B3(P) where z = -x => [z]\u03A8\u00B3(P) - \u03A8\u00B2(P) + P == O\n      // return P.psi2().psi().mulNegX().subtract(psi2).add(P).isZero();\n    },\n    // Maps the point into the prime-order subgroup G2.\n    // clear_cofactor_bls12381_g2 from cfrg-hash-to-curve-11\n    // https://eprint.iacr.org/2017/419.pdf\n    // prettier-ignore\n    clearCofactor: (c, P) => {\n      const x = bls12_381.params.x;\n      let t1 = P.multiplyUnsafe(x).negate();  // [-x]P\n      let t2 = G2psi(c, P);                   // \u03A8(P)\n      let t3 = P.double();                    // 2P\n      t3 = G2psi2(c, t3);                     // \u03A8\u00B2(2P)\n      t3 = t3.subtract(t2);                   // \u03A8\u00B2(2P) - \u03A8(P)\n      t2 = t1.add(t2);                        // [-x]P + \u03A8(P)\n      t2 = t2.multiplyUnsafe(x).negate();     // [x\u00B2]P - [x]\u03A8(P)\n      t3 = t3.add(t2);                        // \u03A8\u00B2(2P) - \u03A8(P) + [x\u00B2]P - [x]\u03A8(P)\n      t3 = t3.subtract(t1);                   // \u03A8\u00B2(2P) - \u03A8(P) + [x\u00B2]P - [x]\u03A8(P) + [x]P\n      const Q = t3.subtract(P);               // \u03A8\u00B2(2P) - \u03A8(P) + [x\u00B2]P - [x]\u03A8(P) + [x]P - 1P\n      return Q;                               // [x\u00B2-x-1]P + [x-1]\u03A8(P) + \u03A8\u00B2(2P)\n    },\n    fromBytes: (bytes: Uint8Array): AffinePoint<Fp2> => {\n      const { compressed, infinity, sort, value } = parseMask(bytes);\n      if (\n        (!compressed && !infinity && sort) || // 00100000\n        (!compressed && infinity && sort) || // 01100000\n        (sort && infinity && compressed) // 11100000\n      ) {\n        throw new Error('Invalid encoding flag: ' + (bytes[0] & 0b1110_0000));\n      }\n      const L = Fp.BYTES;\n      const slc = (b: Uint8Array, from: number, to?: number) => bytesToNumberBE(b.slice(from, to));\n      if (value.length === 96 && compressed) {\n        const b = bls12_381.params.G2b;\n        const P = Fp.ORDER;\n        if (infinity) {\n          // check that all bytes are 0\n          if (value.reduce((p, c) => (p !== 0 ? c + 1 : c), 0) > 0) {\n            throw new Error('Invalid compressed G2 point');\n          }\n          return { x: Fp2.ZERO, y: Fp2.ZERO };\n        }\n        const x_1 = slc(value, 0, L);\n        const x_0 = slc(value, L, 2 * L);\n        const x = Fp2.create({ c0: Fp.create(x_0), c1: Fp.create(x_1) });\n        const right = Fp2.add(Fp2.pow(x, _3n), b); // y\u00B2 = x\u00B3 + 4 * (u+1) = x\u00B3 + b\n        let y = Fp2.sqrt(right);\n        const Y_bit = y.c1 === _0n ? (y.c0 * _2n) / P : (y.c1 * _2n) / P ? _1n : _0n;\n        y = sort && Y_bit > 0 ? y : Fp2.neg(y);\n        return { x, y };\n      } else if (value.length === 192 && !compressed) {\n        if (infinity) {\n          if (value.reduce((p, c) => (p !== 0 ? c + 1 : c), 0) > 0) {\n            throw new Error('Invalid uncompressed G2 point');\n          }\n          return { x: Fp2.ZERO, y: Fp2.ZERO };\n        }\n        const x1 = slc(value, 0, L);\n        const x0 = slc(value, L, 2 * L);\n        const y1 = slc(value, 2 * L, 3 * L);\n        const y0 = slc(value, 3 * L, 4 * L);\n        return { x: Fp2.fromBigTuple([x0, x1]), y: Fp2.fromBigTuple([y0, y1]) };\n      } else {\n        throw new Error('Invalid point G2, expected 96/192 bytes');\n      }\n    },\n    toBytes: (c, point, isCompressed) => {\n      const { BYTES: len, ORDER: P } = Fp;\n      const isZero = point.equals(c.ZERO);\n      const { x, y } = point.toAffine();\n      if (isCompressed) {\n        if (isZero) return concatB(COMPRESSED_ZERO, numberToBytesBE(_0n, len));\n        const flag = Boolean(y.c1 === _0n ? (y.c0 * _2n) / P : (y.c1 * _2n) / P);\n        return concatB(\n          setMask(numberToBytesBE(x.c1, len), { compressed: true, sort: flag }),\n          numberToBytesBE(x.c0, len)\n        );\n      } else {\n        if (isZero) return concatB(new Uint8Array([0x40]), new Uint8Array(4 * len - 1)); // bytes[0] |= 1 << 6;\n        const { re: x0, im: x1 } = Fp2.reim(x);\n        const { re: y0, im: y1 } = Fp2.reim(y);\n        return concatB(\n          numberToBytesBE(x1, len),\n          numberToBytesBE(x0, len),\n          numberToBytesBE(y1, len),\n          numberToBytesBE(y0, len)\n        );\n      }\n    },\n    Signature: {\n      // TODO: Optimize, it's very slow because of sqrt.\n      fromHex(hex: Hex): ProjPointType<Fp2> {\n        const { infinity, sort, value } = parseMask(ensureBytes('signatureHex', hex));\n        const P = Fp.ORDER;\n        const half = value.length / 2;\n        if (half !== 48 && half !== 96)\n          throw new Error('Invalid compressed signature length, must be 96 or 192');\n        const z1 = bytesToNumberBE(value.slice(0, half));\n        const z2 = bytesToNumberBE(value.slice(half));\n        // Indicates the infinity point\n        if (infinity) return bls12_381.G2.ProjectivePoint.ZERO;\n        const x1 = Fp.create(z1 & Fp.MASK);\n        const x2 = Fp.create(z2);\n        const x = Fp2.create({ c0: x2, c1: x1 });\n        const y2 = Fp2.add(Fp2.pow(x, _3n), bls12_381.params.G2b); // y\u00B2 = x\u00B3 + 4\n        // The slow part\n        let y = Fp2.sqrt(y2);\n        if (!y) throw new Error('Failed to find a square root');\n\n        // Choose the y whose leftmost bit of the imaginary part is equal to the a_flag1\n        // If y1 happens to be zero, then use the bit of y0\n        const { re: y0, im: y1 } = Fp2.reim(y);\n        const aflag1 = BigInt(sort);\n        const isGreater = y1 > _0n && (y1 * _2n) / P !== aflag1;\n        const isZero = y1 === _0n && (y0 * _2n) / P !== aflag1;\n        if (isGreater || isZero) y = Fp2.neg(y);\n        const point = bls12_381.G2.ProjectivePoint.fromAffine({ x, y });\n        point.assertValidity();\n        return point;\n      },\n      toRawBytes(point: ProjPointType<Fp2>) {\n        return signatureG2ToRawBytes(point);\n      },\n      toHex(point: ProjPointType<Fp2>) {\n        return bytesToHex(signatureG2ToRawBytes(point));\n      },\n    },\n  },\n  params: {\n    x: BLS_X, // The BLS parameter x for BLS12-381\n    r: Fr.ORDER, // order; z\u2074 \u2212 z\u00B2 + 1; CURVE.n from other curves\n  },\n  htfDefaults,\n  hash: sha256,\n  randomBytes,\n});\n", "import { bls12_381 } from '@noble/curves/bls12-381';\nimport { toHex } from './buffer';\n\nexport let verify: (pk: Uint8Array, sig: Uint8Array, msg: Uint8Array) => boolean;\n\n/**\n *\n * @param pk primary key: Uint8Array\n * @param sig signature: Uint8Array\n * @param msg message: Uint8Array\n * @returns boolean\n */\nexport function blsVerify(pk: Uint8Array, sig: Uint8Array, msg: Uint8Array): boolean {\n  const primaryKey = typeof pk === 'string' ? pk : toHex(pk);\n  const signature = typeof sig === 'string' ? sig : toHex(sig);\n  const message = typeof msg === 'string' ? msg : toHex(msg);\n  return bls12_381.verifyShortSignature(signature, message, primaryKey);\n}\n", "import { PipeArrayBuffer, lebDecode } from '@dfinity/candid';\n\nexport const decodeLeb128 = (buf: ArrayBuffer): bigint => {\n  return lebDecode(new PipeArrayBuffer(buf));\n};\n\n// time is a LEB128-encoded Nat\nexport const decodeTime = (buf: ArrayBuffer): Date => {\n  const decoded = decodeLeb128(buf);\n\n  // nanoseconds to milliseconds\n  return new Date(Number(decoded) / 1_000_000);\n};\n", "import * as cbor from './cbor';\nimport { AgentError } from './errors';\nimport { hash } from './request_id';\nimport { concat, fromHex, toHex } from './utils/buffer';\nimport { Principal } from '@dfinity/principal';\nimport * as bls from './utils/bls';\nimport { decodeTime } from './utils/leb';\n\n/**\n * A certificate may fail verification with respect to the provided public key\n */\nexport class CertificateVerificationError extends AgentError {\n  constructor(reason: string) {\n    super(`Invalid certificate: ${reason}`);\n  }\n}\n\nexport interface Cert {\n  tree: HashTree;\n  signature: ArrayBuffer;\n  delegation?: Delegation;\n}\n\nconst NodeId = {\n  Empty: 0,\n  Fork: 1,\n  Labeled: 2,\n  Leaf: 3,\n  Pruned: 4,\n};\n\nexport type NodeIdType = typeof NodeId[keyof typeof NodeId];\n\nexport { NodeId };\n\nexport type HashTree =\n  | [typeof NodeId.Empty]\n  | [typeof NodeId.Fork, HashTree, HashTree]\n  | [typeof NodeId.Labeled, ArrayBuffer, HashTree]\n  | [typeof NodeId.Leaf, ArrayBuffer]\n  | [typeof NodeId.Pruned, ArrayBuffer];\n\n/**\n * Make a human readable string out of a hash tree.\n * @param tree\n */\nexport function hashTreeToString(tree: HashTree): string {\n  const indent = (s: string) =>\n    s\n      .split('\\n')\n      .map(x => '  ' + x)\n      .join('\\n');\n  function labelToString(label: ArrayBuffer): string {\n    const decoder = new TextDecoder(undefined, { fatal: true });\n    try {\n      return JSON.stringify(decoder.decode(label));\n    } catch (e) {\n      return `data(...${label.byteLength} bytes)`;\n    }\n  }\n\n  switch (tree[0]) {\n    case NodeId.Empty:\n      return '()';\n    case NodeId.Fork: {\n      if (tree[1] instanceof Array && tree[2] instanceof ArrayBuffer) {\n        const left = hashTreeToString(tree[1]);\n        const right = hashTreeToString(tree[2]);\n        return `sub(\\n left:\\n${indent(left)}\\n---\\n right:\\n${indent(right)}\\n)`;\n      } else {\n        throw new Error('Invalid tree structure for fork');\n      }\n    }\n    case NodeId.Labeled: {\n      if (tree[1] instanceof ArrayBuffer && tree[2] instanceof ArrayBuffer) {\n        const label = labelToString(tree[1]);\n        const sub = hashTreeToString(tree[2]);\n        return `label(\\n label:\\n${indent(label)}\\n sub:\\n${indent(sub)}\\n)`;\n      } else {\n        throw new Error('Invalid tree structure for labeled');\n      }\n    }\n    case NodeId.Leaf: {\n      if (!tree[1]) {\n        throw new Error('Invalid tree structure for leaf');\n      } else if (Array.isArray(tree[1])) {\n        return JSON.stringify(tree[1]);\n      }\n      return `leaf(...${tree[1].byteLength} bytes)`;\n    }\n    case NodeId.Pruned: {\n      if (!tree[1]) {\n        throw new Error('Invalid tree structure for pruned');\n      } else if (Array.isArray(tree[1])) {\n        return JSON.stringify(tree[1]);\n      }\n\n      return `pruned(${toHex(new Uint8Array(tree[1]))}`;\n    }\n    default: {\n      return `unknown(${JSON.stringify(tree[0])})`;\n    }\n  }\n}\n\ninterface Delegation extends Record<string, unknown> {\n  subnet_id: ArrayBuffer;\n  certificate: ArrayBuffer;\n}\n\nfunction isBufferEqual(a: ArrayBuffer, b: ArrayBuffer): boolean {\n  if (a.byteLength !== b.byteLength) {\n    return false;\n  }\n  const a8 = new Uint8Array(a);\n  const b8 = new Uint8Array(b);\n  for (let i = 0; i < a8.length; i++) {\n    if (a8[i] !== b8[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\ntype VerifyFunc = (pk: Uint8Array, sig: Uint8Array, msg: Uint8Array) => Promise<boolean> | boolean;\n\nexport interface CreateCertificateOptions {\n  /**\n   * The bytes encoding the certificate to be verified\n   */\n  certificate: ArrayBuffer;\n  /**\n   * The root key against which to verify the certificate\n   * (normally, the root key of the IC main network)\n   */\n  rootKey: ArrayBuffer;\n  /**\n   * The effective canister ID of the request when verifying a response, or\n   * the signing canister ID when verifying a certified variable.\n   */\n  canisterId: Principal;\n  /**\n   * BLS Verification strategy. Default strategy uses wasm for performance, but that may not be available in all contexts.\n   */\n  blsVerify?: VerifyFunc;\n\n  /**\n   * The maximum age of the certificate in minutes. Default is 5 minutes.\n   * @default 5\n   * This is used to verify the time the certificate was signed, particularly for validating Delegation certificates, which can live for longer than the default window of +/- 5 minutes. If the certificate is\n   * older than the specified age, it will fail verification.\n   */\n  maxAgeInMinutes?: number;\n}\n\nexport class Certificate {\n  private readonly cert: Cert;\n\n  /**\n   * Create a new instance of a certificate, automatically verifying it. Throws a\n   * CertificateVerificationError if the certificate cannot be verified.\n   * @constructs  Certificate\n   * @param {CreateCertificateOptions} options {@link CreateCertificateOptions}\n   * @param {ArrayBuffer} options.certificate The bytes of the certificate\n   * @param {ArrayBuffer} options.rootKey The root key to verify against\n   * @param {Principal} options.canisterId The effective or signing canister ID\n   * @param {number} options.maxAgeInMinutes The maximum age of the certificate in minutes. Default is 5 minutes.\n   * @throws {CertificateVerificationError}\n   */\n  public static async create(options: CreateCertificateOptions): Promise<Certificate> {\n    const cert = Certificate.createUnverified(options);\n\n    await cert.verify();\n    return cert;\n  }\n\n  private static createUnverified(options: CreateCertificateOptions): Certificate {\n    let blsVerify = options.blsVerify;\n    if (!blsVerify) {\n      blsVerify = bls.blsVerify;\n    }\n    return new Certificate(\n      options.certificate,\n      options.rootKey,\n      options.canisterId,\n      blsVerify,\n      options.maxAgeInMinutes,\n    );\n  }\n\n  private constructor(\n    certificate: ArrayBuffer,\n    private _rootKey: ArrayBuffer,\n    private _canisterId: Principal,\n    private _blsVerify: VerifyFunc,\n    // Default to 5 minutes\n    private _maxAgeInMinutes: number = 5,\n  ) {\n    this.cert = cbor.decode(new Uint8Array(certificate));\n  }\n\n  public lookup(path: Array<ArrayBuffer | string>): ArrayBuffer | undefined {\n    // constrain the type of the result, so that empty HashTree is undefined\n    return lookupResultToBuffer(lookup_path(path, this.cert.tree));\n  }\n\n  public lookup_label(label: ArrayBuffer): ArrayBuffer | HashTree | undefined {\n    return this.lookup([label]);\n  }\n\n  private async verify(): Promise<void> {\n    const rootHash = await reconstruct(this.cert.tree);\n    const derKey = await this._checkDelegationAndGetKey(this.cert.delegation);\n    const sig = this.cert.signature;\n    const key = extractDER(derKey);\n    const msg = concat(domain_sep('ic-state-root'), rootHash);\n    let sigVer = false;\n\n    const lookupTime = this.lookup(['time']);\n    if (!lookupTime) {\n      // Should never happen - time is always present in IC certificates\n      throw new CertificateVerificationError('Certificate does not contain a time');\n    }\n\n    const FIVE_MINUTES_IN_MSEC = 5 * 60 * 1000;\n    const MAX_AGE_IN_MSEC = this._maxAgeInMinutes * 60 * 1000;\n    const now = Date.now();\n    const earliestCertificateTime = now - MAX_AGE_IN_MSEC;\n    const fiveMinutesFromNow = now + FIVE_MINUTES_IN_MSEC;\n\n    const certTime = decodeTime(lookupTime);\n\n    if (certTime.getTime() < earliestCertificateTime) {\n      throw new CertificateVerificationError(\n        `Certificate is signed more than ${this._maxAgeInMinutes} minutes in the past. Certificate time: ` +\n          certTime.toISOString() +\n          ' Current time: ' +\n          new Date(now).toISOString(),\n      );\n    } else if (certTime.getTime() > fiveMinutesFromNow) {\n      throw new CertificateVerificationError(\n        'Certificate is signed more than 5 minutes in the future. Certificate time: ' +\n          certTime.toISOString() +\n          ' Current time: ' +\n          new Date(now).toISOString(),\n      );\n    }\n\n    try {\n      sigVer = await this._blsVerify(new Uint8Array(key), new Uint8Array(sig), new Uint8Array(msg));\n    } catch (err) {\n      sigVer = false;\n    }\n    if (!sigVer) {\n      throw new CertificateVerificationError('Signature verification failed');\n    }\n  }\n\n  private async _checkDelegationAndGetKey(d?: Delegation): Promise<ArrayBuffer> {\n    if (!d) {\n      return this._rootKey;\n    }\n\n    const cert: Certificate = await Certificate.createUnverified({\n      certificate: d.certificate,\n      rootKey: this._rootKey,\n      canisterId: this._canisterId,\n      blsVerify: this._blsVerify,\n      // Do not check max age for delegation certificates\n      maxAgeInMinutes: Infinity,\n    });\n\n    if (cert.cert.delegation) {\n      throw new CertificateVerificationError('Delegation certificates cannot be nested');\n    }\n\n    await cert.verify();\n\n    const canisterInRange = check_canister_ranges({\n      canisterId: this._canisterId,\n      subnetId: Principal.fromUint8Array(new Uint8Array(d.subnet_id)),\n      tree: cert.cert.tree,\n    });\n    if (!canisterInRange) {\n      throw new CertificateVerificationError(\n        `Canister ${this._canisterId} not in range of delegations for subnet 0x${toHex(\n          d.subnet_id,\n        )}`,\n      );\n    }\n    const publicKeyLookup = cert.lookup(['subnet', d.subnet_id, 'public_key']);\n    if (!publicKeyLookup) {\n      throw new Error(`Could not find subnet key for subnet 0x${toHex(d.subnet_id)}`);\n    }\n    return publicKeyLookup;\n  }\n}\n\nconst DER_PREFIX = fromHex(\n  '308182301d060d2b0601040182dc7c0503010201060c2b0601040182dc7c05030201036100',\n);\nconst KEY_LENGTH = 96;\n\nfunction extractDER(buf: ArrayBuffer): ArrayBuffer {\n  const expectedLength = DER_PREFIX.byteLength + KEY_LENGTH;\n  if (buf.byteLength !== expectedLength) {\n    throw new TypeError(`BLS DER-encoded public key must be ${expectedLength} bytes long`);\n  }\n  const prefix = buf.slice(0, DER_PREFIX.byteLength);\n  if (!isBufferEqual(prefix, DER_PREFIX)) {\n    throw new TypeError(\n      `BLS DER-encoded public key is invalid. Expect the following prefix: ${DER_PREFIX}, but get ${prefix}`,\n    );\n  }\n\n  return buf.slice(DER_PREFIX.byteLength);\n}\n\n/**\n * utility function to constrain the type of a path\n * @param {ArrayBuffer | HashTree | undefined} result - the result of a lookup\n * @returns ArrayBuffer or Undefined\n */\nexport function lookupResultToBuffer(\n  result: ArrayBuffer | HashTree | undefined,\n): ArrayBuffer | undefined {\n  if (result instanceof ArrayBuffer) {\n    return result;\n  } else if (result instanceof Uint8Array) {\n    return result.buffer;\n  }\n  return undefined;\n}\n\n/**\n * @param t\n */\nexport async function reconstruct(t: HashTree): Promise<ArrayBuffer> {\n  switch (t[0]) {\n    case NodeId.Empty:\n      return hash(domain_sep('ic-hashtree-empty'));\n    case NodeId.Pruned:\n      return t[1] as ArrayBuffer;\n    case NodeId.Leaf:\n      return hash(concat(domain_sep('ic-hashtree-leaf'), t[1] as ArrayBuffer));\n    case NodeId.Labeled:\n      return hash(\n        concat(\n          domain_sep('ic-hashtree-labeled'),\n          t[1] as ArrayBuffer,\n          await reconstruct(t[2] as HashTree),\n        ),\n      );\n    case NodeId.Fork:\n      return hash(\n        concat(\n          domain_sep('ic-hashtree-fork'),\n          await reconstruct(t[1] as HashTree),\n          await reconstruct(t[2] as HashTree),\n        ),\n      );\n    default:\n      throw new Error('unreachable');\n  }\n}\n\nfunction domain_sep(s: string): ArrayBuffer {\n  const len = new Uint8Array([s.length]);\n  const str = new TextEncoder().encode(s);\n  return concat(len, str);\n}\n\n/**\n * @param path\n * @param tree\n */\nexport function lookup_path(\n  path: Array<ArrayBuffer | string>,\n  tree: HashTree,\n): ArrayBuffer | HashTree | undefined {\n  if (path.length === 0) {\n    switch (tree[0]) {\n      case NodeId.Leaf: {\n        // should not be undefined\n        if (!tree[1]) throw new Error('Invalid tree structure for leaf');\n        if (tree[1] instanceof ArrayBuffer) {\n          return tree[1];\n        } else if (tree[1] instanceof Uint8Array) {\n          return tree[1].buffer;\n        } else return tree[1];\n      }\n      case NodeId.Fork: {\n        return tree;\n      }\n      default: {\n        return tree;\n      }\n    }\n  }\n\n  const label = typeof path[0] === 'string' ? new TextEncoder().encode(path[0]) : path[0];\n  const t = find_label(label, flatten_forks(tree));\n  if (t) {\n    return lookup_path(path.slice(1), t);\n  }\n}\n\n/**\n * If the tree is a fork, flatten it into an array of trees\n * @param t - the tree to flatten\n * @returns HashTree[] - the flattened tree\n */\nexport function flatten_forks(t: HashTree): HashTree[] {\n  switch (t[0]) {\n    case NodeId.Empty:\n      return [];\n    case NodeId.Fork:\n      return flatten_forks(t[1] as HashTree).concat(flatten_forks(t[2] as HashTree));\n    default:\n      return [t];\n  }\n}\n\nfunction find_label(l: ArrayBuffer, trees: HashTree[]): HashTree | undefined {\n  if (trees.length === 0) {\n    return undefined;\n  }\n  for (const t of trees) {\n    if (t[0] === NodeId.Labeled) {\n      const p = t[1] as ArrayBuffer;\n      if (isBufferEqual(l, p)) {\n        return t[2];\n      }\n    }\n  }\n}\n\n/**\n * Check if a canister falls within a range of canisters\n * @param canisterId Principal\n * @param ranges [Principal, Principal][]\n * @returns\n */\nexport function check_canister_ranges(params: {\n  canisterId: Principal;\n  subnetId: Principal;\n  tree: HashTree;\n}): boolean {\n  const { canisterId, subnetId, tree } = params;\n  const rangeLookup = lookup_path(['subnet', subnetId.toUint8Array(), 'canister_ranges'], tree);\n\n  if (!rangeLookup || !(rangeLookup instanceof ArrayBuffer)) {\n    throw new Error(`Could not find canister ranges for subnet ${subnetId}`);\n  }\n\n  const ranges_arr: Array<[Uint8Array, Uint8Array]> = cbor.decode(rangeLookup);\n  const ranges: Array<[Principal, Principal]> = ranges_arr.map(v => [\n    Principal.fromUint8Array(v[0]),\n    Principal.fromUint8Array(v[1]),\n  ]);\n\n  const canisterInRange = ranges.some(r => r[0].ltEq(canisterId) && r[1].gtEq(canisterId));\n\n  return canisterInRange;\n}\n", "/** @module CanisterStatus */\nimport { Principal } from '@dfinity/principal';\nimport { AgentError } from '../errors';\nimport { HttpAgent } from '../agent/http';\nimport {\n  Cert,\n  Certificate,\n  CreateCertificateOptions,\n  HashTree,\n  flatten_forks,\n  check_canister_ranges,\n  lookupResultToBuffer,\n  lookup_path,\n} from '../certificate';\nimport { toHex } from '../utils/buffer';\nimport * as Cbor from '../cbor';\nimport { decodeLeb128, decodeTime } from '../utils/leb';\nimport { DerEncodedPublicKey } from '..';\n\n/**\n * Represents the useful information about a subnet\n * @param {string} subnetId the principal id of the canister's subnet\n * @param {string[]} nodeKeys the keys of the individual nodes in the subnet\n */\nexport type SubnetStatus = {\n  // Principal as a string\n  subnetId: string;\n  nodeKeys: Map<string, DerEncodedPublicKey>;\n  metrics?: {\n    num_canisters: bigint;\n    canister_state_bytes: bigint;\n    consumed_cycles_total: {\n      current: bigint;\n      deleted: bigint;\n    };\n    update_transactions_total: bigint;\n  };\n};\n\n/**\n * Types of an entry on the canisterStatus map.\n * An entry of null indicates that the request failed, due to lack of permissions or the result being missing.\n */\nexport type Status =\n  | string\n  | ArrayBuffer\n  | Date\n  | ArrayBuffer[]\n  | Principal[]\n  | SubnetStatus\n  | bigint\n  | null;\n\n/**\n * Interface to define a custom path. Nested paths will be represented as individual buffers, and can be created from text using TextEncoder.\n * @param {string} key the key to use to access the returned value in the canisterStatus map\n * @param {ArrayBuffer[]} path the path to the desired value, represented as an array of buffers\n * @param {string} decodeStrategy the strategy to use to decode the returned value\n */\nexport class CustomPath implements CustomPath {\n  public key: string;\n  public path: ArrayBuffer[] | string;\n  public decodeStrategy: 'cbor' | 'hex' | 'leb128' | 'utf-8' | 'raw';\n  constructor(\n    key: string,\n    path: ArrayBuffer[] | string,\n    decodeStrategy: 'cbor' | 'hex' | 'leb128' | 'utf-8' | 'raw',\n  ) {\n    this.key = key;\n    this.path = path;\n    this.decodeStrategy = decodeStrategy;\n  }\n}\n\n/**\n * @deprecated Use {@link CustomPath} instead\n * @param {string} key the key to use to access the returned value in the canisterStatus map\n * @param {string} path the path to the desired value, represented as a string\n * @param {string} decodeStrategy the strategy to use to decode the returned value\n */\nexport interface MetaData {\n  kind: 'metadata';\n  key: string;\n  path: string | ArrayBuffer;\n  decodeStrategy: 'cbor' | 'hex' | 'leb128' | 'utf-8' | 'raw';\n}\n\n/**\n * Pre-configured fields for canister status paths\n */\nexport type Path =\n  | 'time'\n  | 'controllers'\n  | 'subnet'\n  | 'module_hash'\n  | 'candid'\n  | MetaData\n  | CustomPath;\n\nexport type StatusMap = Map<Path | string, Status>;\n\nexport type CanisterStatusOptions = {\n  canisterId: Principal;\n  agent: HttpAgent;\n  paths?: Path[] | Set<Path>;\n  blsVerify?: CreateCertificateOptions['blsVerify'];\n};\n\n/**\n * Request information in the request_status state tree for a given canister.\n * Can be used to request information about the canister's controllers, time, module hash, candid interface, and more.\n * @param {CanisterStatusOptions} options {@link CanisterStatusOptions}\n * @param {CanisterStatusOptions['canisterId']} options.canisterId {@link Principal}\n * @param {CanisterStatusOptions['agent']} options.agent {@link HttpAgent} optional authenticated agent to use to make the canister request. Useful for accessing private metadata under icp:private\n * @param {CanisterStatusOptions['paths']} options.paths {@link Path[]}\n * @returns {Status} object populated with data from the requested paths\n * @example\n * const status = await canisterStatus({\n *   paths: ['controllers', 'candid'],\n *   ...options\n * });\n *\n * const controllers = status.get('controllers');\n */\nexport const request = async (options: {\n  canisterId: Principal;\n  agent: HttpAgent;\n  paths?: Path[] | Set<Path>;\n}): Promise<StatusMap> => {\n  const { agent, paths } = options;\n  const canisterId = Principal.from(options.canisterId);\n\n  const uniquePaths = [...new Set(paths)];\n\n  // Map path options to their correct formats\n  const encodedPaths = uniquePaths.map(path => {\n    return encodePath(path, canisterId);\n  });\n  const status = new Map<string | Path, Status>();\n\n  const promises = uniquePaths.map((path, index) => {\n    return (async () => {\n      try {\n        const response = await agent.readState(canisterId, {\n          paths: [encodedPaths[index]],\n        });\n        const cert = await Certificate.create({\n          certificate: response.certificate,\n          rootKey: agent.rootKey,\n          canisterId: canisterId,\n        });\n\n        const lookup = (cert: Certificate, path: Path) => {\n          if (path === 'subnet') {\n            const data = fetchNodeKeys(response.certificate, canisterId, agent.rootKey);\n            return {\n              path: path,\n              data,\n            };\n          } else {\n            return {\n              path: path,\n              data: lookupResultToBuffer(cert.lookup(encodePath(path, canisterId))),\n            };\n          }\n        };\n\n        // must pass in the rootKey if we have no delegation\n        const { path, data } = lookup(cert, uniquePaths[index]);\n        if (!data) {\n          // Typically, the cert lookup will throw\n          console.warn(`Expected to find result for path ${path}, but instead found nothing.`);\n          if (typeof path === 'string') {\n            status.set(path, null);\n          } else {\n            status.set(path.key, null);\n          }\n        } else {\n          switch (path) {\n            case 'time': {\n              status.set(path, decodeTime(data));\n              break;\n            }\n            case 'controllers': {\n              status.set(path, decodeControllers(data));\n              break;\n            }\n            case 'module_hash': {\n              status.set(path, decodeHex(data));\n              break;\n            }\n            case 'subnet': {\n              status.set(path, data);\n              break;\n            }\n            case 'candid': {\n              status.set(path, new TextDecoder().decode(data));\n              break;\n            }\n            default: {\n              // Check for CustomPath signature\n              if (typeof path !== 'string' && 'key' in path && 'path' in path) {\n                switch (path.decodeStrategy) {\n                  case 'raw':\n                    status.set(path.key, data);\n                    break;\n                  case 'leb128': {\n                    status.set(path.key, decodeLeb128(data));\n                    break;\n                  }\n                  case 'cbor': {\n                    status.set(path.key, decodeCbor(data));\n                    break;\n                  }\n                  case 'hex': {\n                    status.set(path.key, decodeHex(data));\n                    break;\n                  }\n                  case 'utf-8': {\n                    status.set(path.key, decodeUtf8(data));\n                  }\n                }\n              }\n            }\n          }\n        }\n      } catch (error) {\n        // Break on signature verification errors\n        if ((error as AgentError)?.message?.includes('Invalid certificate')) {\n          throw new AgentError((error as AgentError).message);\n        }\n        if (typeof path !== 'string' && 'key' in path && 'path' in path) {\n          status.set(path.key, null);\n        } else {\n          status.set(path, null);\n        }\n        console.group();\n        console.warn(`Expected to find result for path ${path}, but instead found nothing.`);\n        console.warn(error);\n        console.groupEnd();\n      }\n    })();\n  });\n\n  // Fetch all values separately, as each option can fail\n  await Promise.all(promises);\n\n  return status;\n};\n\nexport const fetchNodeKeys = (\n  certificate: ArrayBuffer,\n  canisterId: Principal,\n  root_key?: ArrayBuffer | Uint8Array,\n): SubnetStatus => {\n  if (!canisterId._isPrincipal) {\n    throw new Error('Invalid canisterId');\n  }\n  const cert = Cbor.decode(new Uint8Array(certificate)) as Cert;\n  const tree = cert.tree;\n  let delegation = cert.delegation;\n  let subnetId: Principal;\n  if (delegation && delegation.subnet_id) {\n    subnetId = Principal.fromUint8Array(new Uint8Array(delegation.subnet_id));\n  }\n\n  // On local replica, with System type subnet, there is no delegation\n  else if (!delegation && typeof root_key !== 'undefined') {\n    subnetId = Principal.selfAuthenticating(new Uint8Array(root_key));\n    delegation = {\n      subnet_id: subnetId.toUint8Array(),\n      certificate: new ArrayBuffer(0),\n    };\n  }\n  // otherwise use default NNS subnet id\n  else {\n    subnetId = Principal.selfAuthenticating(\n      Principal.fromText(\n        'tdb26-jop6k-aogll-7ltgs-eruif-6kk7m-qpktf-gdiqx-mxtrf-vb5e6-eqe',\n      ).toUint8Array(),\n    );\n    delegation = {\n      subnet_id: subnetId.toUint8Array(),\n      certificate: new ArrayBuffer(0),\n    };\n  }\n\n  const canisterInRange = check_canister_ranges({ canisterId, subnetId, tree });\n  if (!canisterInRange) {\n    throw new Error('Canister not in range');\n  }\n\n  const nodeTree = lookup_path(['subnet', delegation?.subnet_id as ArrayBuffer, 'node'], tree);\n  const nodeForks = flatten_forks(nodeTree as HashTree) as HashTree[];\n  nodeForks.length;\n  const nodeKeys = new Map<string, DerEncodedPublicKey>();\n  nodeForks.forEach(fork => {\n    Object.getPrototypeOf(new Uint8Array(fork[1] as ArrayBuffer));\n    const node_id = Principal.from(new Uint8Array(fork[1] as ArrayBuffer)).toText();\n    const derEncodedPublicKey = lookup_path(['public_key'], fork[2] as HashTree) as ArrayBuffer;\n    if (derEncodedPublicKey.byteLength !== 44) {\n      throw new Error('Invalid public key length');\n    } else {\n      nodeKeys.set(node_id, derEncodedPublicKey as DerEncodedPublicKey);\n    }\n  });\n\n  return {\n    subnetId: Principal.fromUint8Array(new Uint8Array(delegation.subnet_id)).toText(),\n    nodeKeys,\n  };\n};\n\nexport const encodePath = (path: Path, canisterId: Principal): ArrayBuffer[] => {\n  const encoder = new TextEncoder();\n\n  const encode = (arg: string): ArrayBuffer => {\n    return new DataView(encoder.encode(arg).buffer).buffer;\n  };\n  const canisterBuffer = new DataView(canisterId.toUint8Array().buffer).buffer;\n  switch (path) {\n    case 'time':\n      return [encode('time')];\n    case 'controllers':\n      return [encode('canister'), canisterBuffer, encode('controllers')];\n    case 'module_hash':\n      return [encode('canister'), canisterBuffer, encode('module_hash')];\n    case 'subnet':\n      return [encode('subnet')];\n    case 'candid':\n      return [encode('canister'), canisterBuffer, encode('metadata'), encode('candid:service')];\n    default: {\n      // Check for CustomPath signature\n      if ('key' in path && 'path' in path) {\n        // For simplified metadata queries\n        if (typeof path['path'] === 'string' || path['path'] instanceof ArrayBuffer) {\n          const metaPath = path.path;\n          const encoded = typeof metaPath === 'string' ? encode(metaPath) : metaPath;\n\n          return [encode('canister'), canisterBuffer, encode('metadata'), encoded];\n\n          // For non-metadata, return the provided custompath\n        } else {\n          return path['path'];\n        }\n      }\n    }\n  }\n  throw new Error(\n    `An unexpeected error was encountered while encoding your path for canister status. Please ensure that your path, ${path} was formatted correctly.`,\n  );\n};\n\nconst decodeHex = (buf: ArrayBuffer): string => {\n  return toHex(buf);\n};\n\nconst decodeCbor = (buf: ArrayBuffer): ArrayBuffer[] => {\n  return Cbor.decode(buf);\n};\n\nconst decodeUtf8 = (buf: ArrayBuffer): string => {\n  return new TextDecoder().decode(buf);\n};\n\n// Controllers are CBOR-encoded buffers\nconst decodeControllers = (buf: ArrayBuffer): Principal[] => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const controllersRaw = decodeCbor(buf);\n  return controllersRaw.map((buf: ArrayBuffer) => {\n    return Principal.fromUint8Array(new Uint8Array(buf));\n  });\n};\n"],
  "mappings": "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,GAEAC,GAEAC,GACAgD,GACAA,GACAA,GAEA/C,GAEAC,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EACAA,EAEAC,GAEAC,GAEAC,GAEAC,GAEA0C,GACAA,GACAA,GACAzC,GAEAC,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GAEAC,GAEAC,GAEAC,GAEAC,GAEAoC,GACAA,GACAA,GACAnC,GAEAC,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GAEAC,GAEAC,GAEAC,GAEAC,GACA8B,GACAA,GACAA,GAEA7B,GAEAC,GAEAA,GAEAA,GAEAA,GAEAA,GAEAA,GAEAK,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GAEAA,GACAA,GACAA,GAEAI,GACAC,GACAC,GACAC,GACAgB,GACAA,GACAA,GACAA,GAEAf,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GACAA,GAEAC,GAEAC,GAEAC,GAEAC,GAEAC,GAEAC,GAEAO,GAEAC,GACAC,GACAA,GACAA,GAEAC,EACF,EAIA,MAAO,CACL,MAAO5E,EACT,CACF,ICxzCA,IAAA6E,GAAAC,GAAAC,IAAA,cAEA,IAAMC,GAAY,KAAwB,UAE1CD,GAAQ,GAAK,CACX,QAAS,EACT,QAAS,EACT,YAAa,EACb,YAAa,EACb,MAAO,EACP,IAAK,EACL,IAAK,EACL,aAAc,CAChB,E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",
  "names": ["buffer_exports", "__export", "Buffer", "INSPECT_MAX_BYTES", "SlowBuffer", "isBuffer", "_kMaxLength", "init", "inited", "code", "i", "len", "lookup", "revLookup", "toByteArray", "b64", "j", "l", "tmp", "placeHolders", "arr", "Arr", "L", "tripletToBase64", "num", "encodeChunk", "uint8", "start", "end", "output", "fromByteArray", "extraBytes", "parts", "maxChunkLength", "len2", "read", "buffer", "offset", "isLE", "mLen", "nBytes", "e", "m", "eLen", "eMax", "eBias", "nBits", "d", "s", "write", "value", "rt", "kMaxLength", "createBuffer", "that", "length", "arg", "encodingOrOffset", "allocUnsafe", "from", "fromArrayBuffer", "fromString", "fromObject", "assertSize", "size", "alloc", "fill", "encoding", "checked", "string", "byteLength", "actual", "fromArrayLike", "array", "byteOffset", "obj", "internalIsBuffer", "isnan", "isArray", "b", "loweredCase", "utf8ToBytes", "base64ToBytes", "slowToString", "hexSlice", "utf8Slice", "asciiSlice", "latin1Slice", "base64Slice", "utf16leSlice", "swap", "n", "bidirectionalIndexOf", "val", "dir", "arrayIndexOf", "indexSize", "arrLength", "valLength", "buf", "foundIndex", "found", "hexWrite", "remaining", "strLen", "parsed", "utf8Write", "blitBuffer", "asciiWrite", "asciiToBytes", "latin1Write", "base64Write", "ucs2Write", "utf16leToBytes", "res", "firstByte", "codePoint", "bytesPerSequence", "secondByte", "thirdByte", "fourthByte", "tempCodePoint", "decodeCodePointsArray", "codePoints", "MAX_ARGUMENTS_LENGTH", "ret", "out", "toHex", "bytes", "checkOffset", "ext", "checkInt", "max", "min", "objectWriteUInt16", "littleEndian", "objectWriteUInt32", "checkIEEE754", "writeFloat", "noAssert", "writeDouble", "base64clean", "str", "stringtrim", "INVALID_BASE64_RE", "units", "leadSurrogate", "byteArray", "c", "hi", "lo", "src", "dst", "isFastBuffer", "isSlowBuffer", "toString", "init_buffer", "__esmMin", "a", "x", "y", "list", "pos", "target", "thisStart", "thisEnd", "thisCopy", "targetCopy", "newBuf", "sliceLen", "mul", "maxBytes", "limit", "sub", "targetStart", "require_buffer", "__commonJSMin", "exports", "module", "polyfill", "k", "require_ieee754", "__commonJSMin", "exports", "buffer", "offset", "isLE", "mLen", "nBytes", "e", "m", "eLen", "eMax", "eBias", "nBits", "i", "d", "s", "value", "rt", "require_bignumber", "__commonJSMin", "exports", "module", "globalObject", "BigNumber", "isNumeric", "mathceil", "mathfloor", "bignumberError", "tooManyDigits", "BASE", "LOG_BASE", "MAX_SAFE_INTEGER", "POWS_TEN", "SQRT_BASE", "MAX", "clone", "configObject", "div", "convertBase", "parseNumeric", "P", "ONE", "DECIMAL_PLACES", "ROUNDING_MODE", "TO_EXP_NEG", "TO_EXP_POS", "MIN_EXP", "MAX_EXP", "CRYPTO", "MODULO_MODE", "POW_PRECISION", "FORMAT", "ALPHABET", "alphabetHasNormalDecimalDigits", "v", "b", "alphabet", "c", "caseChanged", "e", "i", "isNum", "len", "str", "x", "intCheck", "round", "obj", "p", "n", "s", "out", "maxOrMin", "pow2_53", "random53bitInt", "dp", "a", "k", "rand", "args", "sum", "decimal", "toBaseOut", "baseIn", "baseOut", "j", "arr", "arrL", "sign", "callerIsToString", "d", "r", "xc", "y", "rm", "toFixedPoint", "coeffToString", "multiply", "base", "m", "temp", "xlo", "xhi", "carry", "klo", "khi", "compare", "aL", "bL", "cmp", "subtract", "more", "prod", "prodL", "q", "qc", "rem", "remL", "rem0", "xi", "xL", "yc0", "yL", "yz", "yc", "bitFloor", "format", "id", "c0", "ne", "toExponential", "normalise", "basePrefix", "dotAfter", "dotBefore", "isInfinityOrNaN", "whitespaceOrPlus", "p1", "p2", "sd", "ni", "rd", "pows10", "valueOf", "half", "isModExp", "nIsBig", "nIsNeg", "nIsOdd", "isOdd", "t", "xLTy", "xe", "ye", "xcL", "ycL", "ylo", "yhi", "zc", "sqrtBase", "rep", "g1", "g2", "groupSeparator", "intPart", "fractionPart", "isNeg", "intDigits", "md", "d0", "d1", "d2", "exp", "n0", "n1", "z", "l", "min", "max", "name", "zs", "require_decoder_asm", "__commonJSMin", "exports", "module", "stdlib", "foreign", "buffer", "heap", "pushInt", "pushInt32", "pushInt32Neg", "pushInt64", "pushInt64Neg", "pushFloat", "pushFloatSingle", "pushFloatDouble", "pushTrue", "pushFalse", "pushUndefined", "pushNull", "pushInfinity", "pushInfinityNeg", "pushNaN", "pushNaNNeg", "pushArrayStart", "pushArrayStartFixed", "pushArrayStartFixed32", "pushArrayStartFixed64", "pushObjectStart", "pushObjectStartFixed", "pushObjectStartFixed32", "pushObjectStartFixed64", "pushByteString", "pushByteStringStart", "pushUtf8String", "pushUtf8StringStart", "pushSimpleUnassigned", "pushTagStart", "pushTagStart4", "pushTagStart8", "pushTagUnassigned", "pushBreak", "pow", "offset", "inputLength", "code", "parse", "input", "jumpTable", "checkOffset", "n", "readUInt16", "readUInt32", "INT_P", "octet", "UINT_P_8", "UINT_P_16", "UINT_P_32", "UINT_P_64", "INT_N", "UINT_N_8", "UINT_N_16", "val", "UINT_N_32", "UINT_N_64", "BYTE_STRING", "start", "end", "step", "BYTE_STRING_8", "length", "BYTE_STRING_16", "BYTE_STRING_32", "BYTE_STRING_64", "BYTE_STRING_BREAK", "UTF8_STRING", "UTF8_STRING_8", "UTF8_STRING_16", "UTF8_STRING_32", "UTF8_STRING_64", "UTF8_STRING_BREAK", "ARRAY", "ARRAY_8", "ARRAY_16", "ARRAY_32", "ARRAY_64", "ARRAY_BREAK", "MAP", "MAP_8", "MAP_16", "MAP_32", "MAP_64", "MAP_BREAK", "TAG_KNOWN", "TAG_BIGNUM_POS", "TAG_BIGNUM_NEG", "TAG_FRAC", "TAG_BIGNUM_FLOAT", "TAG_UNASSIGNED", "TAG_BASE64_URL", "TAG_BASE64", "TAG_BASE16", "TAG_MORE_1", "TAG_MORE_2", "TAG_MORE_4", "TAG_MORE_8", "SIMPLE_UNASSIGNED", "SIMPLE_FALSE", "SIMPLE_TRUE", "SIMPLE_NULL", "SIMPLE_UNDEFINED", "SIMPLE_BYTE", "SIMPLE_FLOAT_HALF", "f", "g", "sign", "exp", "mant", "r", "SIMPLE_FLOAT_SINGLE", "SIMPLE_FLOAT_DOUBLE", "ERROR", "BREAK", "require_constants", "__commonJSMin", "exports", "Bignumber", "require_utils", "__commonJSMin", "exports", "Buffer", "Bignumber", "constants", "SHIFT32", "SHIFT16", "MAX_SAFE_HIGH", "buf", "exp", "mant", "sign", "toHex", "n", "len", "res", "i", "obj", "keys", "length", "f", "g", "f1", "f2", "g1", "g2", "half", "u32", "u", "s16", "a", "b", "lenA", "lenB", "x", "count", "require_simple", "__commonJSMin", "exports", "module", "constants", "MT", "SIMPLE", "SYMS", "Simple", "_Simple", "value", "gen", "obj", "val", "hasParent", "require_tagged", "__commonJSMin", "exports", "module", "Tagged", "_Tagged", "tag", "value", "err", "gen", "converters", "er", "f", "error", "require_url_browser", "__commonJSMin", "exports", "module", "defaultBase", "URL", "URLWithLegacySupport", "url", "base", "hash", "host", "hostname", "href", "origin", "password", "pathname", "port", "protocol", "search", "searchParams", "username", "o", "format", "obj", "userPass", "auth", "path", "require_relative", "__commonJSMin", "exports", "module", "URLWithLegacySupport", "format", "url", "location", "protocolMap", "defaultProtocol", "protocol", "urlParsed", "base", "require_iso_url", "__commonJSMin", "exports", "module", "URLWithLegacySupport", "format", "URLSearchParams", "defaultBase", "relative", "require_decoder", "__commonJSMin", "exports", "module", "Buffer", "ieee754", "Bignumber", "parser", "utils", "c", "Simple", "Tagged", "URL", "Decoder", "_Decoder", "opts", "val", "v", "p", "hasChildren", "obj", "type", "len", "tagNumber", "value", "typ", "arr", "raw", "start", "end", "f", "g", "f1", "f2", "g1", "g2", "a", "b", "d", "e", "h", "len1", "len2", "len3", "len4", "tag", "input", "code", "enc", "require_diagnose", "__commonJSMin", "exports", "module", "Buffer", "Decoder", "utils", "Diagnose", "_Diagnose", "tagNumber", "value", "val", "f", "g", "f1", "f2", "g1", "g2", "fl", "a", "b", "c", "d", "e", "h", "raw", "len", "start", "end", "arr", "map", "list", "collectObject", "obj", "input", "enc", "acc", "key", "require_encoder", "__commonJSMin", "exports", "module", "Buffer", "URL", "Bignumber", "utils", "constants", "MT", "NUMBYTES", "SHIFT32", "SYMS", "TAG", "HALF", "FLOAT", "DOUBLE", "TRUE", "FALSE", "UNDEFINED", "NULL", "MAXINT_BN", "BUF_NAN", "BUF_INF_NEG", "BUF_INF_POS", "toType", "obj", "Encoder", "_Encoder", "options", "addTypes", "len", "type", "fun", "old", "val", "method", "half", "b2", "b4", "mt", "orig", "m", "gen", "j", "tag", "x", "str", "buf", "dec", "slide", "i", "f", "keys", "keyLength", "k", "map", "a", "typ", "result", "resultLength", "resultMethod", "offset", "size", "res", "index", "length", "tmp", "o", "enc", "require_src", "__commonJSMin", "exports", "MAX_U64_NUMBER", "_concat", "a", "args", "newBuffer", "acc", "b", "i", "_serializeValue", "major", "minor", "value", "length", "bytes", "byte", "_serializeNumber", "_serializeString", "str", "utf8", "charcode", "tagged", "tag", "exports", "raw", "uSmall", "n", "u8", "radix", "u16", "u32", "u64", "iSmall", "i8", "i16", "i32", "i64", "done", "newI64", "x", "number", "string", "array", "items", "map", "stable", "entries", "keyA", "keyB", "k", "v", "singleFloat", "f", "single", "doubleFloat", "bool", "true_", "false_", "null_", "undefined_", "cbor", "__importStar", "BufferClasses", "JsonDefaultCborEncoder", "_serializer", "_stable", "value", "x", "m", "key", "item", "exports", "ToCborEncoder", "CborSerializer", "stable", "s", "name", "encoder", "chosenEncoder", "SelfDescribeCborSerializer", "__export", "value", "__importStar", "exports", "alphabet", "lookupTable", "i", "encode", "input", "skip", "bits", "output", "encodeByte", "byte", "decode", "o", "decodeChar", "char", "val", "c", "lookUpTable", "getCrc32", "buf", "b", "crc", "i", "t", "isBytes", "a", "bytes", "b", "lengths", "exists", "instance", "checkFinished", "output", "out", "bytes", "min", "crypto", "createView", "arr", "rotr", "word", "shift", "isLE", "utf8ToBytes", "str", "toBytes", "data", "bytes", "concatBytes", "arrays", "sum", "i", "a", "res", "pad", "Hash", "toStr", "wrapConstructor", "hashCons", "hashC", "msg", "toBytes", "tmp", "randomBytes", "bytesLength", "crypto", "setBigUint64", "view", "byteOffset", "value", "isLE", "_32n", "_u32_max", "wh", "wl", "h", "l", "Chi", "a", "b", "c", "Maj", "HashMD", "Hash", "blockLen", "outputLen", "padOffset", "createView", "data", "exists", "buffer", "toBytes", "len", "pos", "take", "dataView", "out", "output", "i", "oview", "outLen", "state", "res", "to", "length", "finished", "destroyed", "SHA256_K", "SHA256_IV", "SHA256_W", "SHA256", "HashMD", "A", "B", "C", "D", "E", "F", "G", "H", "view", "offset", "i", "W15", "W2", "s0", "rotr", "s1", "sigma1", "T1", "Chi", "T2", "Maj", "SHA224", "sha256", "wrapConstructor", "sha224", "sha224", "data", "JSON_KEY_PRINCIPAL", "SELF_AUTHENTICATING_SUFFIX", "ANONYMOUS_SUFFIX", "MANAGEMENT_CANISTER_PRINCIPAL_HEX_STR", "fromHexString", "hexString", "_a", "byte", "toHexString", "bytes", "str", "Principal", "_Principal", "_arr", "publicKey", "sha", "sha224", "other", "hex", "text", "maybePrincipal", "obj", "canisterIdNoDash", "arr", "decode", "principal", "checksumArrayBuf", "getCrc32", "checksum", "array", "matches", "encode", "i", "cmp", "AgentError", "_AgentError", "message", "import_borc", "cbor", "import_simple_cbor", "concat", "buffers", "result", "acc", "curr", "index", "b", "toHex", "buffer", "x", "hexRe", "fromHex", "hex", "compare", "b1", "b2", "u1", "u2", "bufEquals", "uint8ToBuf", "arr", "bufFromBufLike", "bufLike", "PrincipalEncoder", "value", "v", "BufferEncoder", "BigIntEncoder", "fromHex", "serializer", "CborTag", "encode", "decodePositiveBigInt", "buf", "len", "res", "i", "Uint8ArrayDecoder", "borc", "raw", "concat", "start", "end", "decode", "input", "buffer", "val", "idl_exports", "__export", "Bool", "BoolClass", "ConstructType", "Empty", "EmptyClass", "FixedIntClass", "FixedNatClass", "Float32", "Float64", "FloatClass", "Func", "FuncClass", "Int", "Int16", "Int32", "Int64", "Int8", "IntClass", "Nat", "Nat16", "Nat32", "Nat64", "Nat8", "NatClass", "Null", "NullClass", "Opt", "OptClass", "PrimitiveType", "Principal", "PrincipalClass", "Rec", "RecClass", "Record", "RecordClass", "Reserved", "ReservedClass", "Service", "ServiceClass", "Text", "TextClass", "Tuple", "TupleClass", "Type", "Unknown", "UnknownClass", "Variant", "VariantClass", "Vec", "VecClass", "Visitor", "decode", "encode", "concat", "buffers", "result", "acc", "curr", "index", "b", "PipeArrayBuffer", "buffer", "length", "bufFromBufLike", "num", "result", "buf", "b", "offset", "amount", "v", "uint8ToBuf", "arr", "bufLike", "idlHash", "s", "array", "h", "c", "idlLabelToId", "label", "num", "eob", "safeRead", "pipe", "num", "safeReadUint8", "byte", "lebEncode", "value", "byteLength", "PipeArrayBuffer", "i", "lebDecode", "weight", "slebEncode", "isNeg", "getLowerBytes", "bytes", "slebDecode", "pipeView", "len", "writeUIntLE", "writeIntLE", "mul", "sub", "readUIntLE", "val", "readIntLE", "iexp2", "n", "nBig", "magicNumber", "toReadableString_max", "zipWith", "xs", "ys", "f", "x", "TypeTable", "obj", "type", "buf", "idx", "knot", "knotIdx", "len", "lebEncode", "concat", "typeName", "slebEncode", "Visitor", "t", "data", "ty", "fields", "components", "i", "Type", "toReadableString", "typeTable", "PrimitiveType", "ConstructType", "RecClass", "EmptyClass", "v", "d", "UnknownClass", "b", "decodedValue", "typeFunc", "BoolClass", "safeReadUint8", "NullClass", "ReservedClass", "TextClass", "lebDecode", "safeRead", "IntClass", "slebDecode", "NatClass", "FloatClass", "_bits", "view", "opcode", "bytes", "FixedIntClass", "min", "iexp2", "max", "ok", "writeIntLE", "offset", "num", "readIntLE", "FixedNatClass", "writeUIntLE", "readUIntLE", "VecClass", "_VecClass", "_type", "bits", "e", "PipeArrayBuffer", "encoded", "opCode", "buffer", "vec", "rets", "OptClass", "_OptClass", "opt", "RecordClass", "_RecordClass", "a", "idlLabelToId", "res", "key", "k", "values", "bufs", "c", "T", "_", "value", "record", "expectedRecordIdx", "actualRecordIdx", "hash", "expectKey", "expectType", "expectedId", "actualId", "TupleClass", "_TupleClass", "_components", "tuple", "wireType", "VariantClass", "_VariantClass", "name", "variant", "wireHash", "_RecClass", "decodePrincipalId", "Principal", "PrincipalClass", "FuncClass", "argTypes", "retTypes", "annotations", "types", "principal", "methodName", "canister", "method", "methodLen", "arg", "argLen", "args", "retLen", "annLen", "anns", "mLen", "annon", "str", "ann", "ServiceClass", "func", "meths", "label", "labelBuf", "labelLen", "_key", "encode", "magic", "table", "typs", "vals", "decode", "magicBuffer", "readTypeTable", "pipe", "objectLength", "prevHash", "argLength", "returnValues", "returnValuesLength", "annotationLength", "servLength", "methods", "nameLength", "funcName", "funcType", "rawList", "length", "rawTable", "rawTypes", "Rec", "getType", "Null", "Bool", "Nat", "Int", "Nat8", "Nat16", "Nat32", "Nat64", "Int8", "Int16", "Int32", "Int64", "Float32", "Float64", "Text", "Reserved", "Empty", "buildType", "entry", "Vec", "Opt", "Record", "Tuple", "Variant", "Func", "rec", "typeRef", "Service", "output", "ind", "Unknown", "ret", "import_borc", "hash", "data", "uint8ToBuf", "sha256", "hashValue", "value", "borc", "hashString", "lebEncode", "vals", "concat", "hashOfMap", "encoded", "requestIdOf", "request", "map", "sorted", "key", "hashedKey", "hashedValue", "k1", "k2", "compare", "concatenated", "x", "utils_exports", "__export", "abytes", "bitGet", "bitLen", "bitMask", "bitSet", "bytesToHex", "bytesToNumberBE", "bytesToNumberLE", "concatBytes", "createHmacDrbg", "ensureBytes", "equalBytes", "hexToBytes", "hexToNumber", "isBytes", "numberToBytesBE", "numberToBytesLE", "numberToHexUnpadded", "numberToVarBytesBE", "utf8ToBytes", "validateObject", "_0n", "_1n", "_2n", "a", "item", "hexes", "_", "i", "bytes", "hex", "num", "asciis", "asciiToBase16", "char", "hl", "al", "array", "ai", "hi", "n1", "n2", "n", "len", "title", "expectedLength", "res", "e", "arrays", "sum", "pad", "b", "diff", "str", "pos", "value", "u8n", "data", "u8fr", "arr", "hashLen", "qByteLen", "hmacFn", "v", "k", "reset", "h", "reseed", "seed", "gen", "out", "sl", "pred", "validatorFns", "val", "object", "validators", "optValidators", "checkField", "fieldName", "type", "isOptional", "checkVal", "_0n", "_1n", "_2n", "_3n", "_4n", "_5n", "_8n", "_9n", "_16n", "mod", "a", "b", "result", "pow", "num", "power", "modulo", "res", "pow2", "x", "invert", "number", "y", "u", "v", "q", "r", "m", "n", "tonelliShanks", "P", "legendreC", "Q", "S", "Z", "p1div4", "Fp", "root", "Q1div2", "g", "t2", "ge", "FpSqrt", "c1", "n2", "nv", "i", "isNegativeLE", "FIELD_FIELDS", "validateField", "field", "initial", "opts", "map", "val", "validateObject", "FpPow", "f", "p", "d", "FpInvertBatch", "nums", "tmp", "lastMultiplied", "acc", "inverted", "nLength", "n", "nBitLength", "_nBitLength", "nByteLength", "Field", "ORDER", "bitLen", "isLE", "redef", "_0n", "BITS", "BYTES", "sqrtP", "FpSqrt", "bitMask", "_1n", "num", "mod", "lhs", "rhs", "power", "FpPow", "invert", "lst", "FpInvertBatch", "a", "b", "c", "numberToBytesLE", "numberToBytesBE", "bytes", "bytesToNumberLE", "bytesToNumberBE", "FpSqrtEven", "Fp", "elm", "root", "getFieldBytesLength", "fieldOrder", "bitLength", "getMinHashLength", "length", "mapHashToField", "key", "isLE", "len", "fieldLen", "minLen", "num", "bytesToNumberBE", "bytesToNumberLE", "reduced", "mod", "_1n", "numberToBytesLE", "numberToBytesBE", "os2ip", "bytesToNumberBE", "i2osp", "value", "length", "res", "i", "strxor", "a", "b", "arr", "anum", "item", "expand_message_xmd", "msg", "DST", "lenInBytes", "H", "abytes", "concatBytes", "utf8ToBytes", "b_in_bytes", "r_in_bytes", "ell", "DST_prime", "Z_pad", "l_i_b_str", "b_0", "args", "expand_message_xof", "k", "dkLen", "hash_to_field", "count", "options", "validateObject", "p", "m", "hash", "expand", "_DST", "log2p", "L", "len_in_bytes", "prb", "u", "e", "j", "elm_offset", "tv", "mod", "isogenyMap", "field", "map", "COEFF", "x", "y", "xNum", "xDen", "yNum", "yDen", "val", "acc", "createHasher", "Point", "mapToCurve", "def", "u0", "u1", "P", "_0n", "_1n", "wNAF", "c", "bits", "constTimeNegate", "condition", "item", "neg", "opts", "W", "windows", "windowSize", "elm", "n", "p", "d", "points", "base", "window", "i", "precomputes", "f", "mask", "maxNumber", "shiftBy", "offset", "wbits", "offset1", "offset2", "cond1", "cond2", "P", "precomputesMap", "transform", "comp", "validateBasic", "curve", "validateField", "validateObject", "nLength", "validatePointOpts", "curve", "opts", "validateBasic", "validateObject", "endo", "Fp", "a", "b2n", "h2b", "utils_exports", "_0n", "_1n", "_2n", "_3n", "_4n", "weierstrassPoints", "opts", "CURVE", "validatePointOpts", "Fp", "toBytes", "_c", "point", "_isCompressed", "a", "concatBytes", "fromBytes", "bytes", "tail", "x", "y", "weierstrassEquation", "b", "x2", "x3", "isWithinCurveOrder", "num", "assertGE", "normPrivateKeyToScalar", "key", "lengths", "nByteLength", "wrapPrivateKey", "n", "isBytes", "bytesToHex", "bytesToNumberBE", "ensureBytes", "mod", "pointPrecomputes", "assertPrjPoint", "other", "Point", "px", "py", "pz", "p", "is0", "i", "points", "toInv", "hex", "privateKey", "windowSize", "left", "right", "X1", "Y1", "Z1", "X2", "Y2", "Z2", "U1", "U2", "b3", "X3", "Y3", "Z3", "t0", "t1", "t2", "t3", "t4", "t5", "wnaf", "comp", "I", "endo", "k1neg", "k1", "k2neg", "k2", "k1p", "k2p", "d", "scalar", "fake", "f1p", "f2p", "f", "Q", "G", "mul", "P", "sum", "iz", "z", "ax", "ay", "zz", "cofactor", "isTorsionFree", "clearCofactor", "isCompressed", "_bits", "wNAF", "SWUFpSqrtRatio", "Fp", "Z", "q", "l", "_0n", "o", "_1n", "_2n", "c1", "_2n_pow_c1_1", "_2n_pow_c1", "c2", "c3", "c4", "c5", "c6", "c7", "sqrtRatio", "u", "v", "tv1", "tv2", "tv3", "tv5", "tv4", "isQR", "i", "tvv5", "e1", "_4n", "_3n", "y1", "y2", "y", "mapToCurveSimpleSWU", "opts", "validateField", "tv6", "x", "isValid", "value", "_2n", "_3n", "bls", "CURVE", "Fp", "Fr", "Fp2", "Fp6", "Fp12", "BLS_X_LEN", "bitLen", "calcPairingPrecomputes", "p", "x", "y", "Qx", "Qy", "Qz", "Rx", "Ry", "Rz", "ell_coeff", "i", "t0", "t1", "t2", "t3", "t4", "bitGet", "t5", "millerLoop", "ell", "g1", "Px", "Py", "f12", "j", "E", "F", "utils", "length", "getMinHashLength", "mapHashToField", "G1_", "weierstrassPoints", "G1", "createHasher", "pairingPrecomputes", "point", "G2_", "G2", "ShortSignature", "Signature", "pairing", "Q", "P", "withFinalExponent", "Qa", "looped", "normP1", "normP1Hash", "htfOpts", "ensureBytes", "normP2", "normP2Hash", "getPublicKey", "privateKey", "getPublicKeyForShortSignatures", "sign", "message", "msgPoint", "sigPoint", "signShortSignature", "verify", "signature", "publicKey", "Hm", "G", "S", "ePHm", "eGS", "exp", "verifyShortSignature", "eHmP", "eSG", "aggregatePublicKeys", "publicKeys", "aggAffine", "sum", "aggregateSignatures", "signatures", "s", "aggregateShortSignatures", "verifyBatch", "messages", "sig", "nMessages", "nPublicKeys", "paired", "groupPublicKey", "subMessage", "product", "a", "b", "_0n", "_1n", "_2n", "_3n", "_4n", "_8n", "_16n", "Fp_raw", "Fp", "Field", "Fr", "Fp2Add", "c0", "c1", "r0", "r1", "Fp2Subtract", "Fp2Multiply", "rhs", "t1", "t2", "o0", "o1", "Fp2Square", "a", "b", "c", "FP2_ORDER", "Fp2", "bitLen", "bitMask", "num", "power", "FpPow", "nums", "FpInvertBatch", "lhs", "factor", "candidateSqrt", "check", "R", "FP2_ROOTS_OF_UNITY", "divisor", "r", "index", "root", "x1", "x2", "re1", "im1", "re2", "im2", "x", "x0", "sign_0", "zero_0", "sign_1", "concatBytes", "t0", "tuple", "fps", "n", "FP2_FROBENIUS_COEFFICIENTS", "item", "rv1", "pair", "Fp6Add", "c2", "r2", "Fp6Subtract", "Fp6Multiply", "Fp6Square", "t3", "t4", "Fp6", "t", "FP6_FROBENIUS_COEFFICIENTS_1", "FP6_FROBENIUS_COEFFICIENTS_2", "b1", "b0", "BLS_X", "BLS_X_LEN", "Fp12Add", "Fp12Subtract", "Fp12Multiply", "Fp12Square", "ab", "Fp4Square", "a2", "b2", "Fp12", "coeff", "FP12_FROBENIUS_COEFFICIENTS", "o4", "c0c0", "c0c1", "c0c2", "c1c0", "c1c1", "c1c2", "t5", "t6", "t7", "t8", "t9", "z", "i", "bitGet", "t2_t5_pow_q2", "t4_t1_pow_q3", "t6_t1c_pow_q1", "t7_t3c_t1", "isogenyMapG2", "isogenyMap", "isogenyMapG1", "j", "G2_SWU", "mapToCurveSimpleSWU", "G1_SWU", "ut_root", "wsq", "wcu", "wsq_inv", "wcu_inv", "psi", "y", "y2", "G2psi", "P", "affine", "p", "PSI2_C1", "psi2", "G2psi2", "htfDefaults", "sha256", "COMPRESSED_ZERO", "setMask", "parseMask", "bytes", "mask", "compressed", "infinity", "sort", "signatureG1ToRawBytes", "point", "isZero", "bls12_381", "numberToBytesBE", "signatureG2ToRawBytes", "len", "y0", "y1", "z2", "bls", "cubicRootOfUnityModP", "phi", "_c", "scalars", "value", "compressedValue", "bytesToNumberBE", "right", "isCompressed", "hex", "ensureBytes", "aflag", "bytesToHex", "L", "slc", "from", "to", "x_1", "x_0", "Y_bit", "flag", "half", "z1", "aflag1", "isGreater", "randomBytes", "blsVerify", "pk", "sig", "msg", "primaryKey", "toHex", "signature", "message", "bls12_381", "decodeLeb128", "buf", "lebDecode", "PipeArrayBuffer", "decodeTime", "decoded", "CertificateVerificationError", "AgentError", "reason", "NodeId", "isBufferEqual", "a", "b", "a8", "b8", "Certificate", "_Certificate", "certificate", "_rootKey", "_canisterId", "_blsVerify", "_maxAgeInMinutes", "decode", "options", "cert", "blsVerify", "path", "lookupResultToBuffer", "lookup_path", "label", "rootHash", "reconstruct", "derKey", "sig", "key", "extractDER", "msg", "concat", "domain_sep", "sigVer", "lookupTime", "CertificateVerificationError", "FIVE_MINUTES_IN_MSEC", "MAX_AGE_IN_MSEC", "now", "earliestCertificateTime", "fiveMinutesFromNow", "certTime", "decodeTime", "d", "check_canister_ranges", "Principal", "toHex", "publicKeyLookup", "DER_PREFIX", "fromHex", "KEY_LENGTH", "buf", "expectedLength", "prefix", "result", "t", "NodeId", "hash", "s", "len", "str", "tree", "find_label", "flatten_forks", "l", "trees", "p", "params", "canisterId", "subnetId", "rangeLookup", "v", "r", "CustomPath", "key", "path", "decodeStrategy", "request", "options", "agent", "paths", "canisterId", "Principal", "uniquePaths", "encodedPaths", "encodePath", "status", "promises", "index", "response", "cert", "Certificate", "lookup", "data", "fetchNodeKeys", "lookupResultToBuffer", "decodeTime", "decodeControllers", "decodeHex", "decodeLeb128", "decodeCbor", "decodeUtf8", "error", "_a", "AgentError", "certificate", "root_key", "decode", "tree", "delegation", "subnetId", "check_canister_ranges", "nodeTree", "lookup_path", "nodeForks", "flatten_forks", "nodeKeys", "fork", "node_id", "derEncodedPublicKey", "encoder", "encode", "arg", "canisterBuffer", "metaPath", "encoded", "buf", "toHex"]
}
